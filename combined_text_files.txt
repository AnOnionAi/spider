Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
tick • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: September 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: September 2021 StackOverflow's most loved web framework  Dani Sandoval Sep 1 2021 On this page   On this page  This month, Svelte was voted StackOverflow's most loved web framework, Tan Li Hau talked to Svelte Radio about his Svelte-filled YouTube channel, and SvelteKit made even more progress towards its 1.0 release!
New in Sveltepermalink
use:actions can now be used on <svelte:body> (3.42.0)
HTMLElement, SVGElement (3.42.2) and BigInt (3.42.3) are now known globals
There is less code in Svelte's output thanks to the following improvements in 3.42.2:
Whitespace is now collapsed in class and style attributes
Hydrated components have been updated to only rely upon helpers for creating the types of elements present in the component
Scaling is now accounted for in flip animations (3.42.2)
All <option>s in a <select> are now deselected when the bound value doesn't match any of them (3.42.2)
For a full list of features and bug fixes, check out the Svelte changelog.
SvelteKit UpdatespermalinkSvelte maintainers are looking for help getting SvelteKit to 1.0. We've knocked out over 100 issues that were on the 1.0 milestone. There's only a couple dozen left and we'd love a hand making that list a bit shorter!
If you'd like to help, please consider working on any of the 1.0 milestone issues.
The focus this past month was on continuing to iron out any kinks, with well over 100 PRs merged. A few new features went in as well...
SvelteKit will now detect if a prerendered app is trying to access a query parameter and return an error instead of failing silently (#2104)
adapter-node now lets you add the Kit middleware to your own server for use with other middleware. You can also add middleware in dev mode with more improvements to come in this area
The new sequence helper lets you chain together multiple handle calls
A new handleError hook gives you the option to send data to an error tracking service, or to customise the formatting before printing the error to the console.
adapter-node can now listen on socket path (#2048)
To see all updates to SvelteKit, check out the SvelteKit changelog.
Community ShowcasepermalinkApps & Sites
macos-web by @puruvjdev has been rebuilt with Svelte from the ground up. Check out all the details in this Twitter thread
Brave Search is using Svelte
exatorrent is a self-hostable, easy-to-use, lightweight and feature-rich torrent client written in Go and Svelte
json2TsTypes is a simple tool which will convert your JSON to TypeScript Types/Interfaces
Histogram.dev generates histograms for each feature in a CSV
cybernetic.dev is a collection of data-centric UI experiments made while learning Svelte
LunaNotes is a Chrome extension to help with taking YouTube video notes
theia.games's built-in 3D environment editor lets you create a VR world with a menu built in Svelte
Ferrum is a music library and player available for Mac, Windows or Linux
Fluid Earth is an interactive WebGL application for visualizing Earth's atmosphere and oceans
Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better? Check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
Educational Content
Tauri with Standard Svelte or SvelteKit walks through how to setup Svelte with Tauri, a new light-weight framework for developing cross-platform hybrid desktop applications
Svelte - Web App Development Reimagined [An Intro to Svelte] is a great intro talk from the goto; conference
LevelUpTuts - Even More 5 Things I Like More In Svelte Than React highlights Svelte's approach to refs (don't need them), meta tags and more
State Management in Svelte Applications is a tutorial on how to use the Svelte state management store to manage state in Svelte applications
Migrating from Sapper to SvelteKit is a review and retrospective of ShipBit's migration from Sapper
Libraries, Tools & Components
svelte-stripe-js is everything you need to add Stripe to your Svelte project. 100% SvelteKit compatible
svelte-steps is a customizable step component written in Svelte
simple-optics-module is an online open source optics tool for experimenting and teaching geometrical optics
inlang is an internationalization (i18n) tool for SvelteKit apps
Sveno is a component transpiler that transforms React components to Svelte components
svelte-useactions is a fully typed library for passing actions to components
Svelte-Element-Query is a 322b library/action for element queries
svelte-meta-tags is a plug-in that makes managing SEO easier in Svelte projects
svelte-domtree lets you visualize the DOM - similar to DOM tree in Chrome DevTools
Diffx, a cross-framework state management library, just added Svelte support
svelte-ionic-starter a project template for Svelte + Ionic + CapacitorJS apps with live reload and iOS/Android build targets
demo-sveltekit-sanity is a starter kit for SvelteKit and Sanity, an open source React CMS
Check out the community site sveltesociety.dev for more templates, adders and adapters from across the Svelte ecosystem.
See you next month!permalinkWant more updates? Join us on Reddit or Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Sign in to GitHub · GitHub
Skip to content
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.
You switched accounts on another tab or window. Reload to refresh your session.
Dismiss alert
Sign in to GitHub
to continue to svelte-dev
Username or email address
Password
Forgot password?
Password login alternatives
Sign in with a passkey
New to GitHub?
Create an account
Terms
Privacy
Docs
Contact GitHub Support
You can’t perform that action at this time.
What's new in Svelte: February 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: February 2023 Minor versions and major satisfaction  Dani Sandoval Feb 1 2023 On this page   On this page  Since last month, we've seen a couple of minor versions across Svelte and SvelteKit, a bunch of educational content to support the 1.0 release, as well as the State of JS survey results...
Svelte, once again, increased in satisfaction and interest, so thanks to everyone who voted!
Let's dive into the updates...
What's new in SvelteKitpermalinkWork in the Svelte ecosystem this month has been focused on SvelteKit bug fixes and addressing feedback from the 1.0 launch. One of the more awaited bug fixes to SvelteKit's base path support landed, which means that you can now create SvelteKit projects on remote development environments. There have been several new releases with these fixes as well as a handful of new features such as:
The submitter's value will now be included automatically when progressively enhancing  (1.0.3, #8273)
Added an error in dev mode if global fetch is used with relative URL (1.0.8, #8370)
A warning will now indicated that hydration may break if comments are removed from HTML (1.0.11, #8423)
A warning will occur when of page options are used in .svelte files or a missing <slot /> in layout is detected (1.1.0, #8475)
The new text(...) helper makes it easy to generate text responses (1.2.0, #8371)
The public env can now be accessed within app.html (1.2.0, Docs, #8449)
An error will now be thrown if cookie exceeds size limit (1.2.1, #8591)
The generated tsconfig can now be modified (1.3.0, #8606)
What's new in Svelte and Language Toolspermalink
Added support for html.customData from the VS Code HTML language service (extensions-107.0.0, #1824)
Autocompletion for stores that need to be imported (#1823) and object/class member snippets (#1817) has been added to the Svelte extension (extensions-107.0.0)
Improve detection of promises that are also functions (Svelte 3.55.1, #8162)
Add missing types and properties for the global part attribute and on:submit, respectively (Svelte 3.55.1, #8181)
Lots of performance and bug fixes (Svelte 3.55.1* and extensions-107.0.x)
*for all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
Community ShowcasepermalinkApps & Sites built with Svelte
Titowest.com is a series of photographic films by the writer & photographer, Tito West
Verve is a lightweight and blazingly fast launcher for accessing and opening applications, files and documents
Round The World is an interactive guide to the travels of Andrew Carnegie
Linear Regression is an interactive blog post visual introduction to (almost) everything you should know about linear regression
Flotes is a free note taking app enhanced with flashcard features
nomie is a Daily Journal for short attention spans
nocode.gallery is a collection of stunning websites made with no code
Whom to Follow helps you find accounts you'll love by searching the network of accounts you already follow
poker-simulator is a poker simulation and evaluation tool
Pixelicious converts your images into pixel art
Apple Music is now built with Svelte (proof)
Learning Resources
Featuring Svelte Contributors and Ambassadors
SvelteKit | Rich Harris | ViteConf 2022
Talking Gradio and AI with pngwn 🐧 from Svelte Radio
Progressively enhancing the Marvel By Year filter and Advent of SvelteKit 2022: my favorite demos by Geoff Rich
EP 13: Contributing more to open source + a Svelte Newsletter showcase rewind ⏪ by Dani Sandoval
To Watch or Hear
I built a $5 chat app with Pocketbase & Svelte. Will it scale? by Fireship
The Comprehensive Introduction To SvelteKit, What Svelte UI Library Should You Use? and Learn Everything About SvelteKit Routing (Pages, Layout, Nested Routes) by Joy of Code
Progressive Enhancement in SvelteKit (use:enhance), Are Your Routes Actually Protected? and 10X Your SvelteKit Developer Experience in VSCode by Huntabyte
The easiest realtime app I’ve ever built by Beyond Fireship
Angular developers can learn Svelte so fast... by Joshua Morony
SvelteKit + PocketBase Integration: User Login and Registration by Jian Yuan Lee
Marvels Of Using Svelte and SvelteKit - JSJ 566 with Tracey Lee and Adam L Barrett
To Read
A practical first look at the Svelte framework by Daniel Beer
State Modeling in Svelte with XState is the port of the Frontend Masters React + XState workshop written in Svelte and built with SvelteKit!
🚀 Code your SvelteKit website faster with Stylify CSS by Stylify CSS
🎮 Five Svelte Games To Learn How To Code by Tom Smykowski
How to make declarative (code-based) router instead of file-based router in SvelteKit by Dev Punk
How to import tailwindcss custom config in JS/TS parts of a SvelteKit app by 0gust1
SvelteKit Internals: Load function and Svelte and CSS by Justin Ahinon
Internationalization Formatting with Intl + SSR + SvelteKit by Captain Codeman
Typesafe i18n with SvelteKit by Andreas Söderlund
Authorization in your SvelteKit app by Adam Barrett
Validate your form using Sveltekit, Tailwindcss, Felte and Yup by Hessel
SvelteKit Form Actions bound to TypeScript class + Validation (yup) w/dynamic array by Hekili Tech
Smooth Page Transitions with SvelteKit by Phil Kruft
Redis Integration in SvelteKit: A Game-Changer for Session Management by Shivam Meena
SvelteKit and GitHub Pages by Andrew Lester
Tailwind + Sveltekit in 2023 by Mitch Gent
Svelte Stores Tutorial: Share Data Between Multiple Components by Vincent Widerberg
Libraries, Tools & Components
Sveltepress is a simple, easy to use, content centered site build tool with the full power of SvelteKit
Svelte Form Helper is a lightweight helper for form validation with Svelte
Dapper UI is a sleek and modern UI component library for Svelte, offering full TypeScript support and extensive documentation
TeilUI is a better way to build design systems with Svelte
Neodrag is an SSR-friendly, multi-framework draggable library
Svelvet, a UI library for Svelte, is now 5.0 (read more here)
Svelte Inview is a Svelte action that monitors an element enters or leaves the viewport/parent element
html2svelte makes it easy to convert HTML to Svelte components in a snap
Thanks for reading! Feel free to let us know if we missed anything on Reddit or Discord
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/store • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/store   Edit this page on GitHub On this page   On this page  The svelte/store module exports functions for creating readable, writable and derived stores.
Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.
This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.
writablepermalink
tsfunction writable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Writable<T>;
Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.
set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.
update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'store.tstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'store.tstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.
readablepermalink
tsfunction readable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Readable<T>;
Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.
tsimport { readable } from 'svelte/store';
const time = readable(new Date(), (set) => {	set(new Date());
const interval = setInterval(() => {		set(new Date());	}, 1000);
return () => clearInterval(interval);});
const ticktock = readable('tick', (set, update) => {	const interval = setInterval(() => {		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));	}, 1000);
return () => clearInterval(interval);});derivedpermalink
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (		values: StoresValues<S>,		set: (value: T) => void,		update: (fn: Updater<T>) => void	) => Unsubscriber | void,	initial_value?: T | undefined): Readable<T>;
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (values: StoresValues<S>) => T,	initial_value?: T | undefined): Readable<T>;
Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.
In the simplest version, derived takes a single store, and the callback returns a derived value.
tsimport { derived } from 'svelte/store';
const doubled = derived(a, ($a) => $a * 2);The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.
In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.
tsimport { derived } from 'svelte/store';
const delayed = derived(	a,	($a, set) => {		setTimeout(() => set($a), 1000);	},	2000);
const delayedIncrement = derived(a, ($a, set, update) => {	set($a);	setTimeout(() => update((x) => x + 1), 1000);	// every time $a produces a value, this produces two	// values, $a immediately and then $a + 1 a second later});If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.
tsimport { derived } from 'svelte/store';
const tick = derived(	frequency,	($frequency, set) => {		const interval = setInterval(() => {			set(Date.now());		}, 1000 / $frequency);
return () => {			clearInterval(interval);		};	},	2000);In both cases, an array of arguments can be passed as the first argument instead of a single store.
tsimport { derived } from 'svelte/store';
const summed = derived([a, b], ([$a, $b]) => $a + $b);
const delayed = derived([a, b], ([$a, $b], set) => {	setTimeout(() => set($a + $b), 1000);});readonlypermalink
tsfunction readonly<T>(store: Readable<T>): Readable<T>;
This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.
tsimport { readonly, writable } from 'svelte/store';
const writableStore = writable(1);const readableStore = readonly(writableStore);
Property 'set' does not exist on type 'Readable<number>'.2339Property 'set' does not exist on type 'Readable<number>'.readableStore.subscribe(console.log);
writableStore.set(2); // console: 2readableStore.set(2); // ERRORgetpermalink
tsfunction get<T>(store: Readable<T>): T;
Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.
This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.
tsimport { get } from 'svelte/store';
const value = get(store);TypespermalinkReadablepermalinkReadable interface for subscribing.
tsinterface Readable<T> {…}
tssubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;
run subscription callback
invalidate cleanup callback
Subscribe on value changes.
StartStopNotifierpermalinkStart and stop notification callbacks.
This function is called when the first subscriber subscribes.
tstype StartStopNotifier<T> = (	set: (value: T) => void,	update: (fn: Updater<T>) => void) => void | (() => void);
SubscriberpermalinkCallback to inform of a value updates.
tstype Subscriber<T> = (value: T) => void;
UnsubscriberpermalinkUnsubscribes from value updates.
tstype Unsubscriber = () => void;
UpdaterpermalinkCallback to update a value.
tstype Updater<T> = (value: T) => T;
WritablepermalinkWritable interface for both updating and subscribing.
tsinterface Writable<T> extends Readable<T> {…}
tsset(this: void, value: T): void;
value to set
Set value and inform subscribers.
tsupdate(this: void, updater: Updater<T>): void;
updater callback
Update value using callback and inform subscribers.
previous svelte next svelte/motion
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/compiler • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API svelte/compiler   Edit this page on GitHub On this page   On this page  Typically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is vite-plugin-svelte. The SvelteKit framework provides a setup leveraging vite-plugin-svelte to build applications as well as a tool for packaging Svelte component libraries. Svelte Society maintains a list of other bundler plugins for additional tools like Rollup and Webpack.
Nonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.
compilepermalink
tsfunction compile(	source: string,	options?: CompileOptions): any;
This is where the magic happens. svelte.compile takes your component source code, and turns it into a JavaScript module that exports a class.
tsimport { compile } from 'svelte/compiler';
const result = compile(source, {	// options});Refer to CompileOptions for all the available options.
The returned result object contains the code for your component, along with useful bits of metadata.
tsconst { js, css, ast, warnings, vars, stats } = compile(source);Refer to CompileResult for a full description of the compile result.
parsepermalink
tsfunction parse(	template: string,	options?: ParserOptions): Ast;
The parse function parses a component, returning only its abstract syntax tree. Unlike compiling with the generate: false option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time.
tsimport { parse } from 'svelte/compiler';
const ast = parse(source, { filename: 'App.svelte' });preprocesspermalink
tsfunction preprocess(	source: string,	preprocessor: PreprocessorGroup | PreprocessorGroup[],	options?:		| {				filename?: string | undefined;		  }		| undefined): Promise<Processed>;
A number of official and community-maintained preprocessing plugins are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.
You can write your own preprocessor using the svelte.preprocess API.
The preprocess function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a <style lang="sass"> block into vanilla CSS.
The first argument is the component source code. The second is an array of preprocessors (or a single preprocessor, if you only have one), where a preprocessor is an object with a name which is required, and markup, script and style functions, each of which is optional.
The markup function receives the entire component source text, along with the component's filename if it was specified in the third argument.
The script and style functions receive the contents of <script> and <style> elements respectively (content) as well as the entire component source text (markup). In addition to filename, they get an object of the element's attributes.
Each markup, script or style function must return an object (or a Promise that resolves to an object) with a code property, representing the transformed source code. Optionally they can return an array of dependencies which represents files to watch for changes, and a map object which is a sourcemap mapping back the transformation to the original code. script and style preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag.
Preprocessor functions should return a map object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly.
tsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';
const { code } = await preprocess(	source,	{		markup: ({ content, filename }) => {			const pos = content.indexOf('foo');			if (pos < 0) {				return { code: content };			}			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });			return {				code: s.toString(),				map: s.generateMap()			};		}	},	{		filename: 'App.svelte'	});If a dependencies array is returned, it will be included in the result object. This is used by packages like vite-plugin-svelte and rollup-plugin-svelte to watch additional files for changes, in the case where your <style> tag has an @import (for example).
preprocess-sass.jstsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.2322Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.import sass from 'sass';import { dirname } from 'path';Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.2345Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.
const { code } = await preprocess(	source,	{		name: 'my-fancy-preprocessor',		markup: ({ content, filename }) => {			// Return code as is when no foo string present			const pos = content.indexOf('foo');			if (pos < 0) {				return;			}
// Replace foo with bar using MagicString which provides			// a source map along with the changed code			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });
return {				code: s.toString(),				map: s.generateMap({ hires: true, file: filename })			};		},		style: async ({ content, attributes, filename }) => {			// only process <style lang="sass">			if (attributes.lang !== 'sass') return;
const { css, stats } = await new Promise((resolve, reject) =>				sass.render(					{						file: filename,						data: content,						includePaths: [dirname(filename)]					},					(err, result) => {						if (err) reject(err);						else resolve(result);					}				)			);
// remove lang attribute from style tag			delete attributes.lang;
return {				code: css.toString(),				dependencies: stats.includedFiles,				attributes			};		}	},	{		filename: 'App.svelte'	});Multiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, markup runs first, then script and style.
In Svelte 3, all markup functions ran first, then all script and then all style preprocessors. This order was changed in Svelte 4.
multiple-preprocessor.jstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(source, [	{		name: 'first preprocessor',		markup: () => {			console.log('this runs first');		},		script: () => {			console.log('this runs second');		},		style: () => {			console.log('this runs third');		}	},	{		name: 'second preprocessor',		markup: () => {			console.log('this runs fourth');		},		script: () => {			console.log('this runs fifth');		},		style: () => {			console.log('this runs sixth');		}	}], {	filename: 'App.svelte'});multiple-preprocessor.tstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(	source,	[		{			name: 'first preprocessor',			markup: () => {				console.log('this runs first');			},			script: () => {				console.log('this runs second');			},			style: () => {				console.log('this runs third');			},		},		{			name: 'second preprocessor',			markup: () => {				console.log('this runs fourth');			},			script: () => {				console.log('this runs fifth');			},			style: () => {				console.log('this runs sixth');			},		},	],	{		filename: 'App.svelte',	},);walkpermalinkThe walk function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of estree-walker.
The walker takes an abstract syntax tree to walk and an object with two optional methods: enter and leave. For each node, enter is called (if present). Then, unless this.skip() is called during enter, each of the children are traversed, and then leave is called on the node.
compiler-walk.jstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	}});compiler-walk.tstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	},});VERSIONpermalink
tsconst VERSION: string;
The current version, as set in package.json.
tsimport { VERSION } from 'svelte/compiler';console.log(`running svelte version ${VERSION}`);TypespermalinkCompileOptionspermalink
tsinterface CompileOptions {…}
tsname?: string;
default 'Component'
Sets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope).
It will normally be inferred from filename
tsfilename?: string;
default null
Used for debugging hints and sourcemaps. Your bundler plugin will set it automatically.
tsgenerate?: 'dom' | 'ssr' | false;
default 'dom'
If "dom", Svelte emits a JavaScript class for mounting to the DOM.
If "ssr", Svelte emits an object with a render method suitable for server-side rendering.
If false, no JavaScript or CSS is returned; just metadata.
tserrorMode?: 'throw' | 'warn';
default 'throw'
If "throw", Svelte throws when a compilation error occurred.
If "warn", Svelte will treat errors as warnings and add them to the warning report.
tsvarsReport?: 'full' | 'strict' | false;
default 'strict'
If "strict", Svelte returns a variables report with only variables that are not globals nor internals.
If "full", Svelte returns a variables report with all detected variables.
If false, no variables report is returned.
tssourcemap?: object | string;
default null
An initial sourcemap that will be merged into the final output sourcemap.
This is usually the preprocessor sourcemap.
tsenableSourcemap?: EnableSourcemap;
default true
If true, Svelte generate sourcemaps for components.
Use an object with js or css for more granular control of sourcemap generation.
tsoutputFilename?: string;
default null
Used for your JavaScript sourcemap.
tscssOutputFilename?: string;
default null
Used for your CSS sourcemap.
tssveltePath?: string;
default 'svelte'
The location of the svelte package.
Any imports from svelte or svelte/[module] will be modified accordingly.
tsdev?: boolean;
default false
If true, causes extra code to be added to components that will perform runtime checks and provide debugging information during development.
tsaccessors?: boolean;
default false
If true, getters and setters will be created for the component's props. If false, they will only be created for readonly exported values (i.e. those declared with const, class and function). If compiling with customElement: true this option defaults to true.
tsimmutable?: boolean;
default false
If true, tells the compiler that you promise not to mutate any objects.
This allows it to be less conservative about checking whether values have changed.
tshydratable?: boolean;
default false
If true when generating DOM code, enables the hydrate: true runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch.
When generating SSR code, this adds markers to <head> elements so that hydration knows which to replace.
tslegacy?: boolean;
default false
If true, generates code that will work in IE9 and IE10, which don't support things like element.dataset.
tscustomElement?: boolean;
default false
If true, tells the compiler to generate a custom element constructor instead of a regular Svelte component.
tstag?: string;
default null
A string that tells Svelte what tag name to register the custom element with.
It must be a lowercase alphanumeric string with at least one hyphen, e.g. "my-element".
tscss?: 'injected' | 'external' | 'none' | boolean;
'injected' (formerly true), styles will be included in the JavaScript class and injected at runtime for the components actually rendered.
'external' (formerly false), the CSS will be returned in the css field of the compilation result. Most Svelte bundler plugins will set this to 'external' and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable .css files.
'none', styles are completely avoided and no CSS output is generated.
tsloopGuardTimeout?: number;
default 0
A number that tells Svelte to break the loop if it blocks the thread for more than loopGuardTimeout ms.
This is useful to prevent infinite loops.
Only available when dev: true.
tsnamespace?: string;
default 'html'
The namespace of the element; e.g., "mathml", "svg", "foreign".
tscssHash?: CssHashGetter;
default undefined
A function that takes a { hash, css, name, filename } argument and returns the string that is used as a classname for scoped CSS.
It defaults to returning svelte-${hash(css)}.
tspreserveComments?: boolean;
default false
If true, your HTML comments will be preserved during server-side rendering. By default, they are stripped out.
tspreserveWhitespace?: boolean;
default false
If true, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.
tsdiscloseVersion?: boolean;
default true
If true, exposes the Svelte major version on the global window object in the browser.
CompileResultpermalinkThe returned shape of compile from svelte/compiler
tsinterface CompileResult {…}
tsjs: {…}
The resulting JavaScript code from compling the component
tscode: string;
Code as a string
tsmap: any;
A source map
tscss: CssResult;
The resulting CSS code from compling the component
tsast: Ast;
The abstract syntax tree representing the structure of the component
tswarnings: Warning[];
An array of warning objects that were generated during compilation. Each warning has several properties:
code is a string identifying the category of warning
message describes the issue in human-readable terms
start and end, if the warning relates to a specific location, are objects with line, column and character properties
frame, if applicable, is a string highlighting the offending code with line numbers
tsvars: Var[];
An array of the component's declarations used by tooling in the ecosystem (like our ESLint plugin) to infer more information
tsstats: {	timings: {		total: number;	};};
An object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same!
CssHashGetterpermalink
tstype CssHashGetter = (args: {	name: string;	filename: string | undefined;	css: string;	hash: (input: string) => string;}) => string;
EnableSourcemappermalink
tstype EnableSourcemap =	| boolean	| { js: boolean; css: boolean };
MarkupPreprocessorpermalinkA markup preprocessor that takes a string of code and returns a processed version.
tstype MarkupPreprocessor = (options: {	/**	 * The whole Svelte file content	 */	content: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorpermalinkA script/style preprocessor that takes a string of code and returns a processed version.
tstype Preprocessor = (options: {	/**	 * The script/style tag content	 */	content: string;	/**	 * The attributes on the script/style tag	 */	attributes: Record<string, string | boolean>;	/**	 * The whole Svelte file content	 */	markup: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorGrouppermalinkA preprocessor group is a set of preprocessors that are applied to a Svelte file.
tsinterface PreprocessorGroup {…}
tsname?: string;
Name of the preprocessor. Will be a required option in the next major version
tsmarkup?: MarkupPreprocessor;
tsstyle?: Preprocessor;
tsscript?: Preprocessor;
ProcessedpermalinkThe result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged.
tsinterface Processed {…}
tscode: string;
The new code
tsmap?: string | object;
A source map mapping back to the original code
tsdependencies?: string[];
A list of additional files to watch for changes
tsattributes?: Record<string, string | boolean>;
Only for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged.
tstoString?: () => string;
SveltePreprocessorpermalinkUtility type to extract the type of a preprocessor from a preprocessor group
tsinterface SveltePreprocessor<	PreprocessorType extends keyof PreprocessorGroup,	Options = any> {…}
ts(options?: Options): Required<Pick<PreprocessorGroup, PreprocessorType>>;
previous svelte/action next Client-side component API
Immutable data • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
<svelte:component> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Special elements • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Special elements   Edit this page on GitHub On this page   On this page  <slot>permalink<slot><!-- optional fallback --></slot><slot name="x"><!-- optional fallback --></slot><slot prop={value} />Components can have child content, in the same way that elements can.
The content is exposed in the child component using the <slot> element, which can contain fallback content that is rendered if no children are provided.
<!-- Widget.svelte -->
<div>
<slot>
this fallback content will be rendered when no content is provided, like in the first example
</slot>
</div>
<!-- App.svelte -->
<Widget />
<!-- this component will render the default content -->
<Widget>
<p>this is some child content that will overwrite the default slot content</p>
</Widget>Note: If you want to render regular <slot> element, You can use <svelte:element this="slot" />.
<slot name="name">permalinkNamed slots allow consumers to target specific areas. They can also have fallback content.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</Widget>Components can be placed in a named slot using the syntax <Component slot="name" />.
In order to place content in a slot without using a wrapper element, you can use the special element <svelte:fragment>.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<HeaderComponent slot="header" />
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget>$$slotspermalink$$slots is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in $$slots. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it.
Note that explicitly passing in an empty named slot will add that slot's name to $$slots. For example, if a parent passes <div slot="title" /> to a child component, $$slots.title will be truthy within the child.
<!-- Card.svelte -->
<div>
<slot name="title" />
{#if $$slots.description}
<!-- This <hr> and slot will render only if a slot named "description" is provided. -->
<hr />
<slot name="description" />
{/if}
</div>
<!-- App.svelte -->
<Card>
<h1 slot="title">Blog Post Title</h1>
<!-- No slot named "description" was provided so the optional slot will not be rendered. -->
</Card><slot key={value}>permalinkSlots can be rendered zero or more times and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.
The usual shorthand rules apply — let:item is equivalent to let:item={item}, and <slot {item}> is equivalent to <slot item={item}>.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot prop={item} />
</li>
{/each}
</ul>
<!-- App.svelte -->
<FancyList {items} let:prop={thing}>
<div>{thing.text}</div>
</FancyList>Named slots can also expose values. The let: directive goes on the element with the slot attribute.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot name="item" {item} />
</li>
{/each}
</ul>
<slot name="footer" />
<!-- App.svelte -->
<FancyList {items}>
<div slot="item" let:item>{item.text}</div>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</FancyList><svelte:self>permalinkThe <svelte:self> element allows a component to include itself, recursively.
It cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.
<script>
/** @type {number} */
export let count;
</script>
{#if count > 0}
<p>counting down... {count}</p>
<svelte:self count={count - 1} />
{:else}
<p>lift-off!</p>
{/if}<svelte:component>permalink<svelte:component this={expression} />The <svelte:component> element renders a component dynamically, using the component constructor specified as the this property. When the property changes, the component is destroyed and recreated.
If this is falsy, no component is rendered.
<svelte:component this={currentSelection.component} foo={bar} /><svelte:element>permalink<svelte:element this={expression} />The <svelte:element> element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element.
The only supported binding is bind:this, since the element type-specific bindings that Svelte does at build time (e.g. bind:value for input elements) do not work with a dynamic tag type.
If this has a nullish value, the element and its children will not be rendered.
If this is the name of a void element (e.g., br) and <svelte:element> has child elements, a runtime error will be thrown in development mode.
<script>
let tag = 'div';
export let handler;
</script>
<svelte:element this={tag} on:click={handler}>Foo</svelte:element><svelte:window>permalink<svelte:window on:event={handler} /><svelte:window bind:prop={value} />The <svelte:window> element allows you to add event listeners to the window object without worrying about removing them when the component is destroyed, or checking for the existence of window when server-side rendering.
Unlike <svelte:self>, this element may only appear at the top level of your component and must never be inside a block or element.
<script>
/** @param {KeyboardEvent} event */
function handleKeydown(event) {
alert(`pressed the ${event.key} key`);
}
</script>
<svelte:window on:keydown={handleKeydown} />You can also bind to the following properties:
innerWidth
innerHeight
outerWidth
outerHeight
scrollX
scrollY
online — an alias for window.navigator.onLine
devicePixelRatio
All except scrollX and scrollY are readonly.
<svelte:window bind:scrollY={y} />
Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of scrollX and scrollY will cause scrolling. However, if the scrolling behaviour is desired, call scrollTo() in onMount().
<svelte:document>permalink<svelte:document on:event={handler} /><svelte:document bind:prop={value} />Similarly to <svelte:window>, this element allows you to add listeners to events on document, such as visibilitychange, which don't fire on window. It also lets you use actions on document.
As with <svelte:window>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:document on:visibilitychange={handleVisibilityChange} use:someAction />You can also bind to the following properties:
fullscreenElement
visibilityState
All are readonly.
<svelte:body>permalink<svelte:body on:event={handler} />Similarly to <svelte:window>, this element allows you to add listeners to events on document.body, such as mouseenter and mouseleave, which don't fire on window. It also lets you use actions on the <body> element.
As with <svelte:window> and <svelte:document>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:body on:mouseenter={handleMouseenter} on:mouseleave={handleMouseleave} use:someAction /><svelte:head>permalink<svelte:head>...</svelte:head>This element makes it possible to insert elements into document.head. During server-side rendering, head content is exposed separately to the main html content.
As with <svelte:window>, <svelte:document> and <svelte:body>, this element may only appear at the top level of your component and must never be inside a block or element.
<svelte:head>
<title>Hello world!</title>
<meta name="description" content="This is where the description goes for SEO" />
</svelte:head><svelte:options>permalink<svelte:options option={value} />The <svelte:options> element provides a place to specify per-component compiler options, which are detailed in the compiler section. The possible options are:
immutable={true} — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed
immutable={false} — the default. Svelte will be more conservative about whether or not mutable objects have changed
accessors={true} — adds getters and setters for the component's props
accessors={false} — the default
namespace="..." — the namespace where this component will be used, most commonly "svg"; use the "foreign" namespace to opt out of case-insensitive attribute names and HTML-specific warnings
customElement="..." — the name to use when compiling this component as a custom element
<svelte:options customElement="my-custom-element" /><svelte:fragment>permalinkThe <svelte:fragment> element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget> previous Component directives next svelte
Basic markup • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Basic markup   Edit this page on GitHub On this page   On this page  TagspermalinkA lowercase tag, like <div>, denotes a regular HTML element. A capitalised tag, such as <Widget> or <Namespace.Widget>, indicates a component.
<script>
import Widget from './Widget.svelte';
</script>
<div>
<Widget />
</div>Attributes and propspermalinkBy default, attributes work exactly like their HTML counterparts.
<div class="foo">
<button disabled>can't touch this</button>
</div>As in HTML, values may be unquoted.
<input type=checkbox />Attribute values can contain JavaScript expressions.
<a href="page/{p}">page {p}</a>Or they can be JavaScript expressions.
<button disabled={!clickable}>...</button>Boolean attributes are included on the element if their value is truthy and excluded if it's falsy.
All other attributes are included unless their value is nullish (null or undefined).
<input required={false} placeholder="This input field is not required" />
<div title={null}>This div has no title attribute</div>An expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:
<button disabled="{number !== 42}">...</button>When the attribute name and value match (name={name}), they can be replaced with {name}.
<button {disabled}>...</button>
<!-- equivalent to
<button disabled={disabled}>...</button>
-->By convention, values passed to components are referred to as properties or props rather than attributes, which are a feature of the DOM.
As with elements, name={name} can be replaced with the {name} shorthand.
<Widget foo={bar} answer={42} text="hello" />Spread attributes allow many attributes or properties to be passed to an element or component at once.
An element or component can have multiple spread attributes, interspersed with regular ones.
<Widget {...things} />$$props references all props that are passed to a component, including ones that are not declared with export. Using $$props will not perform as well as references to a specific prop because changes to any prop will cause Svelte to recheck all usages of $$props. But it can be useful in some cases – for example, when you don't know at compile time what props might be passed to a component.
<Widget {...$$props} />$$restProps contains only the props which are not declared with export. It can be used to pass down other unknown attributes to an element in a component. It shares the same performance characteristics compared to specific property access as $$props.
<input {...$$restProps} />
The value attribute of an input element or its children option elements must not be set with spread attributes when using bind:group or bind:checked. Svelte needs to be able to see the element's value directly in the markup in these cases so that it can link it to the bound variable.
Sometimes, the attribute order matters as Svelte sets attributes sequentially in JavaScript. For example, <input type="range" min="0" max="1" value={0.5} step="0.1"/>, Svelte will attempt to set the value to 1 (rounding up from 0.5 as the step by default is 1), and then set the step to 0.1. To fix this, change it to <input type="range" min="0" max="1" step="0.1" value={0.5}/>.
Another example is <img src="..." loading="lazy" />. Svelte will set the img src before making the img element loading="lazy", which is probably too late. Change this to <img loading="lazy" src="..."> to make the image lazily loaded.
Text expressionspermalinkA JavaScript expression can be included as text by surrounding it with curly braces.
{expression}Curly braces can be included in a Svelte template by using their HTML entity strings: &lbrace;, &lcub;, or &#123; for { and &rbrace;, &rcub;, or &#125; for }.
If you're using a regular expression (RegExp) literal notation, you'll need to wrap it in parentheses.
<h1>Hello {name}!</h1>
<p>{a} + {b} = {a + b}.</p>
<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>CommentspermalinkYou can use HTML comments inside components.
<!-- this is a comment! --><h1>Hello world</h1>Comments beginning with svelte-ignore disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason.
<!-- svelte-ignore a11y-autofocus -->
<input bind:value={name} autofocus /> previous Svelte components next Logic blocks
svelte/action • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/action   Edit this page on GitHub On this page   On this page  Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called immediately after Svelte has applied updates to the markup whenever that parameter changes.
Don't worry that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
/** @type {string} */
export let bar;
/** @type {import('svelte/action').Action<HTMLElement, string>}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />AttributespermalinkSometimes actions emit custom events and apply custom attributes to the element they are applied to. To support this, actions typed with Action or ActionReturn type can have a last parameter, Attributes:
<script>
/**
* @type {import('svelte/action').Action<HTMLDivElement, { prop: any }, { 'on:emit': (e: CustomEvent<string>) => void }>}
*/
function foo(node, { prop }) {
// the node has been mounted in the DOM
//...LOGIC
node.dispatchEvent(new CustomEvent('emit', { detail: 'hello' }));
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div on:emit={handleEmit} use:foo={{ prop: 'someValue' }} />TypespermalinkActionpermalinkActions are functions that are called when an element is created.
You can use this interface to type such actions.
The following example defines an action that only works on <div> elements
and optionally accepts a parameter which it has a default value for:
tsexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {  // ...}Action<HTMLDivElement> and Action<HTMLDivElement, undefined> both signal that the action accepts no parameters.
You can return an object with methods update and destroy from the function and type which additional attributes and events it has.
See interface ActionReturn for more details.
Docs: https://svelte.dev/docs/svelte-action
tsinterface Action<	Element = HTMLElement,	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
ts<Node extends Element>(	...args: undefined extends Parameter		? [node: Node, parameter?: Parameter]		: [node: Node, parameter: Parameter]): void | ActionReturn<Parameter, Attributes>;
ActionReturnpermalinkActions can return an object containing the two properties defined in this interface. Both are optional.
update: An action can have a parameter. This method will be called whenever that parameter changes,
immediately after Svelte has applied updates to the markup. ActionReturn and ActionReturn<undefined> both
mean that the action accepts no parameters.
destroy: Method that is called after the element is unmounted
Additionally, you can specify which additional attributes and events the action enables on the applied element.
This applies to TypeScript typings only and has no effect at runtime.
Example usage:
tsinterface Attributes {	newprop?: string;	'on:event': (e: CustomEvent<boolean>) => void;}
export function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {	// ...	return {		update: (updatedParameter) => {...},		destroy: () => {...}	};}Docs: https://svelte.dev/docs/svelte-action
tsinterface ActionReturn<	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
tsupdate?: (parameter: Parameter) => void;
tsdestroy?: () => void;
previous svelte/easing next svelte/compiler
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Numeric inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
TypeScript • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Misc TypeScript   Edit this page on GitHub On this page   On this page  You can use TypeScript within Svelte components. IDE extensions like the Svelte VSCode extension will help you catch errors right in your editor, and svelte-check does the same on the command line, which you can integrate into your CI.
SetuppermalinkTo use TypeScript within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript.
Using SvelteKit or VitepermalinkThe easiest way to get started is scaffolding a new SvelteKit project by typing npm create svelte@latest, following the prompts and choosing the TypeScript option.
svelte.config.jstsimport { vitePreprocess } from '@sveltejs/kit/vite';
const config = {	preprocess: vitePreprocess()};
export default config;If you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing npm create vite@latest and selecting the svelte-ts option.
svelte.config.jstsimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
const config = {	preprocess: vitePreprocess()};
export default config;In both cases, a svelte.config.js with vitePreprocess will be added. Vite/SvelteKit will read from this config file.
Other build toolspermalinkIf you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's rollup-plugin-svelte and for Webpack that's svelte-loader. For both, you need to install typescript and svelte-preprocess and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the rollup or webpack template to scaffold the setup from a script.
If you're starting a new project, we recommend using SvelteKit or Vite instead
<script lang="ts">permalinkTo use TypeScript inside your Svelte components, add lang="ts" to your script tags:
<script lang="ts">
let name: string = 'world';
function greet(name: string) {
alert(`Hello, ${name}!`);
}
</script>PropspermalinkProps can be typed directly on the export let statement:
<script lang="ts">
export let name: string;
</script>SlotspermalinkSlot and slot prop types are inferred from the types of the slot props passed to them:
<script lang="ts">
export let name: string;
</script>
<slot {name} />
<!-- Later -->
<Comp let:name>
<!--    ^ Inferred as string -->
{name}
</Comp>EventspermalinkEvents can be typed with createEventDispatcher:
<script lang="ts">
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher<{
event: null; // does not accept a payload
click: string; // has a required string payload
type: string | null; // has an optional string payload
}>();
function handleClick() {
dispatch('event');
dispatch('click', 'hello');
}
function handleType() {
dispatch('event');
dispatch('type', Math.random() > 0.5 ? 'world' : null);
}
</script>
<button on:click={handleClick} on:keydown={handleType}>Click</button>Enhancing built-in DOM typespermalinkSvelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our HTML typings. In that case, you are welcome to open an issue and/or a PR fixing it.
In case this is a custom or experimental attribute/event, you can enhance the typings like this:
additional-svelte-typings.d.tstsdeclare namespace svelteHTML {	// enhance elements	interface IntrinsicElements {		'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };	}	// enhance attributes	interface HTMLAttributes<T> {		// If you want to use on:beforeinstallprompt		'on:beforeinstallprompt'?: (event: any) => any;		// If you want to use myCustomAttribute={..} (note: all lowercase)		mycustomattribute?: any; // You can replace any with something more specific if you like	}}Then make sure that d.ts file is referenced in your tsconfig.json. If it reads something like "include": ["src/**/*"] and your d.ts file is inside src, it should work. You may need to reload for the changes to take effect.
Since Svelte version 4.2 / svelte-check version 3.5 / VS Code extension version 107.10.0 you can also declare the typings by augmenting the svelte/elements module like this:
additional-svelte-typings.d.tstsimport { HTMLButtonAttributes } from 'svelte/elements';
declare module 'svelte/elements' {	export interface SvelteHTMLElements {		'custom-button': HTMLButtonAttributes;	}
// allows for more granular control over what element to add the typings to	export interface HTMLButtonAttributes {		veryexperimentalattribute?: string;	}}
export {}; // ensure this is not an ambient module, else types will be overridden instead of augmentedExperimental advanced typingspermalinkA few features are missing from taking full advantage of TypeScript in more advanced use cases like typing that a component implements a certain interface, explicitly typing slots, or using generics. These things are possible using experimental advanced type capabilities. See this RFC for more information on how to make use of them.
The API is experimental and may change at any point
LimitationspermalinkNo TS in markuppermalinkYou cannot use TypeScript in your template's markup. For example, the following does not work:
<script lang="ts">
let count = 10;
</script>
<h1>Count as string: {count as string}!</h1> <!-- ❌ Does not work -->
{#if count > 4}
{@const countString: string = count} <!-- ❌ Does not work -->
{countString}
{/if}Reactive DeclarationspermalinkYou cannot type your reactive declarations with TypeScript in the way you type a variable. For example, the following does not work:
<script lang="ts">
let count = 0;
$: doubled: number = count * 2; // ❌ Does not work
</script>You cannot add a : TYPE because it's invalid syntax in this position. Instead, you can move the definition to a let statement just above:
<script lang="ts">
let count = 0;
let doubled: number;
$: doubled = count * 2;
</script>TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Accessibility warnings next Svelte 4 migration guide
Element directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Element directives   Edit this page on GitHub On this page   On this page  As well as attributes, elements can have directives, which control the element's behaviour in some way.
on:eventnamepermalinkon:eventname={handler}on:eventname|modifiers={handler}Use the on: directive to listen to DOM events.
App.svelte<script>
let count = 0;
/** @param {MouseEvent} event */
function handleClick(event) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>App.svelte<script lang="ts">
let count = 0;
function handleClick(event: MouseEvent) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.
<button on:click={() => (count += 1)}>
count: {count}
</button>Add modifiers to DOM events with the | character.
<form on:submit|preventDefault={handleSubmit}>
<!-- the `submit` event's default is prevented,
so the page won't reload -->
</form>The following modifiers are available:
preventDefault — calls event.preventDefault() before running the handler
stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element
stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.
passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)
nonpassive — explicitly set passive: false
capture — fires the handler during the capture phase instead of the bubbling phase
once — remove the handler after the first time it runs
self — only trigger handler if event.target is the element itself
trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.
Modifiers can be chained together, e.g. on:click|once|capture={...}.
If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.
<button on:click> The component itself will emit the click event </button>It's possible to have multiple event listeners for the same event:
<script>
let counter = 0;
function increment() {
counter = counter + 1;
}
/** @param {MouseEvent} event */
function track(event) {
trackEvent(event);
}
</script>
<button on:click={increment} on:click={track}>Click me!</button>bind:propertypermalinkbind:property={variable}Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.
The simplest bindings reflect the value of a property, such as input.value.
<input bind:value={name} />
<textarea bind:value={text} />
<input type="checkbox" bind:checked={yes} />If the name matches the value, you can use a shorthand.
<input bind:value />
<!-- equivalent to
<input bind:value={value} />
-->Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type="number"), the value is undefined.
<input type="number" bind:value={num} />
<input type="range" bind:value={num} />On <input> elements with type="file", you can use bind:files to get the FileList of selected files. It is readonly.
<label for="avatar">Upload a picture:</label>
<input accept="image/png, image/jpeg" bind:files id="avatar" name="avatar" type="file" />If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.
<script>
let value = 'Hello World';
</script>
<input
on:input={() => console.log('Old value:', value)}
bind:value
on:input={() => console.log('New value:', value)}
/>Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.
Binding <select> valuepermalinkA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).
<select bind:value={selected}>
<option value={a}>a</option>
<option value={b}>b</option>
<option value={c}>c</option>
</select>A <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.
<select multiple bind:value={fillings}>
<option value="Rice">Rice</option>
<option value="Beans">Beans</option>
<option value="Cheese">Cheese</option>
<option value="Guac (extra)">Guac (extra)</option>
</select>When the value of an <option> matches its text content, the attribute can be omitted.
<select multiple bind:value={fillings}>
<option>Rice</option>
<option>Beans</option>
<option>Cheese</option>
<option>Guac (extra)</option>
</select>Elements with the contenteditable attribute support the following bindings:
innerHTML
innerText
textContent
There are slight differences between each of these, read more about them here.
<div contenteditable="true" bind:innerHTML={html} /><details> elements support binding to the open property.
<details bind:open={isOpen}>
<summary>Details</summary>
<p>Something small enough to escape casual notice.</p>
</details>Media element bindingspermalinkMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...
duration (readonly) — the total duration of the video, in seconds
buffered (readonly) — an array of {start, end} objects
played (readonly) — ditto
seekable (readonly) — ditto
seeking (readonly) — boolean
ended (readonly) — boolean
readyState (readonly) — number between (and including) 0 and 4
...and five two-way bindings:
currentTime — the current playback time in the video, in seconds
playbackRate — how fast or slow to play the video, where 1 is 'normal'
paused — this one should be self-explanatory
volume — a value between 0 and 1
muted — a boolean value indicating whether the player is muted
Videos additionally have readonly videoWidth and videoHeight bindings.
<video
src={clip}
bind:duration
bind:buffered
bind:played
bind:seekable
bind:seeking
bind:ended
bind:readyState
bind:currentTime
bind:playbackRate
bind:paused
bind:volume
bind:muted
bind:videoWidth
bind:videoHeight
/>Image element bindingspermalinkImage elements (<img>) have two readonly bindings:
naturalWidth (readonly) — the original width of the image, available after the image has loaded
naturalHeight (readonly) — the original height of the image, available after the image has loaded
<img
bind:naturalWidth
bind:naturalHeight
></img>Block-level element bindingspermalinkBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:
clientWidth
clientHeight
offsetWidth
offsetHeight
<div bind:offsetWidth={width} bind:offsetHeight={height}>
<Chart {width} {height} />
</div>bind:grouppermalinkbind:group={variable}Inputs that work together can use bind:group.
<script>
let tortilla = 'Plain';
/** @type {Array<string>} */
let fillings = [];
</script>
<!-- grouped radio inputs are mutually exclusive -->
<input type="radio" bind:group={tortilla} value="Plain" />
<input type="radio" bind:group={tortilla} value="Whole wheat" />
<input type="radio" bind:group={tortilla} value="Spinach" />
<!-- grouped checkbox inputs populate an array -->
<input type="checkbox" bind:group={fillings} value="Rice" />
<input type="checkbox" bind:group={fillings} value="Beans" />
<input type="checkbox" bind:group={fillings} value="Cheese" />
<input type="checkbox" bind:group={fillings} value="Guac (extra)" />
bind:group only works if the inputs are in the same Svelte component.
bind:thispermalinkbind:this={dom_node}To get a reference to a DOM node, use bind:this.
<script>
import { onMount } from 'svelte';
/** @type {HTMLCanvasElement} */
let canvasElement;
onMount(() => {
const ctx = canvasElement.getContext('2d');
drawStuff(ctx);
});
</script>
<canvas bind:this={canvasElement} />class:namepermalinkclass:name={value}class:nameA class: directive provides a shorter way of toggling a class on an element.
<!-- These are equivalent -->
<div class={isActive ? 'active' : ''}>...</div>
<div class:active={isActive}>...</div>
<!-- Shorthand, for when name and value match -->
<div class:active>...</div>
<!-- Multiple class toggles can be included -->
<div class:active class:inactive={!active} class:isAdmin>...</div>style:propertypermalinkstyle:property={value}style:property="value"style:propertyThe style: directive provides a shorthand for setting multiple styles on an element.
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
<!-- Variables can be used -->
<div style:color={myColor}>...</div>
<!-- Shorthand, for when property and variable name match -->
<div style:color>...</div>
<!-- Multiple styles can be included -->
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
<!-- Styles can be marked as important -->
<div style:color|important="red">...</div>When style: directives are combined with style attributes, the directives will take precedence:
<div style="color: blue;" style:color="red">This will be red</div>use:actionpermalinkuse:actionuse:action={parameters}tsaction = (node: HTMLElement, parameters: any) => {	update?: (parameters: any) => void,	destroy?: () => void}Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.
Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
export let bar;
/** @type {import('svelte/action').Action}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />Read more in the svelte/action page.
transition:fnpermalinktransition:fntransition:fn={params}transition:fn|globaltransition:fn|global={params}transition:fn|localtransition:fn|local={params}tstransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}A transition is triggered by an element entering or leaving the DOM as a result of a state change.
When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.
The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.
{#if visible}
<div transition:fade>fades in and out</div>
{/if}Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.
{#if x}
{#if y}
<!-- Svelte 3: <p transition:fade|local> -->
<p transition:fade>fades in and out only when y changes</p>
<!-- Svelte 3: <p transition:fade> -->
<p transition:fade|global>fades in and out when x or y change</p>
{/if}
{/if}
By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.
Transition parameterspermalinkLike actions, transitions can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#if visible}
<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}Custom transition functionspermalinkTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the transition begins, with different t and u arguments.
<script>
import { elasticOut } from 'svelte/easing';
/** @type {boolean} */
export let visible;
/**
* @param {HTMLElement} node
* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
*/
function whoosh(node, params) {
const existingTransform = getComputedStyle(node).transform.replace('none', '');
return {
delay: params.delay || 0,
duration: params.duration || 400,
easing: params.easing || elasticOut,
css: (t, u) => `transform: ${existingTransform} scale(${t})`
};
}
</script>
{#if visible}
<div in:whoosh>whooshes in</div>
{/if}A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
App.svelte<script>
export let visible = false;
/**
* @param {HTMLElement} node
* @param {{ speed?: number }} params
*/
function typewriter(node, { speed = 1 }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
}
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}App.svelte<script lang="ts">
export let visible = false;
function typewriter(node: HTMLElement, { speed = 1 }: { speed?: number }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
},
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.
Transition functions also receive a third argument, options, which contains information about the transition.
Available values in the options object are:
direction - one of in, out, or both depending on the type of transition
Transition eventspermalinkAn element with transitions will dispatch the following events in addition to any standard DOM events:
introstart
introend
outrostart
outroend
{#if visible}
<p
transition:fly={{ y: 200, duration: 2000 }}
on:introstart={() => (status = 'intro started')}
on:outrostart={() => (status = 'outro started')}
on:introend={() => (status = 'intro ended')}
on:outroend={() => (status = 'outro ended')}
>
Flies in and out
</p>
{/if}in:fn/out:fnpermalinkin:fnin:fn={params}in:fn|globalin:fn|global={params}in:fn|localin:fn|local={params}out:fnout:fn={params}out:fn|globalout:fn|global={params}out:fn|localout:fn|local={params}Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.
Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.
{#if visible}
<div in:fly out:fade>flies in, fades out</div>
{/if}animate:fnpermalinkanimate:nameanimate:name={params}tsanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}tsDOMRect {	bottom: number,	height: number,	​​left: number,	right: number,	​top: number,	width: number,	x: number,	y: number}An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.
Animations can be used with Svelte's built-in animation functions or custom animation functions.
<!-- When `list` is reordered the animation will run-->
{#each list as item, index (item)}
<li animate:flip>{item}</li>
{/each}Animation ParameterspermalinkAs with actions and transitions, animations can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#each list as item, index (item)}
<li animate:flip={{ delay: 500 }}>{item}</li>
{/each}Custom animation functionspermalinkAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.
If the returned object has a css method, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the animation begins, with different t and u arguments.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
css: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each}A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each} previous Special tags next Component directives
What's new in Svelte: December 2020
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: December 2020 Better tooling, export maps and improvements to slots and context  Dani Sandoval Dec 1 2020 On this page   On this page  It's the last "What's new in Svelte" of the year and there's lots to celebrate! This month's coverage includes updates from rollup-plugin-svelte, Sapper and SvelteKit and a bunch of showcases from the Svelte community!
New features & impactful bug fixespermalink
$$props, $$restProps, and $$slots are all now supported in custom web components (3.29.5, Example) and slot components now support spread props: <slot {...foo} /> (3.30.0)
A new hasContext lifecycle function makes it easy to check whether a key has been set in the context of a parent component (3.30.0 & 3.30.1, Docs)
There is now a new SvelteComponentTyped class which makes it easier to add strongly typed components that extend base Svelte components. Component library and framework authors rejoice! An example: export class YourComponent extends SvelteComponentTyped<{aProp: boolean}, {click: MouseEvent}, {default: {aSlot: string}}> {} (3.31.0, RFC)
Transitions within {:else} blocks should now complete successfully (3.29.5, Example)
Svelte now includes an export map, which explicitly states which files can be imported from its npm package (3.29.5 with some fixes in 3.29.6, 3.29.7 and 3.30.0)
rollup-plugin-svelte had a new 7.0.0 release. The biggest change is that the css option was removed. Users who were using that option should add another plugin like rollup-plugin-css-only as demonstrated in the template
What's going on in Sapper?permalinkLots of new TypeScript definition improvements to make editing Sapper apps even easier! CSS for dynamic imports also should now work in client.js files. (Unreleased)
What's the deal with SvelteKit?permalinkWe're glad you asked! If you didn't catch Rich's blog post from early last month, you can find it here!
For all the features and bugfixes see the CHANGELOGs for Svelte and Sapper.
Community ShowcasepermalinkApps & Sites
narration.studio (Chrome Only) is an automatic in-browser audio recording & editing platform for voice over narration.
Vippet is a video recording and editing tool for the browser.
Pattern Monster is a simple online pattern generator to create repeatable SVG patterns.
Plant-based diets is a website from the World Wildlife Foundation (WWF) built with Svelte.
johnells.se is a Swedish fashion e-commerce site, built with Crown - a Svelte-powered framework.
sentence-length is a learning and analysis tool to show how some authors play with different lengths, while others stick with one.
svelte-presenter lets you quickly make good looking presentations using Svelte and mdsvex.
Demos
u/loopcake got SSR working in Java Spring Boot for all the Java shops out there looking to render Svelte server-side.
svelte-liquid-swipe shows off a fancy interaction pattern using svg paths.
Crossfade Link Animation demonstrates how to animate between navigation links using a crossfade (made by Blu, from the Discord community)
Clip-Path Transitions showcases how to use clip paths and custom transitions to create magical in-and-out transitions (made by Faber, from the Discord community)
Learning Resources
lihautan has been making easy-to-follow videos to share his in-depth knowledge of Svelte.
Lessons From Building a Static Site Generator shares the backstory and thinking behind Elder.js - and the design decision made along the way.
Svelte Tutorial and Projects Course  is a udemy course by John Smilga where students learn Svelte.js by building interesting projects.
Building Pastebin on IPFS - with FastAPI, Svelte, and IPFS explains how to make a distributed pastebin-like application.
Components, Libraries & Tools
svelte-crossword is a customizable crossword puzzle component for Svelte.
svelte-cloudinary makes it easy to integrate Cloudinary with Svelte (including TypeScript and SSR support)
Svelte Nova extends the new Nova editor to support Svelte
saos is a small svelte component to animate your elements on scroll.
Svelte-nStore is a general purpose store replacement that fulfills the Svelte store contract and adds getter and calculation features.
svelte-slimscroll is a Svelte Action that transforms any div into a scrollable area with a nice scrollbar.
svelte-typewriter is a simple and reusable typewriter effect for your Svelte applications
svelte-store-router is a store-based router for Svelte that suggests that routing is just another global state and History API changes are just an optional side-effects of this state.
Routify just released version 2 of its Svelte router.
svelte-error-boundary provides a simple error boundary component for Svelte that can be can be used with both DOM and SSR targets.
svelte2dts generates d.ts files from svelte files, creating truly shareable and well typed components.
See you next month!permalinkGot an idea for something to add to the Showcase? Want to get involved more with Svelte? We're always looking for maintainers, contributors and fanatics... Check out the Svelte Society, Reddit and Discord to get involved!
That's all for the year, folks! See you in January 😎
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Blog • Svelte
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Blog What's new in Svelte: December 2023 Svelte 5 preview announced at Svelte Summit Fall 2023 What's new in Svelte: November 2023 Svelte Summit on Nov 11 and better DevEx for all! What's new in Svelte: October 2023 Reactions to Runes and SvelteKit +server fallbacks Hacktoberfest 2023 with SvelteKit SvelteKit joins in the Hacktoberfest event in 2023 Introducing runes Rethinking 'rethinking reactivity' What's new in Svelte: September 2023 New parameters in SvelteKit's redirect and an onNavigate lifecycle function come to life Unlocking view transitions in SvelteKit 1.24 Streamlined page transitions with onNavigate What's new in Svelte: August 2023 Extending Custom Element Classes and new +server exports What's new in Svelte: July 2023 Svelte 4.0, new website and a tour around the community svelte.dev: A complete overhaul The new site comes with accessibility fixes, new features and bottom navbar Announcing Svelte 4 Updated performance, developer experience, and site What's new in Svelte: June 2023 SvelteHack winners, lots of new bindings, Svelte 4.0.0-next.0, and a bunch of new features in SvelteKit What's new in Svelte: May 2023 New Ambassadors, a new ESLint plugin and a whole bunch of SvelteHack submissions What's new in Svelte: April 2023 Loads of new Svelte compiler features, plus Svelte Summit and SvelteHack Zero-effort type safety More convenience and correctness, less boilerplate What's new in Svelte: March 2023 SvelteHack, post-1.0 SvelteKit improvements and a huge showcase Streaming, snapshots, and other new features since SvelteKit 1.0 Exciting improvements in the latest version of SvelteKit What's new in Svelte: February 2023 Minor versions and major satisfaction What's new in Svelte: January 2023 SvelteKit 1.0, learn.svelte.dev, and type definitions for Svelte elements. Announcing SvelteKit 1.0 Web development, streamlined What's new in Svelte: December 2022 Rounding the corner to SvelteKit 1.0 What's new in Svelte: November 2022 Better forms, routes and inline styles across SvelteKit and Svelte What's new in Svelte: October 2022 Svelte Summit, `use:enhance`, and a SvelteKit Release Candidate! What's new in Svelte: September 2022 Migrating to SvelteKit's new filesystem-based router What's new in Svelte: August 2022 Changes to SvelteKit's `load` before 1.0 plus support for Vite 3 and `vite.config.js`! What's new in Svelte: July 2022 Faster SSR, language tools improvements and a new paid contributor! What's new in Svelte: June 2022 Cancellable dispatched events, deeper {@const} declarations and more! What's new in Svelte: May 2022 Dynamically switch between HTML element types with `<svelte:element>` What's new in Svelte: April 2022 Goodbye fallthrough routes, hello param validators! What's new in Svelte: March 2022 Svelte Summit Spring is coming... and page endpoints are here! What's new in Svelte: February 2022 Rapid-fire releases across Svelte, SvelteKit and the community Accelerating Svelte's Development Scaling the team, building partnerships, and growing the community What's new in Svelte: January 2022 Faster builds with SvelteKit and a much anticipated REPL feature What's new in Svelte: December 2021 Svelte Summit Fall 2021 Recap, Rich Harris joins Vercel, and Kevin goes full-time on Svelte Society What's new in Svelte: November 2021 Over 5000 stars to light up the showcase What's new in Svelte: October 2021 A whole year of "What's new in Svelte What's new in Svelte: September 2021 StackOverflow's most loved web framework What's new in Svelte: August 2021 Shadow DOM, export and await - oh my! What's new in Svelte: July 2021 Keeping cool with fixes, TypeScript tooling and tonnes of new features What's new in Svelte: June 2021 Progress towards SvelteKit 1.0 and tighter TypeScript/Svelte integrations in language tools What's new in Svelte: May 2021 Working toward SvelteKit 1.0 and a showcase full of SvelteKit sites! What's new in Svelte: April 2021 SvelteKit beta and new way to use slots SvelteKit is in public beta And we'd love to have your feedback What's new in Svelte: March 2021 Call for Svelte Summit Speakers! Improved SSR, non-HTML5 compilation targets, and ESLint TypeScript support What's new in Svelte: February 2021 Integrations and improvements at lightning speed... What's new in Svelte: January 2021 A Svelte-packed showcase to kick-off the new year! What's new in Svelte: December 2020 Better tooling, export maps and improvements to slots and context What's the deal with SvelteKit? We're rethinking how to build Svelte apps. Here's what you need to know What's new in Svelte: November 2020 Slot forwarding fixes, SvelteKit for faster local development, and more from Svelte Summit What's new in Svelte: October 2020 New object methods, in-depth learning resources and tons of integration examples! Svelte <3 TypeScript Typernetically enhanced web apps Svelte 3: Rethinking reactivity It's finally here Write less code The most important metric you're not paying attention to Svelte for new developers Never used Node.js or the command line? No problem Svelte on The Changelog Listen to the interview here Virtual DOM is pure overhead Let's retire the 'virtual DOM is fast' myth once and for all Using CSS-in-JS with Svelte You don't need to, but you can Svelte v2 is out! Here's what you need to know Sapper: Towards the ideal web app framework Taking the next-plus-one step The zen of Just Writing CSS I would say this is the future, but we're already doing it. The easiest way to get started with Svelte This'll only take a minute. Frameworks without the framework: why didn't we think of this sooner? You can't write serious applications in vanilla JavaScript without hitting a complexity wall. But a compiler can do it for you.
If blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Declaring props • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Select multiple • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Event modifiers • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers REPL  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/transition • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/transition   Edit this page on GitHub On this page   On this page  The svelte/transition module exports seven functions: fade, blur, fly, slide, scale, draw and crossfade. They are for use with Svelte transitions.
fadepermalink
tsfunction fade(	node: Element,	{ delay, duration, easing }?: FadeParams | undefined): TransitionConfig;
transition:fade={params}in:fade={params}out:fade={params}Animates the opacity of an element from 0 to the current opacity for in transitions and from the current opacity to 0 for out transitions.
fade accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number, default 400) — milliseconds the transition lasts
easing (function, default linear) — an easing function
You can see the fade transition in action in the transition tutorial.
<script>
import { fade } from 'svelte/transition';
</script>
{#if condition}
<div transition:fade={{ delay: 250, duration: 300 }}>fades in and out</div>
{/if}blurpermalink
tsfunction blur(	node: Element,	{		delay,		duration,		easing,		amount,		opacity	}?: BlurParams | undefined): TransitionConfig;
transition:blur={params}in:blur={params}out:blur={params}Animates a blur filter alongside an element's opacity.
blur accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number, default 400) — milliseconds the transition lasts
easing (function, default cubicInOut) — an easing function
opacity (number, default 0) - the opacity value to animate out to and in from
amount (number | string, default 5) - the size of the blur. Supports css units (for example: "4rem"). The default unit is px
<script>
import { blur } from 'svelte/transition';
</script>
{#if condition}
<div transition:blur={{ amount: 10 }}>fades in and out</div>
{/if}flypermalink
tsfunction fly(	node: Element,	{		delay,		duration,		easing,		x,		y,		opacity	}?: FlyParams | undefined): TransitionConfig;
transition:fly={params}in:fly={params}out:fly={params}Animates the x and y positions and the opacity of an element. in transitions animate from the provided values, passed as parameters to the element's default values. out transitions animate from the element's default values to the provided values.
fly accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number, default 400) — milliseconds the transition lasts
easing (function, default cubicOut) — an easing function
x (number | string, default 0) - the x offset to animate out to and in from
y (number | string, default 0) - the y offset to animate out to and in from
opacity (number, default 0) - the opacity value to animate out to and in from
x and y use px by default but support css units, for example x: '100vw' or y: '50%'.
You can see the fly transition in action in the transition tutorial.
<script>
import { fly } from 'svelte/transition';
import { quintOut } from 'svelte/easing';
</script>
{#if condition}
<div
transition:fly={{ delay: 250, duration: 300, x: 100, y: 500, opacity: 0.5, easing: quintOut }}
>
flies in and out
</div>
{/if}slidepermalink
tsfunction slide(	node: Element,	{		delay,		duration,		easing,		axis	}?: SlideParams | undefined): TransitionConfig;
transition:slide={params}in:slide={params}out:slide={params}Slides an element in and out.
slide accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number, default 400) — milliseconds the transition lasts
easing (function, default cubicOut) — an easing function
axis (x | y, default y) — the axis of motion along which the transition occurs
<script>
import { slide } from 'svelte/transition';
import { quintOut } from 'svelte/easing';
</script>
{#if condition}
<div transition:slide={{ delay: 250, duration: 300, easing: quintOut, axis: 'x' }}>
slides in and out horizontally
</div>
{/if}scalepermalink
tsfunction scale(	node: Element,	{		delay,		duration,		easing,		start,		opacity	}?: ScaleParams | undefined): TransitionConfig;
transition:scale={params}in:scale={params}out:scale={params}Animates the opacity and scale of an element. in transitions animate from an element's current (default) values to the provided values, passed as parameters. out transitions animate from the provided values to an element's default values.
scale accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number, default 400) — milliseconds the transition lasts
easing (function, default cubicOut) — an easing function
start (number, default 0) - the scale value to animate out to and in from
opacity (number, default 0) - the opacity value to animate out to and in from
<script>
import { scale } from 'svelte/transition';
import { quintOut } from 'svelte/easing';
</script>
{#if condition}
<div transition:scale={{ duration: 500, delay: 500, opacity: 0.5, start: 0.5, easing: quintOut }}>
scales in and out
</div>
{/if}drawpermalink
tsfunction draw(	node: SVGElement & {		getTotalLength(): number;	},	{		delay,		speed,		duration,		easing	}?: DrawParams | undefined): TransitionConfig;
transition:draw={params}in:draw={params}out:draw={params}Animates the stroke of an SVG element, like a snake in a tube. in transitions begin with the path invisible and draw the path to the screen over time. out transitions start in a visible state and gradually erase the path. draw only works with elements that have a getTotalLength method, like <path> and <polyline>.
draw accepts the following parameters:
delay (number, default 0) — milliseconds before starting
speed (number, default undefined) - the speed of the animation, see below.
duration (number | function, default 800) — milliseconds the transition lasts
easing (function, default cubicInOut) — an easing function
The speed parameter is a means of setting the duration of the transition relative to the path's length. It is a modifier that is applied to the length of the path: duration = length / speed. A path that is 1000 pixels with a speed of 1 will have a duration of 1000ms, setting the speed to 0.5 will double that duration and setting it to 2 will halve it.
<script>
import { draw } from 'svelte/transition';
import { quintOut } from 'svelte/easing';
</script>
<svg viewBox="0 0 5 5" xmlns="http://www.w3.org/2000/svg">
{#if condition}
<path
transition:draw={{ duration: 5000, delay: 500, easing: quintOut }}
d="M2 1 h1 v1 h1 v1 h-1 v1 h-1 v-1 h-1 v-1 h1 z"
fill="none"
stroke="cornflowerblue"
stroke-width="0.1px"
stroke-linejoin="round"
/>
{/if}
</svg>crossfadepermalink
tsfunction crossfade({	fallback,	...defaults}: CrossfadeParams & {	fallback?:		| ((				node: Element,				params: CrossfadeParams,				intro: boolean		  ) => TransitionConfig)		| undefined;}): [	(		node: any,		params: CrossfadeParams & {			key: any;		}	) => () => TransitionConfig,	(		node: any,		params: CrossfadeParams & {			key: any;		}	) => () => TransitionConfig];
The crossfade function creates a pair of transitions called send and receive. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the fallback transition is used.
crossfade accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number | function, default 800) — milliseconds the transition lasts
easing (function, default cubicOut) — an easing function
fallback (function) — A fallback transition to use for send when there is no matching element being received, and for receive when there is no element being sent.
<script>
import { crossfade } from 'svelte/transition';
import { quintOut } from 'svelte/easing';
const [send, receive] = crossfade({
duration: 1500,
easing: quintOut
});
</script>
{#if condition}
<h1 in:send={{ key }} out:receive={{ key }}>BIG ELEM</h1>
{:else}
<small in:send={{ key }} out:receive={{ key }}>small elem</small>
{/if}TypespermalinkBlurParamspermalink
tsinterface BlurParams {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
tsamount?: number | string;
tsopacity?: number;
CrossfadeParamspermalink
tsinterface CrossfadeParams {…}
tsdelay?: number;
tsduration?: number | ((len: number) => number);
tseasing?: EasingFunction;
DrawParamspermalink
tsinterface DrawParams {…}
tsdelay?: number;
tsspeed?: number;
tsduration?: number | ((len: number) => number);
tseasing?: EasingFunction;
EasingFunctionpermalink
tstype EasingFunction = (t: number) => number;
FadeParamspermalink
tsinterface FadeParams {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
FlyParamspermalink
tsinterface FlyParams {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
tsx?: number | string;
tsy?: number | string;
tsopacity?: number;
ScaleParamspermalink
tsinterface ScaleParams {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
tsstart?: number;
tsopacity?: number;
SlideParamspermalink
tsinterface SlideParams {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
tsaxis?: 'x' | 'y';
TransitionConfigpermalink
tsinterface TransitionConfig {…}
tsdelay?: number;
tsduration?: number;
tseasing?: EasingFunction;
tscss?: (t: number, u: number) => string;
tstick?: (t: number, u: number) => void;
previous svelte/motion next svelte/animate
Unlocking view transitions in SvelteKit 1.24
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Unlocking view transitions in SvelteKit 1.24 Streamlined page transitions with onNavigate  Geoff Rich Aug 31 2023 On this page   On this page  The view transitions API has been sweeping the web development world lately, and for good reason. It streamlines the process of animating between two page states, which is especially useful for page transitions.
However, until now, you couldn’t easily use this API in a SvelteKit app, since it was difficult to slot into the right place in the navigation lifecycle. SvelteKit 1.24 brought a new onNavigate lifecycle hook to make view transitions integration much easier – let’s dive in.
How view transitions workpermalinkYou can trigger a view transition by calling document.startViewTransition and passing a callback that updates the DOM somehow. For our purposes today, SvelteKit will update the DOM as the user navigates. Once the callback finishes, the browser will transition to the new page state — by default, it does a crossfade between the old and the new states.
tsdocument.startViewTransition(async () => {Property 'startViewTransition' does not exist on type 'Document'.2339Property 'startViewTransition' does not exist on type 'Document'.	await domUpdate(); // mock function for demonstration purposes});Behind the scenes, the browser does something really clever. When the transition starts, it captures the current state of the page and takes a screenshot. It then holds that screenshot in place while the DOM is updating. Once the DOM has finished updating, it captures the new state, and animates between the two states.
While it’s only implemented in Chrome (and other Chromium-based browsers) for now, WebKit is also in favor of it. Even if you’re on an unsupported browser, it’s a perfect candidate for progressive enhancement since we can always fall back to a non-animated navigation.
It’s important to note that view transitions is a browser API, not a SvelteKit one. onNavigate is the only SvelteKit-specific API we’ll use today. Everything else can be used wherever you write for the web! For more on the view transitions API, I highly recommend the Chrome explainer by Jake Archibald.
How onNavigate workspermalinkBefore learning how to write view transitions, let's highlight the function that makes it all possible: onNavigate.
Until recently, SvelteKit had two navigation lifecycle functions: beforeNavigate, which fires before a navigation starts, and afterNavigate, which fires after the page has been updated following a navigation. SvelteKit 1.24 introduces a third: onNavigate, which will fire on every navigation, immediately before the new page is rendered. Importantly, it will run after any data loading for the page has completed – since starting a view transition prevents any interaction with the page, we want to start it as late as possible.
You can also return a promise from onNavigate, which will suspend the navigation until it resolves. This will let us wait to complete the navigation until the view transition has started.
tsfunction delayNavigation() {	return new Promise((res) => setTimeout(res, 100));}
onNavigate(async (navigation) => {Cannot find name 'onNavigate'.Parameter 'navigation' implicitly has an 'any' type.23047006Cannot find name 'onNavigate'.Parameter 'navigation' implicitly has an 'any' type.	// do some work immediately before the navigation completes
// optionally return a promise to delay navigation until it resolves	return delayNavigation();});With that out of the way, let's see how you can use view transitions in your SvelteKit app.
Getting started with view transitionspermalinkThe best way to see view transitions in action is to try it yourself. You can spin up the SvelteKit demo app by running npm create svelte@latest in your local terminal, or in your browser on StackBlitz. Make sure to use a browser that supports the view transitions API. Once you have the app running, add the following to the script block in src/routes/+layout.svelte.
tsimport { onNavigate } from '$app/navigation';
onNavigate((navigation) => {	if (!document.startViewTransition) return;Property 'startViewTransition' does not exist on type 'Document'.2339Property 'startViewTransition' does not exist on type 'Document'.
return new Promise((resolve) => {		document.startViewTransition(async () => {Property 'startViewTransition' does not exist on type 'Document'.2339Property 'startViewTransition' does not exist on type 'Document'.			resolve();			await navigation.complete;		});	});});With that, every navigation that occurs will trigger a view transition. You can already see this in action – by default, the browser will crossfade between the old and new pages.
How the code works
This code may look a bit intimidating – if you're curious, I can break it down line-by-line, but for now it’s enough to know that adding it will allow you to interact with the view transitions API during navigation.
As mentioned above, the onNavigate callback will run immediately before the new page is rendered after a navigation. Inside the callback, we check if document.startViewTransition exists. If it doesn’t (i.e. the browser doesn’t support it), we exit early.
We then return a promise to delay completing the navigation until the view transition has started. We use a promise constructor so that we can control when the promise resolves.
tsreturn new Promise((resolve) => {A 'return' statement can only be used within a function body.1108A 'return' statement can only be used within a function body.	document.startViewTransition(async () => {		resolve();		await navigation.complete;	});});Inside the promise constructor, we start the view transition. Inside the view transition callback we resolve the promise we just returned, which indicates to SvelteKit that it should finish the navigation. It’s important that the navigation waits to finish until after we start the view transition – the browser needs to snapshot the old state so it can transition to the new state.
Finally, inside the view transition callback we wait for SvelteKit to finish the navigation by awaiting navigation.complete. Once navigation.complete resolves, the new page has been loaded into the DOM and the browser can animate between the two states.
It’s a bit of a mouthful, but by not abstracting it we allow you to interact with the view transition directly and make any customizations you require.
Customizing the transition with CSSpermalinkWe can also customize this page transition using CSS animation. In the style block of your +layout.svelte, add the following CSS rules.
@keyframes fade-in {
from {
opacity: 0;
}
}
@keyframes fade-out {
to {
opacity: 0;
}
}
@keyframes slide-from-right {
from {
transform: translateX(30px);
}
}
@keyframes slide-to-left {
to {
transform: translateX(-30px);
}
}
:root::view-transition-old(root) {
animation: 90ms cubic-bezier(0.4, 0, 1, 1) both fade-out, 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
}
:root::view-transition-new(root) {
animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in, 300ms cubic-bezier(0.4, 0, 0.2, 1) both
slide-from-right;
}Now when you navigate between pages, the old page will fade out and slide to the left, and the new page will fade in and slide from the right. These particular animation styles come from Jake Archibald’s excellent Chrome Developers article on view transitions, which is well worth a read if you want to understand everything you can do with this API.
Note that we have to add :root before the ::view-transition pseudoelements – these elements are only on the root of the document, so we don’t want Svelte to scope them to the component.
You might have noticed that the entire page slides in and out, even though the header is the same on both the old and new page. To make for a smoother transition, we can give the header a unique view-transition-name so that it is animated separately from the rest of the page. In src/routes/Header.svelte, find the header CSS selector in the style block and add a view transition name.
header {
display: flex;
justify-content: space-between;
view-transition-name: header;
}Now, the header will not transition in and out on navigation, but the rest of the page will.
Fixing the types
Since startViewTransition is not supported by all browsers, your IDE may not know that it exists. To make the errors go away and get the correct typings, add the following to your app.d.ts:
tsdeclare global {	// preserve any customizations you have here	namespace App {		// interface Error {}		// interface Locals {}		// interface PageData {}		// interface Platform {}	}
// add these lines	interface ViewTransition {		updateCallbackDone: Promise<void>;		ready: Promise<void>;		finished: Promise<void>;		skipTransition: () => void;	}
interface Document {		startViewTransition(updateCallback: () => Promise<void>): ViewTransition;	}}
export {};
Transitioning individual elementspermalinkWe just saw how giving an element a view-transition-name separates it out from the rest of the page's animation. Setting a view-transition-name also instructs the browser to smoothly animate it to its new position after the transition completes. The view-transition-name acts as a unique identifier so the browser can identify matching elements from the old and new states.
Let’s see what that looks like – our demo app’s navigation has a small triangle indicating the active page. Right now, it abruptly appears in the new position after we navigate. Let’s give it a view-transition-name so the browser animates it to its new position instead.
Inside src/routes/Header.svelte, find the CSS rule creating the active page indicator and give it a view-transition-name:
li[aria-current='page']::before {
/* other existing rules */
view-transition-name: active-page;
}By adding that single line, the indicator will now smoothly slide to its new position instead of jumping.
(It might be easy to miss the difference – look at the small moving triangle indicator at the top of the screen!)
Reduced motionpermalinkIt’s important to respect our users’ motion preferences while implementing animation on the web. Just because you can implement an extreme page transition doesn’t mean you should. To disable all page transitions for users who prefer reduced motion, you can add the following to the global styles.css:
@media (prefers-reduced-motion) {
::view-transition-group(*),
::view-transition-old(*),
::view-transition-new(*) {
animation: none !important;
}
}While this may be the safest option, reduced motion does not necessarily mean no animation. Instead, you could consider your view transitions on a case-by-case basis. For instance, maybe we disable the sliding animation, but leave the default crossfade (which doesn’t involve motion). You can do so by wrapping the ::view-transition rules you want to disable in a prefers-reduced-motion: no-preference media-query:
@media (prefers-reduced-motion: no-preference) {
:root::view-transition-old(root) {
animation: 90ms cubic-bezier(0.4, 0, 1, 1) both fade-out, 300ms cubic-bezier(0.4, 0, 0.2, 1) both
slide-to-left;
}
:root::view-transition-new(root) {
animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in, 300ms cubic-bezier(
0.4,
0,
0.2,
1
) both slide-from-right;
}
}What’s next?permalinkAs you can see, SvelteKit doesn’t abstract a whole lot about how view transitions work – you’re interacting directly with the browser’s built-in document.startViewTransition and ::view-transition APIs, rather than framework abstractions like those found in Nuxt and Astro. We’re eager to see how people end up using view transitions in SvelteKit apps, and whether it makes sense to add higher level abstractions of our own in future.
ResourcespermalinkYou can find the demo code from this post on GitHub and the live version deployed to Vercel. Here are some other view transitions resources you may find helpful:
MDN view transitions docs
Chrome view transitions API explainer
Rich Harris demoing view transitions with onNavigate
My Svelte Summit video showing how to use view transitions for FLIP animations
Fruit list demo (source)
Svelte Summit video list demo (based on a Jake Archibald demo) (source)
Announcing Svelte 4
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Announcing Svelte 4 Updated performance, developer experience, and site  The Svelte team Jun 22 2023 On this page   On this page  After months in the making, we're excited to announce the stable release of Svelte 4.
Time flies - Svelte 3 was released more than four years ago! In JavaScript-framework-time, that's eons. Svelte’s freshness has persisted throughout, but Node.js and browser APIs have evolved during that time and today we’re updating Svelte to take advantage of some of these improvements. Svelte 4 is mainly a maintenance release, bumping minimum version requirements and tightening up the design in specific areas. It sets the stage for the next generation of Svelte to be released as Svelte 5 - we think you’ll love it.
If you haven't tried Svelte yet, take it for a spin in our interactive tutorial, on StackBlitz, or locally with npm create svelte@latest. Svelte lets you easily put together web UIs leveraging the power of HTML, CSS, JS, and the Svelte compiler. Watch Svelte Radio Live to learn more about this release.
What's newpermalinkPerformancepermalinkThis release results in smaller and faster hydration code. To see the impact, SvelteKit users can see their compiled output shrink in size by examining the .svelte-kit/output/client/_app/immutable/nodes folder. For example, on kit.svelte.dev the JS generated across the whole site was reduced in size by 12.7% (126.3 kB to 110.2 kB).
Svelte 4 reduces the Svelte package size by nearly 75% (10.6 MB down to 2.8 MB), which means less waiting on npm install. This improvement will be especially noticeable for users who are loading our interactive learning experience on learn.svelte.dev for the first time, users of the Svelte REPL, and users with limited connectivity. The majority of the remaining package size is eslint support, which necessitates distributing a CJS build, and once the eslint rewrite is completed the Svelte package size can drop by over another 50%.
The number of dependencies in Svelte has been greatly reduced from 61 down to 16. This means faster downloads for our users as well as less susceptibility to supply chain attacks. We also slightly reduced the number of dependencies in the latest versions of SvelteKit as well.
Developer experiencepermalinkSvelte 4 makes the Svelte authoring experience more intuitive and consistent: |local is now the default for transitions to avoid animations blocking page transitions, preprocessors are now easier to write, and multiple fixes make CSP easier to set up and use.
For users of web components, the largest change is an overhaul of the way you use Svelte to author custom elements. By changing the way they are generated, a whole class of bugs and inconsistencies was eliminated.
Finally, we’ve also made several improvements to the IDE authoring experience:
cmd+click in svelte modules now takes you to the implementation rather than a .d.ts file
imports from svelte/internal are now hidden and will not clutter autocomplete suggestions
auto-imports now work more reliably
Updated site, docs, and tutorialpermalinkThe official svelte.dev site has gotten an overhaul. It’s now split into multiple pages with improved mobile nav, overhauled typescript docs, dark mode, and an enhanced REPL. The SvelteKit site is also being updated to match. And we’ve updated all the tutorial links to point to our new learn.svelte.dev experience. The old tutorial remains available for users of Safari 16.3 and earlier.
Stay tuned for a more in-depth blog post about all the site changes in the coming days!
MigratingpermalinkMost apps and libraries that are compatible with Svelte 3 should be compatible with Svelte 4. Library authors will need to update the version range to include Svelte 4 if svelte is specified in the peerDependencies. For application authors, the most common change required will be updating tooling to meet the new minimum version requirements such as Node.js 16. Many other migration steps can be handled with npx svelte-migrate@latest svelte-4.
Read the migration guide for full details.
Svelte 5: the next generation of SveltepermalinkSvelte 5 will be a rewrite of the Svelte compiler and runtime. Svelte 4 was mainly about setting the ground for these future improvements by adopting modern tooling and dropping support for some legacy versions of various technologies such as older bundlers. These changes will help us in a number of ways such as being able to more easily compare the Svelte 5 and Svelte 4 codebases and being able to run the existing tests against the new implementation. Svelte 5 will bring major new features and performance improvements to Svelte. The changes are still baking and not quite ready to share yet, but stay tuned!
ChangelogpermalinkSee the full list of changes in the changelog.
AcknowledgementspermalinkFirst and foremost, thank you to all of the many Svelte maintainers and contributors who made this release possible. Developers contributing multiple PRs to this release were @dummdidumm, @gtm-nayan, @benmccann, @tanhauhau, @Karlinator, and @ngtr6788. Also, thank you to the many community members who donated to the Svelte OpenCollective - these donations sponsored the site overhaul completed by PuruVJ as well as a number of recent fixes from @gtm-nayan.
Finally, thank you to the various library maintainers from across the ecosystem who helped prepare for this release. Thank you to @jessebeach for the help in getting out new versions of aria-query and axobject-query, @jreinhold for ensuring compatibility with Storybook, and @yanick for updating svelte-testing-library. And to ensure things stay working, the svelte-ecosystem-ci setup by @dominikg — which was modeled off his similar work for Vite — has been helping to test against major projects in the ecosystem on an ongoing basis.
What's new in Svelte: July 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: July 2022 Faster SSR, language tools improvements and a new paid contributor!  Dani Sandoval Jul 1 2022 On this page   On this page  From faster SSR to support for Vitest and Storybook in SvelteKit, there's a lot to cover in this month's newsletter...
So let's dive in!
OpenCollective funding drives Svelte forwardpermalinkSvelte supporters have donated approximately $80,000 to the project on OpenCollective. We're happy to share that the funds are being drawn on to move Svelte forward in a meaningful way. @gtm-nayan has begun triaging and fixing SvelteKit issues this past month as a paid contributor to the project to help us get SvelteKit to a 1.0 level of stability! @gtm-nayan has been an active member of the Svelte community for quite some time and is well known for writing the bot that helps keep our Discord server running. We're happy that this funding has allowed Svelte to get much more of his time.
We will also be utilizing OpenCollective funds to allow Svelte core maintainers to attend Svelte Summit in person this fall. Thanks to everyone who has donated so far!
What's new in Svelte & Language Toolspermalink
learn.svelte.dev is a new way to learn Svelte and SvelteKit from the ground up that is currently in development
Faster SSR is coming in the next Svelte release. A PR two years in the making, resulting in up to 3x faster rendering in some benchmarking tests! (PR)
"Find File References" (0.14.28) and "Find Component References" (0.14.29) in the latest versions of the Svelte extension shows where Svelte files and components have been imported and used (Demo)
The Svelte extension now supports CSS path completion (0.14.29)
What's new in SvelteKitpermalink
Introduced @sveltejs/kit/experimental/vite which allows SvelteKit to interoperate with other tools in the Vite ecosystem like Vitest and Storybook (#5094). Please leave feedback as to whether the feature works and is helpful as we consider taking it out of experimental and making vite.config.js required for all users
Streaming in endpoints is now supported (#3419). This was enabled by switching to the Undici fetch implementation (#5117)
Static assets can now be symlinked in development environments (#5089)
server and prod environment variables are now available as a corollary to browser and dev (#5251)
Community ShowcasepermalinkApps & Sites built with Svelte
Virtual Maker lets you make interactive 3D and VR scenes in your browser
Apple Beta Music appears to have been written in some combination of Svelte and web components
Itatiaia, the largest radio station in the country of Brazil just relaunched its news portal in SvelteKit
Pronauns helps you learn pronunciation online with IPA to speak better and sound more native
Immich is an open source, high performance self-hosted backup solution for videos and photos on your mobile phone
Pendek is a link shortener built with SvelteKit, Prisma and PlanetScale
Grunfy is a set of guitar tools - recently migrated to SvelteKit
Radiant: The Future of Radio is a personal radio station app built with Svelte and Capacitor
Imperfect Reminders is a todo list for things that are only sort of time sensitive
Periodic Table is a dynamic Periodic Table component written in Svelte
Svelvet is a lightweight Svelte component library for building interactive node-based diagrams
publint lints for packaging errors to ensure compatibility across environments
Playlistr helps manage and create Spotify playlists
Geoff Rich's page transitions demo shows how SvelteKit's beforeNavigate/afterNavigate hooks can make smooth document transitions in the latest Chrome Canary
Menger Sponge is a fractal built with Threlte
Want to contribute to a site using the latest SvelteKit features? Help build the Svelte Society site!
Learning Resources
Starring the Svelte team
Svelte Origins: A JavaScript Documentary by OfferZen Origins
Full Stack Documentation (announcing learn.svelte.dev) by Rich Harris @ JSNation 2022
All About the Sirens by Svelte Radio
To Watch
SvelteKit Page Endpoints, Named Layouts and Passing data from page component to layout component with $page.stuff by lihautan
🍞 & 🧈: Magically load data with SvelteKit Endpoints by Johnny Magrippis
Svelte for React developers by frontendtier
Learn Svelte JS || JavaScript Compiler for Building Front end Applications by Code with tsksharma
SvelteKit Authentication by Joy of Code
Svelte + websockets: Build a real-time Auction app by Evgeny Maksimov
To Read
Up-To-Date Analytics on a Static Website and Fast, Lightweight Fuzzy Search using Fuse.js by paullj
Use SvelteKit as a handler in the ExpressJs project by Tran Chien
Creating a desktop application with Tauri and SvelteKit by Stijn-B
List of awesome Svelte stores by samuba
SvelteKit Content Security Policy: CSP for XSS Protection by Rodney Lab
SvelteKit Hooks. Everything You Need To Know by Lucretius K. Biah
3 tips for upgrading the performance of your Svelte stores by Mathias Picker
Libraries, Tools & Components
Svend3r is a plug and play D3 charting library for Svelte
Svelte Hover Draw SVG is a lightweight Svelte component to draw SVG on hover
Svelte French Toast provides buttery smooth toast notifications that are lightweight, customizable, and beautiful by default
SVooltip is a basic Svelte tooltip directive, powered by Floating UI
Svelte Brick Gallery is a masonry-like image gallery component for Svelte
use-vest is a Svelte action for Vest - a library that makes it easy to validate forms and show errors when necessary
Svelidate is a simple and lightweight form validation library for Svelte with no dependencies
Svve11 is an "accessibility-first" component library for Svelte
Slidy is a simple, configurable & reusable carousel sliding action script with templates & some useful plugins
Svelte Component Snippets is a VS Code extension with access to common Svelte snippets
Svelte Confetti adds a little bit of flair to your app with some confetti 🎊
What did we miss? Let us know on Reddit or Discord to add your voice.
Don't forget that you can also join us in-person at the Svelte Summit in Stockholm! Come join us for two days of awesome Svelte content! Get your tickets now.
See y'all next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/compiler • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API svelte/compiler   Edit this page on GitHub On this page   On this page  Typically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is vite-plugin-svelte. The SvelteKit framework provides a setup leveraging vite-plugin-svelte to build applications as well as a tool for packaging Svelte component libraries. Svelte Society maintains a list of other bundler plugins for additional tools like Rollup and Webpack.
Nonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.
compilepermalink
tsfunction compile(	source: string,	options?: CompileOptions): any;
This is where the magic happens. svelte.compile takes your component source code, and turns it into a JavaScript module that exports a class.
tsimport { compile } from 'svelte/compiler';
const result = compile(source, {	// options});Refer to CompileOptions for all the available options.
The returned result object contains the code for your component, along with useful bits of metadata.
tsconst { js, css, ast, warnings, vars, stats } = compile(source);Refer to CompileResult for a full description of the compile result.
parsepermalink
tsfunction parse(	template: string,	options?: ParserOptions): Ast;
The parse function parses a component, returning only its abstract syntax tree. Unlike compiling with the generate: false option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time.
tsimport { parse } from 'svelte/compiler';
const ast = parse(source, { filename: 'App.svelte' });preprocesspermalink
tsfunction preprocess(	source: string,	preprocessor: PreprocessorGroup | PreprocessorGroup[],	options?:		| {				filename?: string | undefined;		  }		| undefined): Promise<Processed>;
A number of official and community-maintained preprocessing plugins are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.
You can write your own preprocessor using the svelte.preprocess API.
The preprocess function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a <style lang="sass"> block into vanilla CSS.
The first argument is the component source code. The second is an array of preprocessors (or a single preprocessor, if you only have one), where a preprocessor is an object with a name which is required, and markup, script and style functions, each of which is optional.
The markup function receives the entire component source text, along with the component's filename if it was specified in the third argument.
The script and style functions receive the contents of <script> and <style> elements respectively (content) as well as the entire component source text (markup). In addition to filename, they get an object of the element's attributes.
Each markup, script or style function must return an object (or a Promise that resolves to an object) with a code property, representing the transformed source code. Optionally they can return an array of dependencies which represents files to watch for changes, and a map object which is a sourcemap mapping back the transformation to the original code. script and style preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag.
Preprocessor functions should return a map object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly.
tsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';
const { code } = await preprocess(	source,	{		markup: ({ content, filename }) => {			const pos = content.indexOf('foo');			if (pos < 0) {				return { code: content };			}			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });			return {				code: s.toString(),				map: s.generateMap()			};		}	},	{		filename: 'App.svelte'	});If a dependencies array is returned, it will be included in the result object. This is used by packages like vite-plugin-svelte and rollup-plugin-svelte to watch additional files for changes, in the case where your <style> tag has an @import (for example).
preprocess-sass.jstsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.2322Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.import sass from 'sass';import { dirname } from 'path';Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.2345Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.
const { code } = await preprocess(	source,	{		name: 'my-fancy-preprocessor',		markup: ({ content, filename }) => {			// Return code as is when no foo string present			const pos = content.indexOf('foo');			if (pos < 0) {				return;			}
// Replace foo with bar using MagicString which provides			// a source map along with the changed code			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });
return {				code: s.toString(),				map: s.generateMap({ hires: true, file: filename })			};		},		style: async ({ content, attributes, filename }) => {			// only process <style lang="sass">			if (attributes.lang !== 'sass') return;
const { css, stats } = await new Promise((resolve, reject) =>				sass.render(					{						file: filename,						data: content,						includePaths: [dirname(filename)]					},					(err, result) => {						if (err) reject(err);						else resolve(result);					}				)			);
// remove lang attribute from style tag			delete attributes.lang;
return {				code: css.toString(),				dependencies: stats.includedFiles,				attributes			};		}	},	{		filename: 'App.svelte'	});Multiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, markup runs first, then script and style.
In Svelte 3, all markup functions ran first, then all script and then all style preprocessors. This order was changed in Svelte 4.
multiple-preprocessor.jstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(source, [	{		name: 'first preprocessor',		markup: () => {			console.log('this runs first');		},		script: () => {			console.log('this runs second');		},		style: () => {			console.log('this runs third');		}	},	{		name: 'second preprocessor',		markup: () => {			console.log('this runs fourth');		},		script: () => {			console.log('this runs fifth');		},		style: () => {			console.log('this runs sixth');		}	}], {	filename: 'App.svelte'});multiple-preprocessor.tstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(	source,	[		{			name: 'first preprocessor',			markup: () => {				console.log('this runs first');			},			script: () => {				console.log('this runs second');			},			style: () => {				console.log('this runs third');			},		},		{			name: 'second preprocessor',			markup: () => {				console.log('this runs fourth');			},			script: () => {				console.log('this runs fifth');			},			style: () => {				console.log('this runs sixth');			},		},	],	{		filename: 'App.svelte',	},);walkpermalinkThe walk function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of estree-walker.
The walker takes an abstract syntax tree to walk and an object with two optional methods: enter and leave. For each node, enter is called (if present). Then, unless this.skip() is called during enter, each of the children are traversed, and then leave is called on the node.
compiler-walk.jstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	}});compiler-walk.tstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	},});VERSIONpermalink
tsconst VERSION: string;
The current version, as set in package.json.
tsimport { VERSION } from 'svelte/compiler';console.log(`running svelte version ${VERSION}`);TypespermalinkCompileOptionspermalink
tsinterface CompileOptions {…}
tsname?: string;
default 'Component'
Sets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope).
It will normally be inferred from filename
tsfilename?: string;
default null
Used for debugging hints and sourcemaps. Your bundler plugin will set it automatically.
tsgenerate?: 'dom' | 'ssr' | false;
default 'dom'
If "dom", Svelte emits a JavaScript class for mounting to the DOM.
If "ssr", Svelte emits an object with a render method suitable for server-side rendering.
If false, no JavaScript or CSS is returned; just metadata.
tserrorMode?: 'throw' | 'warn';
default 'throw'
If "throw", Svelte throws when a compilation error occurred.
If "warn", Svelte will treat errors as warnings and add them to the warning report.
tsvarsReport?: 'full' | 'strict' | false;
default 'strict'
If "strict", Svelte returns a variables report with only variables that are not globals nor internals.
If "full", Svelte returns a variables report with all detected variables.
If false, no variables report is returned.
tssourcemap?: object | string;
default null
An initial sourcemap that will be merged into the final output sourcemap.
This is usually the preprocessor sourcemap.
tsenableSourcemap?: EnableSourcemap;
default true
If true, Svelte generate sourcemaps for components.
Use an object with js or css for more granular control of sourcemap generation.
tsoutputFilename?: string;
default null
Used for your JavaScript sourcemap.
tscssOutputFilename?: string;
default null
Used for your CSS sourcemap.
tssveltePath?: string;
default 'svelte'
The location of the svelte package.
Any imports from svelte or svelte/[module] will be modified accordingly.
tsdev?: boolean;
default false
If true, causes extra code to be added to components that will perform runtime checks and provide debugging information during development.
tsaccessors?: boolean;
default false
If true, getters and setters will be created for the component's props. If false, they will only be created for readonly exported values (i.e. those declared with const, class and function). If compiling with customElement: true this option defaults to true.
tsimmutable?: boolean;
default false
If true, tells the compiler that you promise not to mutate any objects.
This allows it to be less conservative about checking whether values have changed.
tshydratable?: boolean;
default false
If true when generating DOM code, enables the hydrate: true runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch.
When generating SSR code, this adds markers to <head> elements so that hydration knows which to replace.
tslegacy?: boolean;
default false
If true, generates code that will work in IE9 and IE10, which don't support things like element.dataset.
tscustomElement?: boolean;
default false
If true, tells the compiler to generate a custom element constructor instead of a regular Svelte component.
tstag?: string;
default null
A string that tells Svelte what tag name to register the custom element with.
It must be a lowercase alphanumeric string with at least one hyphen, e.g. "my-element".
tscss?: 'injected' | 'external' | 'none' | boolean;
'injected' (formerly true), styles will be included in the JavaScript class and injected at runtime for the components actually rendered.
'external' (formerly false), the CSS will be returned in the css field of the compilation result. Most Svelte bundler plugins will set this to 'external' and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable .css files.
'none', styles are completely avoided and no CSS output is generated.
tsloopGuardTimeout?: number;
default 0
A number that tells Svelte to break the loop if it blocks the thread for more than loopGuardTimeout ms.
This is useful to prevent infinite loops.
Only available when dev: true.
tsnamespace?: string;
default 'html'
The namespace of the element; e.g., "mathml", "svg", "foreign".
tscssHash?: CssHashGetter;
default undefined
A function that takes a { hash, css, name, filename } argument and returns the string that is used as a classname for scoped CSS.
It defaults to returning svelte-${hash(css)}.
tspreserveComments?: boolean;
default false
If true, your HTML comments will be preserved during server-side rendering. By default, they are stripped out.
tspreserveWhitespace?: boolean;
default false
If true, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.
tsdiscloseVersion?: boolean;
default true
If true, exposes the Svelte major version on the global window object in the browser.
CompileResultpermalinkThe returned shape of compile from svelte/compiler
tsinterface CompileResult {…}
tsjs: {…}
The resulting JavaScript code from compling the component
tscode: string;
Code as a string
tsmap: any;
A source map
tscss: CssResult;
The resulting CSS code from compling the component
tsast: Ast;
The abstract syntax tree representing the structure of the component
tswarnings: Warning[];
An array of warning objects that were generated during compilation. Each warning has several properties:
code is a string identifying the category of warning
message describes the issue in human-readable terms
start and end, if the warning relates to a specific location, are objects with line, column and character properties
frame, if applicable, is a string highlighting the offending code with line numbers
tsvars: Var[];
An array of the component's declarations used by tooling in the ecosystem (like our ESLint plugin) to infer more information
tsstats: {	timings: {		total: number;	};};
An object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same!
CssHashGetterpermalink
tstype CssHashGetter = (args: {	name: string;	filename: string | undefined;	css: string;	hash: (input: string) => string;}) => string;
EnableSourcemappermalink
tstype EnableSourcemap =	| boolean	| { js: boolean; css: boolean };
MarkupPreprocessorpermalinkA markup preprocessor that takes a string of code and returns a processed version.
tstype MarkupPreprocessor = (options: {	/**	 * The whole Svelte file content	 */	content: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorpermalinkA script/style preprocessor that takes a string of code and returns a processed version.
tstype Preprocessor = (options: {	/**	 * The script/style tag content	 */	content: string;	/**	 * The attributes on the script/style tag	 */	attributes: Record<string, string | boolean>;	/**	 * The whole Svelte file content	 */	markup: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorGrouppermalinkA preprocessor group is a set of preprocessors that are applied to a Svelte file.
tsinterface PreprocessorGroup {…}
tsname?: string;
Name of the preprocessor. Will be a required option in the next major version
tsmarkup?: MarkupPreprocessor;
tsstyle?: Preprocessor;
tsscript?: Preprocessor;
ProcessedpermalinkThe result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged.
tsinterface Processed {…}
tscode: string;
The new code
tsmap?: string | object;
A source map mapping back to the original code
tsdependencies?: string[];
A list of additional files to watch for changes
tsattributes?: Record<string, string | boolean>;
Only for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged.
tstoString?: () => string;
SveltePreprocessorpermalinkUtility type to extract the type of a preprocessor from a preprocessor group
tsinterface SveltePreprocessor<	PreprocessorType extends keyof PreprocessorGroup,	Options = any> {…}
ts(options?: Options): Required<Pick<PreprocessorGroup, PreprocessorType>>;
previous svelte/action next Client-side component API
Media elements • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Special elements / <svelte:element> • Svelte Tutorial
Skip to main content  svelte.dev svelte  ｜ Tutorial     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme               Special elements / <svelte:element> a. Basicsb. Adding datac. Dynamic attributesd. Stylinge. Nested componentsf. Making an appa. Assignmentsb. Declarationsc. Statementsd. Updating arrays and objectsa. Declaring propsb. Default valuesc. Spread propsa. If blocksb. Else blocksc. Else-if blocksd. Each blockse. Keyed each blocksf. Await blocksa. DOM eventsb. Inline handlersc. Event modifiersd. Component eventse. Event forwardingf. DOM event forwardinga. Text inputsb. Numeric inputsc. Checkbox inputsd. Group inputse. Textarea inputsf. Select bindingsg. Select multipleh. Contenteditable bindingsi. Each block bindingsj. Media elementsk. Dimensionsl. Thism. Component bindingsn. Binding to component instancesa. onMountb. onDestroyc. beforeUpdate and afterUpdated. ticka. Writable storesb. Auto-subscriptionsc. Readable storesd. Derived storese. Custom storesf. Store bindingsa. Tweenedb. Springa. The transition directiveb. Adding parametersc. In and outd. Custom CSS transitionse. Custom JS transitionsf. Transition eventsg. Global transitionsh. Deferred transitionsi. Key blocksa. The animate directivea. The use directiveb. Adding parametersa. The class directiveb. Shorthand class directivec. Inline stylesd. The style directivea. Slotsb. Slot fallbacksc. Named slotsd. Checking for slot contente. Slot propsa. setContext and getContexta. <svelte:self>b. <svelte:component>c. <svelte:element>d. <svelte:window>e. <svelte:window> bindingsf. <svelte:document>g. <svelte:body>h. <svelte:head>i. <svelte:options>j. <svelte:fragment>a. Sharing codeb. Exportsa. The @debug tagb. HTML tagsa. Congratulations!    Sometimes we don't know in advance what kind of DOM element to render. <svelte:element> comes in handy here. Instead of a sequence of if blocks...
{#if selected === 'h1'}
<h1>I'm a h1 tag</h1>
{:else if selected === 'h3'}
<h3>I'm a h3 tag</h3>
{:else if selected === 'p'}
<p>I'm a p tag</p>
{/if}...we can have a single dynamic component:
<svelte:element this={selected}>I'm a {selected} tag</svelte:element>The this value can be any string, or a falsy value — if it's falsy, no element is rendered.
Show me  Edit this chapter
Custom JS transitions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
The @debug tag • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
404
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
beforeUpdate and afterUpdate • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate REPL  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Custom stores • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores REPL   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Custom stores • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Write less code
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Write less code The most important metric you're not paying attention to  Rich Harris Apr 20 2019 On this page   On this page  All code is buggy. It stands to reason, therefore, that the more code you have to write the buggier your apps will be.
Writing more code also takes more time, leaving less time for other things like optimisation, nice-to-have features, or being outdoors instead of hunched over a laptop.
In fact it's widely acknowledged that project development time and bug count grow quadratically, not linearly, with the size of a codebase. That tracks with our intuitions: a ten-line pull request will get a level of scrutiny rarely applied to a 100-line one. And once a given module becomes too big to fit on a single screen, the cognitive effort required to understand it increases significantly. We compensate by refactoring and adding comments — activities that almost always result in more code. It's a vicious cycle.
Yet while we obsess — rightly! — over performance numbers, bundle size and anything else we can measure, we rarely pay attention to the amount of code we're writing.
Readability is importantpermalinkI'm certainly not claiming that we should use clever tricks to scrunch our code into the most compact form possible at the expense of readability. Nor am I claiming that reducing lines of code is necessarily a worthwhile goal, since it encourages turning readable code like this...
tsfor (let i = 0; i <= 100; i += 1) {	if (i % 2 === 0) {		console.log(`${i} is even`);	}}...into something much harder to parse:
tsfor (let i = 0; i <= 100; i += 1) if (i % 2 === 0) console.log(`${i} is even`);Instead, I'm claiming that we should favour languages and patterns that allow us to naturally write less code.
Yes, I'm talking about SveltepermalinkReducing the amount of code you have to write is an explicit goal of Svelte. To illustrate, let's look at a very simple component implemented in React, Vue and Svelte. First, the Svelte version:
How would we build this in React? It would probably look something like this:
tsimport React, { useState } from 'react';
export default () => {	const [a, setA] = useState(1);	const [b, setB] = useState(2);
function handleChangeA(event) {		setA(+event.target.value);	}
function handleChangeB(event) {		setB(+event.target.value);	}
return (		<div>			<input type="number" value={a} onChange={handleChangeA} />			<input type="number" value={b} onChange={handleChangeB} />
<p>				{a} + {b} = {a + b}			</p>		</div>	);};Here's an equivalent component in Vue:
<template>
<div>
<input type="number" v-model.number="a">
<input type="number" v-model.number="b">
<p>{{a}} + {{b}} = {{a + b}}</p>
</div>
</template>
<script>
export default {
data: function() {
return {
a: 1,
b: 2
};
}
};
</script>
I'm counting by copying the source code to the clipboard and running `pbpaste | wc -c` in my terminal
In other words, it takes 442 characters in React, and 263 characters in Vue, to achieve something that takes 145 characters in Svelte. The React version is literally three times larger!
It's unusual for the difference to be quite so obvious — in my experience, a React component is typically around 40% larger than its Svelte equivalent. Let's look at the features of Svelte's design that enable you to express ideas more concisely:
Top-level elementspermalinkIn Svelte, a component can have as many top-level elements as you like. In React and Vue, a component must have a single top-level element — in React's case, trying to return two top-level elements from a component function would result in syntactically invalid code. (You can use a fragment — <> — instead of a <div>, but it's the same basic idea, and still results in an extra level of indentation).
In Vue, your markup must be wrapped in a <template> element, which I'd argue is redundant.
BindingspermalinkIn React, we have to respond to input events ourselves:
tsfunction handleChangeA(event) {	setA(+event.target.value);}This isn't just boring plumbing that takes up extra space on the screen, it's also extra surface area for bugs. Conceptually, the value of the input is bound to the value of a and vice versa, but that relationship isn't cleanly expressed — instead we have two tightly-coupled but physically separate chunks of code (the event handler and the value={a} prop). Not only that, but we have to remember to coerce the string value with the + operator, otherwise 2 + 2 will equal 22 instead of 4.
Like Svelte, Vue does have a way of expressing the binding — the v-model attribute, though again we have to be careful to use v-model.number even though it's a numeric input.
StatepermalinkIn Svelte, you update local component state with an assignment operator:
tslet count = 0;
function increment() {	count += 1;}In React, we use the useState hook:
tsconst [count, setCount] = useState(0);
function increment() {	setCount(count + 1);}This is much noisier — it expresses the exact same concept but with over 60% more characters. As you're reading the code, you have to do that much more work to understand the author's intent.
In Vue, meanwhile, we have a default export with a data function that returns an object literal with properties corresponding to our local state. Things like helper functions and child components can't simply be imported and used in the template, but must instead be 'registered' by attaching them to the correct part of the default export.
Death to boilerplatepermalinkThese are just some of the ways that Svelte helps you build user interfaces with a minimum of fuss. There are plenty of others — for example, reactive declarations essentially do the work of React's useMemo, useCallback and useEffect without the boilerplate (or indeed the garbage collection overhead of creating inline functions and arrays on each state change).
How? By choosing a different set of constraints. Because Svelte is a compiler, we're not bound to the peculiarities of JavaScript: we can design a component authoring experience, rather than having to fit it around the semantics of the language. Paradoxically, this results in more idiomatic code — for example using variables naturally rather than via proxies or hooks — while delivering significantly more performant apps.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Area chart • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Deferred transitions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: June 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: June 2021 Progress towards SvelteKit 1.0 and tighter TypeScript/Svelte integrations in language tools  Dani Sandoval Jun 1 2021 On this page   On this page  This month, we saw lots of contributions to SvelteKit and its docs. The language tools also got some new features, most notably deeper integration with Svelte files within JavaScript or TypeScript files. Let's jump into the updates...
New in SvelteKitpermalink
svelte.config.js config files are now loaded in ESM format (.js instead of .cjs).
AMP pages will now use the rendered CSS, rather than emitted CSS
svelte-check has been added to the TypeScript template (sveltejs/kit#1556)
Support for https keypair sveltejs/kit#1456
Now bundling Vite with SvelteKit and using an upgraded version. Remove Vite from your package.json if it's there
Etags for binary responses sveltejs/kit#1382
Renamed $layout to __layout and $error to __error
Removed getContext in favor of request.locals
Renamed .svelte output directory to .svelte-kit. Update your .gitignore accordingly
trailingSlash: 'never' | 'always' | 'ignore' is now available in the config. This should make it easier to build sites that work with static hosting providers that expect a trailing slash for index.html pages, and provides an escape hatch for anyone that needs more complex behaviour.
Notable bug fixes in SvelteKitpermalink
adapter-netlify got a fix sveltejs/kit#1467 and new documentation in the readme https://github.com/sveltejs/kit/tree/master/packages/adapter-netlify
The router will no longer intercept navigation for URLs that the app does not own. This fixes a crash for apps that have <a> elements on the page with the same origin but don't share a base path with the app.
Hash only changes are now handled by the router fixing the browser's "back" navigation between hash changes in some circumstances.
New in Svelte & Language Toolspermalink
Svelte 3.38.1 and 3.38.2 fixed an issue with hydration that was causing duplicate elements. If you're seeing this in your project, be sure to update the latest version!
A new TypeScript plugin provides deeper integration with Svelte files within JavaScript or TypeScript files. This includes diagnostics, references and renaming of variables. It comes packaged with the VS Code extension but is turned off by default for now. You can enable it through this setting. We encourage you to test it out and provide feedback
In the latest version of svelte-check you can now provide the path to your tsconfig.json or jsconfig.json. Example: svelte-check --tsconfig "./tsconfig.json". This ensures the diagnostics are only run on files that are referenced in that config. It also runs diagnostics on JavaScript and/or TypeScript files which removes the need to run another check (like tsc --noEmit) for non-Svelte files (svelte-check version 1.6.0)
The VS Code extension and svelte-check got a new major release. Previously, properties that had no initializer (export let foo;) were only required if the user was using both TypeScript and activated strict mode. This is changed now: People using TypeScript, and those using checkJs also in JavaScript files, will now always have these properties marked as required (svelte-check version 2.0.0, extension version 105.0.0)
Community ShowcasepermalinkApps & Sites
vidu is a minimal web analytics collector and dashboard
River Runner is a virtual way to follow rivers downstream - built with Mapbox and Svelte.
JSDoc Type Generator generates JSDoc types for valid JSON.
pagereview.io is a website feedback tool that lets you leave comments directly on the site being reviewed.
gamesroom.io is an online board game platform with video chat built-in.
Greedy Goblin is a recipe app for old-school Runescape players.
hashbrown.geopjr.dev is a GNOME-shell inspired webpage to learn about, explore the source code and download the Hashbrown GTK app (link to source).
Libraries, Tools & Components
svelte-image-crop is a simple click'n'drag image cropping library using Web APIs.
svelte-datepicker is a lightweight and inclusive date picker build with Svelte.
svelte-regex-router is a simple, lightweight library for you to easily handle routes in your Svelte application.
Svelte Micro is a light & reactive one-component router for Svelte.
svelte-entity-store is to provide a simple, generic solution for storing collections of entity objects.
svelte-animation-store is a store that is based on Svelte's tweened store, that lets you pause, continue, reset, replay, reverse or adjust speed of a tween.
Want to contribute a component? Submit a Component to the Svelte Society site by making a PR to this file.
See you next month!permalinkDid we miss something? Join us on Svelte Society, Reddit and Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Each blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Derived stores • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores REPL  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Spread props • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
404
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: December 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: December 2023 Svelte 5 preview announced at Svelte Summit Fall 2023  Dani Sandoval Dec 1 2023 On this page   On this page  Svelte Summit Fall 2023 was epic! Featuring talks from across the ecosystem and the launches from the core team of new Svelte Dev Tools, image optimization, and a preview version of Svelte 5.0! The whole talk can be found here (timestamps below):
0:00 Hype music!
18:20 Exploring Svelte DevTools - Ignatius B (4 minutes)
25:27 How does SvelteKit fare as a SPA Framework - Henry Lie (25 minutes)
53:00 enhanced:img - Ben McCann (6 minutes)
1:03:44 inlang-paraglide JS for SvelteKit i18n - Samuel Stroschein (10 minutes)
1:17:32 How Svelte & GraphQL plays well together - Jean-Yves Couet (31 minutes)
1:53:10 svelte-ecosystem-ci - Dominik G (10 minutes)
2:23:06 Svelte for Creative Development - Steven Stavrakis (10 minutes)
2:35:33 Translating the docs - Romain I'Ourson (11 minutes)
2:49:48 ENHANCE! - Paolo Ricciuti (25 minutes)
3:18:25 Accessibility tips with Svelte solutions - Enrico Sacchetti (25 minutes)
3:49:11 svelte@next - Rich Harris (18 minutes)
Today is also the first day of Advent of Svelte: A Svelte challenge for each day of December. Join the festivities and participate in a daily frontend challenge using Svelte!
Now let's dive into the updates...
What's new in Svelte (5.0 Preview!)permalinkSvelte 5 preview is now available at svelte@next while Svelte 4's current version (@latest) is 4.2.7. All the changes below are from the preview's branch:
TypeScript is now supported natively via acorn-typescript (5.0.0-next.9, #9482)
The new $effect.active rune returns a boolean to indicate if an effect is active. This lets you set up subscriptions when a value is read (in an effect, or in the template) but also read values without creating subscriptions (5.0.0-next.10, Docs, #9591)
The new $effect.root rune creates a non-tracked scope that doesn't auto-cleanup. This is useful for nested effects that you want to manually control (5.0.0-next.14, Docs, #9638)
For all the release notes going forward, check out the CHANGELOG on main. For the highlights, take a look below!
What's new in SvelteKitpermalink
Creating a new SvelteKit project will now ask if you want to try the Svelte 5 beta (#11026)
Prettier 3 and prettier-plugin-svelte 3 are now the default versions when creating new SvelteKit projects (#10410)
nodejs20.x is now supported via the Vercel adapter (#11067)
@sveltejs/enhanced-img makes serving different sizes of images easy, thanks to pre-processing (Docs, #10788)
For a complete list of bug fixes and performance updates, check out the SvelteKit CHANGELOG. You can also find adapter-specific CHANGELOGs in each of the adapter directories.
What's new in Language Toolspermalink
The latest version of language tools adds best-effort fallback typings to $props() rune (extensions-108.1.0)
Language tools better supports the @render tag by using the Snippet type (extensions-108.0.0)
The Svelte ESLint plugin has been updated to support the Svelte 5 preview (v2.36.0-next.2)
Community ShowcasepermalinkApps & Sites built with Svelte
MobileView is a Chrome Extension for real-time, cross-device website simulation
ClassroomIO is an Open Source Platform for Tech Bootcamps
sshx is a secure web-based, collaborative terminal
ToneShift lets you clone any voice, create music, and join a community of voices
CanvasGPT is Autonomous Mind Maps. Powered by AI
Wordplay is a new educational, accessible, and language-inclusive programming language for creating playful, interactive typography (Blog Post)
CodeFlow is a roadmap for programmers to learn, think and code better
Teller is a comprehensive Minecraft backup solution designed to facilitate both local backups and interfacing with the ChunkVault Backend
Sudoku is a board created with SvelteKit, Typescript and Tailwind
Learning Resources
Featuring Svelte Contributors and Ambassadors
View Transitions in SvelteKit and beyond with Geoff Rich and Melting UIs with Thomas G. Lopes by Svelte Radio
Making The Best Svelte SVG Animation Library, How To Publish Your JavaScript Code To Npm With SvelteKit, and What's New In Svelte 5? (Runes, Events, Snippets) by Joy of Code
Svelte Society Talks
Svelte Society - San Diego November 2023
Building a SvelteKit Adapter for WinterJS with Willow and Kev
This Week in Svelte:
2023 October 27 - SvelteKit 1.27.1, the pillars of a component library
2023 November 3 - SvelteKit 1.27.2, choosing a database, preprocessors
2023 November 10 - SvelteKit 1.27.4, Svelte 4.2.3, closing modals
2023 Nov 17 - SvelteKit 1.27.6, Svelte 4.2.5, new Svelte 5 features!
2023 Nov 24 - Svelte 4.2.7, TypeScript in markup, websockets in SvelteKit
To Watch/Hear
Why Stack Overflow is embracing Svelte by The Stack Overflow Podcast
Building a Twitter Clone with Svelte, SvelteKit, ,Firebase, Tailwind Css, Shad-cn Svelte etc by Lawal Adebola
SvelteKit Crash Course: Build a Full Website in 90 min! - 2023 Tutorial by Prismic
To Read
Hands-On Experience: How to Build an eCommerce Store with SvelteKit? by Bård Farstad
Productive Dark Mode with SvelteKit, PostCSS, and TailwindCSS (Behind the Screen) by Quang Phan
Setting up OAuth with Auth.js in a SvelteKit Project by Andrey Mikhaylov
SvelteKit 🤝 Storybook by Paolo Ricciuti
Integrate Storybook in Svelte: Doing it the Svelte-way by Óscar Domínguez Celada
Drizzle ORM with Sveltekit and Sveltekit — Streaming SSR by Mohammed Anas
Svelte & WordPress Full Stack Course by Artneo Web Design on udemy
Add a loading indicator to a Form Action in SvelteKit by Useful Snippets (Stanislav Khromov)
Libraries, Tools & Components
sveltekit-view-transition provides a simplified view-transition-api for Sveltekit
T18S aims to provide the best internationalization experience for SvelteKit, delivering typesafety, performance, and ease of use
Svelte Flow is a customizable Svelte component for building node-based editors and interactive diagrams
Super Sitemap is a SvelteKit sitemap focused on ease of use and making it impossible to forget to add your paths
Svelte UX is a Tailwind-based component library to simplify creating highly interactive and visual applications
CanIKit provides a simple way to add authorization to your SvelteKit application
Svelte Toggles manages light & dark mode interactions and preference storage
Baselime now supports SvelteKit for the edge-logger package
That's it for this month! Feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
svelte/action • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/action   Edit this page on GitHub On this page   On this page  Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called immediately after Svelte has applied updates to the markup whenever that parameter changes.
Don't worry that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
/** @type {string} */
export let bar;
/** @type {import('svelte/action').Action<HTMLElement, string>}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />AttributespermalinkSometimes actions emit custom events and apply custom attributes to the element they are applied to. To support this, actions typed with Action or ActionReturn type can have a last parameter, Attributes:
<script>
/**
* @type {import('svelte/action').Action<HTMLDivElement, { prop: any }, { 'on:emit': (e: CustomEvent<string>) => void }>}
*/
function foo(node, { prop }) {
// the node has been mounted in the DOM
//...LOGIC
node.dispatchEvent(new CustomEvent('emit', { detail: 'hello' }));
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div on:emit={handleEmit} use:foo={{ prop: 'someValue' }} />TypespermalinkActionpermalinkActions are functions that are called when an element is created.
You can use this interface to type such actions.
The following example defines an action that only works on <div> elements
and optionally accepts a parameter which it has a default value for:
tsexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {  // ...}Action<HTMLDivElement> and Action<HTMLDivElement, undefined> both signal that the action accepts no parameters.
You can return an object with methods update and destroy from the function and type which additional attributes and events it has.
See interface ActionReturn for more details.
Docs: https://svelte.dev/docs/svelte-action
tsinterface Action<	Element = HTMLElement,	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
ts<Node extends Element>(	...args: undefined extends Parameter		? [node: Node, parameter?: Parameter]		: [node: Node, parameter: Parameter]): void | ActionReturn<Parameter, Attributes>;
ActionReturnpermalinkActions can return an object containing the two properties defined in this interface. Both are optional.
update: An action can have a parameter. This method will be called whenever that parameter changes,
immediately after Svelte has applied updates to the markup. ActionReturn and ActionReturn<undefined> both
mean that the action accepts no parameters.
destroy: Method that is called after the element is unmounted
Additionally, you can specify which additional attributes and events the action enables on the applied element.
This applies to TypeScript typings only and has no effect at runtime.
Example usage:
tsinterface Attributes {	newprop?: string;	'on:event': (e: CustomEvent<boolean>) => void;}
export function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {	// ...	return {		update: (updatedParameter) => {...},		destroy: () => {...}	};}Docs: https://svelte.dev/docs/svelte-action
tsinterface ActionReturn<	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
tsupdate?: (parameter: Parameter) => void;
tsdestroy?: () => void;
previous svelte/easing next svelte/compiler
Dimensions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Component events • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events REPL  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Slot props • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props REPL  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
What's new in Svelte: January 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: January 2021 A Svelte-packed showcase to kick-off the new year!  Dani Sandoval Jan 1 2021 On this page   On this page  Happy new year from Svelte! In the last month we made progress on Sapper's upcoming release, fine-tuned our SvelteComponent typings, and have seen some amazing apps, sites, and libraries coming out in the showcase.
What's changed in Svelte?permalinkA new minor release replaces the SvelteComponent class with a SvelteComponentTyped class. This renaming should help with backwards compatibility. We've updated last month's blog post to avoid any confusion with the name change.
If you're using SvelteComponent or the new SvelteComponentTyped in your project or library, let us know what you're using it for and we'll add it to the showcase!
What's going on in Sapper?permalinkMore quality of life features are landing in the upcoming release every day. 0.29.0 will include new TypeScript definitions, fixes to scroll tracking and prefetching behavior, and improvements to the runtime router to support encoded query parameters.
If you're upgrading from 0.28.x, check out the migration guide for steps on updating to Sapper 0.29.
Is SvelteKit ready yet?permalinkTo avoid too much churn during development, SvelteKit is still being worked on in a private repo. There will be an announcement on the Discord, blog and Twitter when it's ready for a larger group of users and contributors.
In the meantime, you can explore the current build by running npm init svelte@next from your command line.
As cautioned in What's the deal with SvelteKit?, there are no docs or support available yet... So use at your own risk / for your own enjoyment!
Community ShowcasepermalinkApps & Sites
manitu.me is a background sound / pomodoro timer for focus and relaxation
Answer Socrates helps you find trending questions on the internet so that you can write the most relevant blog post, tweet, or billboard
multris is a multiplayer Tetris game. You can read about its development here
weather-ab compares the archive of weather in different cities of the world. Indispensable for people thinking about migration
Game Nibs is a platform for gamers to find and share concise bite-sized bits of gaming advice, tips, tricks, screenshots, builds, and much more
Ora is an open source website tracking and limiting tool for Chrome and Firefox
vscode-dms is a group direct messaging chat app for VSCode
Zero.2 is a math-based challenge game where you try to get to zero as quickly as possible
Octave Compass is a chord table and scale explorer for many popular musical scales
Infinite Walking Bass Generator 2 is an online music player that generates a unique walking bass line
ListenAddict is a site that notifies you whenever a person has a new talk/interview on podcast
Demos, Libraries & Components
svelte-tiny-virtual-list speeds up long lists by only rendering visible items
svelte-query is a collection of helpful hooks for managing, caching and syncing asynchronous and remote data
svelte-previous is a svelte store to remember previous values - helpful for transitions or a quick undo stack
Let's Build a Confetti Cannon explains how to build a particle system and integrate a Canvas based animation into a larger application
svelte-micro is a one-component router
svelte-standalone-router is a standalone router with an API based on standalone-router
svelte-datepicker is a datepicker component with variations for time selection, date ranges and responsive themes
svelte-slimscroll is a action for Svelte.js, which can transforms any div into a scrollable area with a nice scrollbar.
Svelte Zoomable is a custom transition with a nice zoom effect
Have a component you'd like to share? Check out the Components page on the Svelte Society site. You can contribute by making a PR to this file.
Learning Resources
Using Svelte to create a scroll video effect showcases how the bind command can be used to create a cool scroll video effect with very little code
How to make a flappybird game in svelte and typescript is a video tutorial including docs and code for reference
Accessible Svelte Transition walks through prefers-reduced-motion to make svelte transitions more accessible
Svelte's module scripts explained is a great introduction to the module context, a common Sapper pattern
Awesome Svelte is a curated list of Svelte resources
.NET Core and Svelte explains how to get Svelte up and running with .NET Core
A la découverte de Svelte JS is a svelte tutorial series in French!
Svelte for React Developers explains Svelte's core concepts to folks who are used to React
Building a Svelte Static Website with Smooth Page Transitions shows how to build a static website with Svelte and add smooth page transitions using Three.js and GSAP.
Using Apollo Client in Sapper explains the "simplest" solutions to integrate the Apollo query client into Sapper
Reactive web apps with Crystal + Svelte explores how to build full-stack, server-rendered Svelte apps with a Crystal backend
Related Projects
Snowpack's v3 release candidate is out now in preparation for a January 6 release date. Check out the Getting Started with Svelte for more info on how to use Snowpack.
Uppy, the open source file uploader, announced Svelte support in its new version 1.24
See you next month!permalinkWant to add your work to the Showcase? Want to contribute to Svelte? Check out the Svelte Society, Reddit and Discord to get involved!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte bloghttps://svelte.dev/blogNews and information about the magical disappearing UI frameworkhttps://svelte.dev/favicon.pngSveltehttps://svelte.dev/blogWhat's new in Svelte: December 2023https://svelte.dev/blog/whats-new-in-svelte-december-2023Svelte 5 preview announced at Svelte Summit Fall 202301 Dec 2023 12:00 +0000What's new in Svelte: November 2023https://svelte.dev/blog/whats-new-in-svelte-november-2023Svelte Summit on Nov 11 and better DevEx for all!01 Nov 2023 12:00 +0000What's new in Svelte: October 2023https://svelte.dev/blog/whats-new-in-svelte-october-2023Reactions to Runes and SvelteKit +server fallbacks01 Oct 2023 12:00 +0000Hacktoberfest 2023 with SvelteKithttps://svelte.dev/blog/hacktoberfestSvelteKit joins in the Hacktoberfest event in 202301 Oct 2023 12:00 +0000Introducing runeshttps://svelte.dev/blog/runesRethinking 'rethinking reactivity'20 Sep 2023 12:00 +0000What's new in Svelte: September 2023https://svelte.dev/blog/whats-new-in-svelte-september-2023New parameters in SvelteKit's redirect and an onNavigate lifecycle function come to life01 Sep 2023 12:00 +0000Unlocking view transitions in SvelteKit 1.24https://svelte.dev/blog/view-transitionsStreamlined page transitions with onNavigate31 Aug 2023 12:00 +0000What's new in Svelte: August 2023https://svelte.dev/blog/whats-new-in-svelte-august-2023Extending Custom Element Classes and new +server exports01 Aug 2023 12:00 +0000What's new in Svelte: July 2023https://svelte.dev/blog/whats-new-in-svelte-july-2023Svelte 4.0, new website and a tour around the community01 Jul 2023 12:00 +0000svelte.dev: A complete overhaulhttps://svelte.dev/blog/svelte-dev-overhaulThe new site comes with accessibility fixes, new features and bottom navbar29 Jun 2023 12:00 +0000Announcing Svelte 4https://svelte.dev/blog/svelte-4Updated performance, developer experience, and site22 Jun 2023 12:00 +0000What's new in Svelte: June 2023https://svelte.dev/blog/whats-new-in-svelte-june-2023SvelteHack winners, lots of new bindings, Svelte 4.0.0-next.0, and a bunch of new features in SvelteKit01 Jun 2023 12:00 +0000What's new in Svelte: May 2023https://svelte.dev/blog/whats-new-in-svelte-may-2023New Ambassadors, a new ESLint plugin and a whole bunch of SvelteHack submissions01 May 2023 12:00 +0000What's new in Svelte: April 2023https://svelte.dev/blog/whats-new-in-svelte-april-2023Loads of new Svelte compiler features, plus Svelte Summit and SvelteHack01 Apr 2023 12:00 +0000Zero-effort type safetyhttps://svelte.dev/blog/zero-config-type-safetyMore convenience and correctness, less boilerplate09 Mar 2023 12:00 +0000What's new in Svelte: March 2023https://svelte.dev/blog/whats-new-in-svelte-march-2023SvelteHack, post-1.0 SvelteKit improvements and a huge showcase01 Mar 2023 12:00 +0000Streaming, snapshots, and other new features since SvelteKit 1.0https://svelte.dev/blog/streaming-snapshots-sveltekitExciting improvements in the latest version of SvelteKit21 Feb 2023 12:00 +0000What's new in Svelte: February 2023https://svelte.dev/blog/whats-new-in-svelte-february-2023Minor versions and major satisfaction01 Feb 2023 12:00 +0000What's new in Svelte: January 2023https://svelte.dev/blog/whats-new-in-svelte-january-2023SvelteKit 1.0, learn.svelte.dev, and type definitions for Svelte elements.01 Jan 2023 12:00 +0000Announcing SvelteKit 1.0https://svelte.dev/blog/announcing-sveltekit-1.0Web development, streamlined14 Dec 2022 12:00 +0000What's new in Svelte: December 2022https://svelte.dev/blog/whats-new-in-svelte-december-2022Rounding the corner to SvelteKit 1.001 Dec 2022 12:00 +0000What's new in Svelte: November 2022https://svelte.dev/blog/whats-new-in-svelte-november-2022Better forms, routes and inline styles across SvelteKit and Svelte01 Nov 2022 12:00 +0000What's new in Svelte: October 2022https://svelte.dev/blog/whats-new-in-svelte-october-2022Svelte Summit, `use:enhance`, and a SvelteKit Release Candidate!01 Oct 2022 12:00 +0000What's new in Svelte: September 2022https://svelte.dev/blog/whats-new-in-svelte-september-2022Migrating to SvelteKit's new filesystem-based router01 Sep 2022 12:00 +0000What's new in Svelte: August 2022https://svelte.dev/blog/whats-new-in-svelte-august-2022Changes to SvelteKit's `load` before 1.0 plus support for Vite 3 and `vite.config.js`!01 Aug 2022 12:00 +0000What's new in Svelte: July 2022https://svelte.dev/blog/whats-new-in-svelte-july-2022Faster SSR, language tools improvements and a new paid contributor!01 Jul 2022 12:00 +0000What's new in Svelte: June 2022https://svelte.dev/blog/whats-new-in-svelte-june-2022Cancellable dispatched events, deeper {@const} declarations and more!01 Jun 2022 12:00 +0000What's new in Svelte: May 2022https://svelte.dev/blog/whats-new-in-svelte-may-2022Dynamically switch between HTML element types with `<svelte:element>`01 May 2022 12:00 +0000What's new in Svelte: April 2022https://svelte.dev/blog/whats-new-in-svelte-april-2022Goodbye fallthrough routes, hello param validators!01 Apr 2022 12:00 +0000What's new in Svelte: March 2022https://svelte.dev/blog/whats-new-in-svelte-march-2022Svelte Summit Spring is coming... and page endpoints are here!01 Mar 2022 12:00 +0000What's new in Svelte: February 2022https://svelte.dev/blog/whats-new-in-svelte-february-2022Rapid-fire releases across Svelte, SvelteKit and the community01 Feb 2022 12:00 +0000Accelerating Svelte's Developmenthttps://svelte.dev/blog/accelerating-sveltes-developmentScaling the team, building partnerships, and growing the community13 Jan 2022 12:00 +0000What's new in Svelte: January 2022https://svelte.dev/blog/whats-new-in-svelte-january-2022Faster builds with SvelteKit and a much anticipated REPL feature01 Jan 2022 12:00 +0000What's new in Svelte: December 2021https://svelte.dev/blog/whats-new-in-svelte-december-2021Svelte Summit Fall 2021 Recap, Rich Harris joins Vercel, and Kevin goes full-time on Svelte Society01 Dec 2021 12:00 +0000What's new in Svelte: November 2021https://svelte.dev/blog/whats-new-in-svelte-november-2021Over 5000 stars to light up the showcase01 Nov 2021 12:00 +0000What's new in Svelte: October 2021https://svelte.dev/blog/whats-new-in-svelte-october-2021A whole year of "What's new in Svelte01 Oct 2021 12:00 +0000What's new in Svelte: September 2021https://svelte.dev/blog/whats-new-in-svelte-september-2021StackOverflow's most loved web framework01 Sep 2021 12:00 +0000What's new in Svelte: August 2021https://svelte.dev/blog/whats-new-in-svelte-august-2021Shadow DOM, export and await - oh my!01 Aug 2021 12:00 +0000What's new in Svelte: July 2021https://svelte.dev/blog/whats-new-in-svelte-july-2021Keeping cool with fixes, TypeScript tooling and tonnes of new features01 Jul 2021 12:00 +0000What's new in Svelte: June 2021https://svelte.dev/blog/whats-new-in-svelte-june-2021Progress towards SvelteKit 1.0 and tighter TypeScript/Svelte integrations in language tools01 Jun 2021 12:00 +0000What's new in Svelte: May 2021https://svelte.dev/blog/whats-new-in-svelte-may-2021Working toward SvelteKit 1.0 and a showcase full of SvelteKit sites!01 May 2021 12:00 +0000What's new in Svelte: April 2021https://svelte.dev/blog/whats-new-in-svelte-april-2021SvelteKit beta and new way to use slots01 Apr 2021 12:00 +0000SvelteKit is in public betahttps://svelte.dev/blog/sveltekit-betaAnd we'd love to have your feedback23 Mar 2021 12:00 +0000What's new in Svelte: March 2021https://svelte.dev/blog/whats-new-in-svelte-march-2021Call for Svelte Summit Speakers! Improved SSR, non-HTML5 compilation targets, and ESLint TypeScript support01 Mar 2021 12:00 +0000What's new in Svelte: February 2021https://svelte.dev/blog/whats-new-in-svelte-february-2021Integrations and improvements at lightning speed...01 Feb 2021 12:00 +0000What's new in Svelte: January 2021https://svelte.dev/blog/whats-new-in-svelte-january-2021A Svelte-packed showcase to kick-off the new year!01 Jan 2021 12:00 +0000What's new in Svelte: December 2020https://svelte.dev/blog/whats-new-in-svelte-december-2020Better tooling, export maps and improvements to slots and context01 Dec 2020 12:00 +0000What's the deal with SvelteKit?https://svelte.dev/blog/whats-the-deal-with-sveltekitWe're rethinking how to build Svelte apps. Here's what you need to know05 Nov 2020 12:00 +0000What's new in Svelte: November 2020https://svelte.dev/blog/whats-new-in-svelte-november-2020Slot forwarding fixes, SvelteKit for faster local development, and more from Svelte Summit01 Nov 2020 12:00 +0000What's new in Svelte: October 2020https://svelte.dev/blog/whats-new-in-svelte-october-2020New object methods, in-depth learning resources and tons of integration examples!01 Oct 2020 12:00 +0000Svelte <3 TypeScripthttps://svelte.dev/blog/svelte-and-typescriptTypernetically enhanced web apps17 Jul 2020 12:00 +0000Svelte 3: Rethinking reactivityhttps://svelte.dev/blog/svelte-3-rethinking-reactivityIt's finally here22 Apr 2019 12:00 +0000Write less codehttps://svelte.dev/blog/write-less-codeThe most important metric you're not paying attention to20 Apr 2019 12:00 +0000Svelte for new developershttps://svelte.dev/blog/svelte-for-new-developersNever used Node.js or the command line? No problem16 Apr 2019 12:00 +0000Svelte on The Changeloghttps://svelte.dev/blog/svelte-on-the-changelogListen to the interview here31 Jan 2019 12:00 +0000Virtual DOM is pure overheadhttps://svelte.dev/blog/virtual-dom-is-pure-overheadLet's retire the 'virtual DOM is fast' myth once and for all27 Dec 2018 12:00 +0000Using CSS-in-JS with Sveltehttps://svelte.dev/blog/svelte-css-in-jsYou don't need to, but you can26 Dec 2018 12:00 +0000Svelte v2 is out!https://svelte.dev/blog/version-2Here's what you need to know18 Apr 2018 12:00 +0000Sapper: Towards the ideal web app frameworkhttps://svelte.dev/blog/sapper-towards-the-ideal-web-app-frameworkTaking the next-plus-one step31 Dec 2017 12:00 +0000The zen of Just Writing CSShttps://svelte.dev/blog/the-zen-of-just-writing-cssI would say this is the future, but we're already doing it.06 Sep 2017 12:00 +0000The easiest way to get started with Sveltehttps://svelte.dev/blog/the-easiest-way-to-get-startedThis'll only take a minute.07 Aug 2017 12:00 +0000Frameworks without the framework: why didn't we think of this sooner?https://svelte.dev/blog/frameworks-without-the-frameworkYou can't write serious applications in vanilla JavaScript without hitting a complexity wall. But a compiler can do it for you.26 Nov 2016 12:00 +0000
Flight booker • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Context Menu • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
CRUD • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD REPL  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Transition events • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events REPL  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Adding parameters • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
svelte • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte   Edit this page on GitHub On this page   On this page  The svelte package exposes lifecycle functions and the context API.
onMountpermalink
tsfunction onMount<T>(	fn: () =>		| NotFunction<T>		| Promise<NotFunction<T>>		| (() => any)): void;
The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).
onMount does not run inside a server-side component.
<script>
import { onMount } from 'svelte';
onMount(() => {
console.log('the component has mounted');
});
</script>If a function is returned from onMount, it will be called when the component is unmounted.
<script>
import { onMount } from 'svelte';
onMount(() => {
const interval = setInterval(() => {
console.log('beep');
}, 1000);
return () => clearInterval(interval);
});
</script>
This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.
beforeUpdatepermalink
tsfunction beforeUpdate(fn: () => any): void;
Schedules a callback to run immediately before the component is updated after any state change.
The first time the callback runs will be before the initial onMount
<script>
import { beforeUpdate } from 'svelte';
beforeUpdate(() => {
console.log('the component is about to update');
});
</script>afterUpdatepermalink
tsfunction afterUpdate(fn: () => any): void;
Schedules a callback to run immediately after the component has been updated.
The first time the callback runs will be after the initial onMount
<script>
import { afterUpdate } from 'svelte';
afterUpdate(() => {
console.log('the component just updated');
});
</script>onDestroypermalink
tsfunction onDestroy(fn: () => any): void;
Schedules a callback to run immediately before the component is unmounted.
Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.
<script>
import { onDestroy } from 'svelte';
onDestroy(() => {
console.log('the component is being destroyed');
});
</script>tickpermalink
tsfunction tick(): Promise<void>;
Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.
<script>
import { beforeUpdate, tick } from 'svelte';
beforeUpdate(async () => {
console.log('the component is about to update');
await tick();
console.log('the component just updated');
});
</script>setContextpermalink
tsfunction setContext<T>(key: any, context: T): T;
Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.
Like lifecycle functions, this must be called during component initialisation.
<script>
import { setContext } from 'svelte';
setContext('answer', 42);
</script>
Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.
getContextpermalink
tsfunction getContext<T>(key: any): T;
Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.
<script>
import { getContext } from 'svelte';
const answer = getContext('answer');
</script>hasContextpermalink
tsfunction hasContext(key: any): boolean;
Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation.
<script>
import { hasContext } from 'svelte';
if (hasContext('answer')) {
// do something
}
</script>getAllContextspermalink
tsfunction getAllContexts<	T extends Map<any, any> = Map<any, any>>(): T;
Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.
<script>
import { getAllContexts } from 'svelte';
const contexts = getAllContexts();
</script>createEventDispatcherpermalink
tsfunction createEventDispatcher<	EventMap extends Record<string, any> = any>(): EventDispatcher<EventMap>;
Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.
Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.
<script>
function callbackFunction(event) {
console.log(`Notify fired! Detail: ${event.detail}`);
}
</script>
<Child on:notify={callbackFunction} />Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
function notify() {
const shouldContinue = dispatch('notify', 'detail value', { cancelable: true });
if (shouldContinue) {
// no one called preventDefault
} else {
// a listener called preventDefault
}
}
</script>You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.
TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Special elements next svelte/store
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Special tags • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Special tags   Edit this page on GitHub On this page   On this page  {@html ...}permalink{@html expression}In a text expression, characters like < and > are escaped; however, with HTML expressions, they're not.
The expression should be valid standalone HTML — {@html "<div>"}content{@html "</div>"} will not work, because </div> is not valid HTML. It also will not compile Svelte code.
Svelte does not sanitize expressions before injecting HTML. If the data comes from an untrusted source, you must sanitize it, or you are exposing your users to an XSS vulnerability.
<div class="blog-post">
<h1>{post.title}</h1>
{@html post.content}
</div>{@debug ...}permalink{@debug}{@debug var1, var2, ..., varN}The {@debug ...} tag offers an alternative to console.log(...). It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.
<script>
let user = {
firstname: 'Ada',
lastname: 'Lovelace'
};
</script>
{@debug user}
<h1>Hello {user.firstname}!</h1>{@debug ...} accepts a comma-separated list of variable names (not arbitrary expressions).
<!-- Compiles -->
{@debug user}
{@debug user1, user2, user3}
<!-- WON'T compile -->
{@debug user.firstname}
{@debug myArray[0]}
{@debug !isReady}
{@debug typeof user === 'object'}The {@debug} tag without any arguments will insert a debugger statement that gets triggered when any state changes, as opposed to the specified variables.
{@const ...}permalink{@const assignment}The {@const ...} tag defines a local constant.
<script>
export let boxes;
</script>
{#each boxes as box}
{@const area = box.width * box.height}
{box.width} * {box.height} = {area}
{/each}{@const} is only allowed as direct child of {#if}, {:else if}, {:else}, {#each}, {:then}, {:catch}, <Component /> or <svelte:fragment />.
previous Logic blocks next Element directives
svelte:element (https://github.com/sveltejs/svelte/issues/7443) • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/register • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Legacy svelte/register   Edit this page on GitHub On this page   On this page
This API is removed in Svelte 4. require hooks are deprecated and current Node versions understand ESM. Use a bundler like Vite or our full-stack framework SvelteKit instead to create JavaScript modules from Svelte components.
To render Svelte components in Node.js without bundling, use require('svelte/register'). After that, you can use require to include any .svelte file.
tsrequire('svelte/register');
const App = require('./App.svelte').default;
// ...
const { html, css, head } = App.render({ answer: 42 });
The .default is necessary because we're converting from native JavaScript modules to the CommonJS modules recognised by Node. Note that if your component imports JavaScript modules, they will fail to load in Node and you will need to use a bundler instead.
To set compile options, or to use a custom file extension, call the register hook as a function:
tsrequire('svelte/register')({	extensions: ['.customextension'], // defaults to ['.html', '.svelte']	preserveComments: true}); previous Svelte 4 migration guide next
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
bind:this={canvas} • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas} REPL  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Server-side component API • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API Server-side component API   Edit this page on GitHub On this page   On this page  tsconst result = Component.render(...)Unlike client-side components, server-side components don't have a lifespan after you render them — their whole job is to create some HTML and CSS. For that reason, the API is somewhat different.
A server-side component exposes a render method that can be called with optional props. It returns an object with head, html, and css properties, where head contains the contents of any <svelte:head> elements encountered.
You can import a Svelte component directly into Node using svelte/register.
tsrequire('svelte/register');
const App = require('./App.svelte').default;
const { head, html, css } = App.render({	answer: 42});The .render() method accepts the following parameters:
parameter
default
description
props
{}
An object of properties to supply to the component
options
{}
An object of options
The options object takes in the following options:
option
default
description
context
new Map()
A Map of root-level context key-value pairs to supply to the component
tsconst { head, html, css } = App.render(	// props	{ answer: 42 },	// options	{		context: new Map([['context-key', 'context-value']])	}); previous Client-side component API next Custom elements API
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Component bindings • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Slots • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots REPL  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Keyed each blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks REPL  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte components • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Svelte components   Edit this page on GitHub On this page   On this page  Components are the building blocks of Svelte applications. They are written into .svelte files, using a superset of HTML.
All three sections — script, styles and markup — are optional.
<script>
// logic goes here
</script>
<!-- markup (zero or more items) goes here -->
<style>
/* styles go here */
</style><script>permalinkA <script> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules:
1. export creates a component proppermalinkSvelte uses the export keyword to mark a variable declaration as a property or prop, which means it becomes accessible to consumers of the component (see the section on attributes and props for more information).
<script>
export let foo;
// Values that are passed in as props
// are immediately available
console.log({ foo });
</script>You can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is undefined) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to undefined (rather than its initial value).
In development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined.
<script>
export let bar = 'optional default initial value';
export let baz = undefined;
</script>If you export a const, class or function, it is readonly from outside the component. Functions are valid prop values, however, as shown below.
App.svelte<script>
// these are readonly
export const thisIs = 'readonly';
/** @param {string} name */
export function greet(name) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>App.svelte<script lang="ts">
// these are readonly
export const thisIs = 'readonly';
export function greet(name: string) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>Readonly props can be accessed as properties on the element, tied to the component using bind:this syntax.
You can use reserved words as prop names.
App.svelte<script>
/** @type {string} */
let className;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>App.svelte<script lang="ts">
let className: string;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>2. Assignments are 'reactive'permalinkTo change component state and trigger a re-render, just assign to a locally declared variable.
Update expressions (count += 1) and property assignments (obj.x = y) have the same effect.
<script>
let count = 0;
function handleClick() {
// calling this function will trigger an
// update if the markup references `count`
count = count + 1;
}
</script>Because Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the tutorial.
<script>
let arr = [0, 1];
function handleClick() {
// this method call does not trigger an update
arr.push(2);
// this assignment will trigger an update
// if the markup references `arr`
arr = arr;
}
</script>Svelte's <script> blocks are run only when the component is created, so assignments within a <script> block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section.
<script>
export let person;
// this will only set `name` on component creation
// it will not update when `person` does
let { name } = person;
</script>3. $: marks a statement as reactivepermalinkAny top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the $: JS label syntax. Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed.
<script>
export let title;
export let person;
// this will update `document.title` whenever
// the `title` prop changes
$: document.title = title;
$: {
console.log(`multiple statements can be combined`);
console.log(`the current title is ${title}`);
}
// this will update `name` when 'person' changes
$: ({ name } = person);
// don't do this. it will run before the previous line
let name2 = name;
</script>Only values which directly appear within the $: block will become dependencies of the reactive statement. For example, in the code below total will only update when x changes, but not y.
App.svelte<script>
let x = 0;
let y = 0;
/** @param {number} value */
function yPlusAValue(value) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>App.svelte<script lang="ts">
let x = 0;
let y = 0;
function yPlusAValue(value: number) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>It is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that yDependent will not be updated when x is updated in the following example:
<script>
let x = 0;
let y = 0;
/** @param {number} value */
function setY(value) {
y = value;
}
$: yDependent = y;
$: setY(x);
</script>Moving the line $: yDependent = y below $: setY(x) will cause yDependent to be updated when x is updated.
If a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a let declaration on your behalf.
App.svelte<script>
/** @type {number} */
export let num;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>App.svelte<script lang="ts">
export let num: number;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>4. Prefix stores with $ to access their valuespermalinkA store is an object that allows reactive access to a value via a simple store contract. The svelte/store module contains minimal store implementations which fulfil this contract.
Any time you have a reference to a store, you can access its value inside a component by prefixing it with the $ character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate.
Assignments to $-prefixed variables require that the variable be a writable store, and will result in a call to the store's .set method.
Note that the store must be declared at the top level of the component — not inside an if block or a function, for example.
Local variables (that do not represent store values) must not have a $ prefix.
<script>
import { writable } from 'svelte/store';
const count = writable(0);
console.log($count); // logs 0
count.set(1);
console.log($count); // logs 1
$count = 2;
console.log($count); // logs 2
</script>Store contractpermalinktsstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }You can create your own stores without relying on svelte/store, by implementing the store contract:
A store must contain a .subscribe method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling .subscribe. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.
The .subscribe method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.
A store may optionally contain a .set method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a writable store.
For interoperability with RxJS Observables, the .subscribe method is also allowed to return an object with an .unsubscribe method, rather than return the unsubscription function directly. Note however that unless .subscribe synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as undefined until it does.
<script context="module">permalinkA <script> tag with a context="module" attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <script> (and the component markup) but not vice versa.
You can export bindings from this block, and they will become exports of the compiled module.
You cannot export default, since the default export is the component itself.
Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a store.
<script context="module">
let totalComponents = 0;
// the export keyword allows this function to imported with e.g.
// `import Example, { alertTotal } from './Example.svelte'`
export function alertTotal() {
alert(totalComponents);
}
</script>
<script>
totalComponents += 1;
console.log(`total number of times this component has been created: ${totalComponents}`);
</script><style>permalinkCSS inside a <style> block will be scoped to that component.
This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. svelte-123xyz).
<style>
p {
/* this will only affect <p> elements in this component */
color: burlywood;
}
</style>To apply styles to a selector globally, use the :global(...) modifier.
<style>
:global(body) {
/* this will apply to <body> */
margin: 0;
}
div :global(strong) {
/* this will apply to all <strong> elements, in any
component, that are inside <div> elements belonging
to this component */
color: goldenrod;
}
p:global(.red) {
/* this will apply to all <p> elements belonging to this
component with a class of red, even if class="red" does
not initially appear in the markup, and is instead
added at runtime. This is useful when the class
of the element is dynamically applied, for instance
when updating the element's classList property directly. */
}
</style>If you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with -global-.
The -global- part will be removed when compiled, and the keyframe then be referenced using just my-animation-name elsewhere in your code.
<style>
@keyframes -global-my-animation-name {
/* code goes here */
}
</style>There should only be 1 top-level <style> tag per component.
However, it is possible to have <style> tag nested inside other elements or logic blocks.
In that case, the <style> tag will be inserted as-is into the DOM, no scoping or processing will be done on the <style> tag.
<div>
<style>
/* this style tag will be inserted as-is */
div {
/* this will apply to all `<div>` elements in the DOM */
color: red;
}
</style>
</div> previous Introduction next Basic markup
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Custom CSS transitions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions REPL  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
A more complex action • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action REPL   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/store • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/store   Edit this page on GitHub On this page   On this page  The svelte/store module exports functions for creating readable, writable and derived stores.
Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.
This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.
writablepermalink
tsfunction writable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Writable<T>;
Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.
set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.
update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'store.tstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'store.tstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.
readablepermalink
tsfunction readable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Readable<T>;
Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.
tsimport { readable } from 'svelte/store';
const time = readable(new Date(), (set) => {	set(new Date());
const interval = setInterval(() => {		set(new Date());	}, 1000);
return () => clearInterval(interval);});
const ticktock = readable('tick', (set, update) => {	const interval = setInterval(() => {		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));	}, 1000);
return () => clearInterval(interval);});derivedpermalink
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (		values: StoresValues<S>,		set: (value: T) => void,		update: (fn: Updater<T>) => void	) => Unsubscriber | void,	initial_value?: T | undefined): Readable<T>;
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (values: StoresValues<S>) => T,	initial_value?: T | undefined): Readable<T>;
Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.
In the simplest version, derived takes a single store, and the callback returns a derived value.
tsimport { derived } from 'svelte/store';
const doubled = derived(a, ($a) => $a * 2);The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.
In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.
tsimport { derived } from 'svelte/store';
const delayed = derived(	a,	($a, set) => {		setTimeout(() => set($a), 1000);	},	2000);
const delayedIncrement = derived(a, ($a, set, update) => {	set($a);	setTimeout(() => update((x) => x + 1), 1000);	// every time $a produces a value, this produces two	// values, $a immediately and then $a + 1 a second later});If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.
tsimport { derived } from 'svelte/store';
const tick = derived(	frequency,	($frequency, set) => {		const interval = setInterval(() => {			set(Date.now());		}, 1000 / $frequency);
return () => {			clearInterval(interval);		};	},	2000);In both cases, an array of arguments can be passed as the first argument instead of a single store.
tsimport { derived } from 'svelte/store';
const summed = derived([a, b], ([$a, $b]) => $a + $b);
const delayed = derived([a, b], ([$a, $b], set) => {	setTimeout(() => set($a + $b), 1000);});readonlypermalink
tsfunction readonly<T>(store: Readable<T>): Readable<T>;
This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.
tsimport { readonly, writable } from 'svelte/store';
const writableStore = writable(1);const readableStore = readonly(writableStore);
Property 'set' does not exist on type 'Readable<number>'.2339Property 'set' does not exist on type 'Readable<number>'.readableStore.subscribe(console.log);
writableStore.set(2); // console: 2readableStore.set(2); // ERRORgetpermalink
tsfunction get<T>(store: Readable<T>): T;
Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.
This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.
tsimport { get } from 'svelte/store';
const value = get(store);TypespermalinkReadablepermalinkReadable interface for subscribing.
tsinterface Readable<T> {…}
tssubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;
run subscription callback
invalidate cleanup callback
Subscribe on value changes.
StartStopNotifierpermalinkStart and stop notification callbacks.
This function is called when the first subscriber subscribes.
tstype StartStopNotifier<T> = (	set: (value: T) => void,	update: (fn: Updater<T>) => void) => void | (() => void);
SubscriberpermalinkCallback to inform of a value updates.
tstype Subscriber<T> = (value: T) => void;
UnsubscriberpermalinkUnsubscribes from value updates.
tstype Unsubscriber = () => void;
UpdaterpermalinkCallback to update a value.
tstype Updater<T> = (value: T) => T;
WritablepermalinkWritable interface for both updating and subscribing.
tsinterface Writable<T> extends Readable<T> {…}
tsset(this: void, value: T): void;
value to set
Set value and inform subscribers.
tsupdate(this: void, updater: Updater<T>): void;
updater callback
Update value using callback and inform subscribers.
previous svelte next svelte/motion
svelte • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte   Edit this page on GitHub On this page   On this page  The svelte package exposes lifecycle functions and the context API.
onMountpermalink
tsfunction onMount<T>(	fn: () =>		| NotFunction<T>		| Promise<NotFunction<T>>		| (() => any)): void;
The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).
onMount does not run inside a server-side component.
<script>
import { onMount } from 'svelte';
onMount(() => {
console.log('the component has mounted');
});
</script>If a function is returned from onMount, it will be called when the component is unmounted.
<script>
import { onMount } from 'svelte';
onMount(() => {
const interval = setInterval(() => {
console.log('beep');
}, 1000);
return () => clearInterval(interval);
});
</script>
This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.
beforeUpdatepermalink
tsfunction beforeUpdate(fn: () => any): void;
Schedules a callback to run immediately before the component is updated after any state change.
The first time the callback runs will be before the initial onMount
<script>
import { beforeUpdate } from 'svelte';
beforeUpdate(() => {
console.log('the component is about to update');
});
</script>afterUpdatepermalink
tsfunction afterUpdate(fn: () => any): void;
Schedules a callback to run immediately after the component has been updated.
The first time the callback runs will be after the initial onMount
<script>
import { afterUpdate } from 'svelte';
afterUpdate(() => {
console.log('the component just updated');
});
</script>onDestroypermalink
tsfunction onDestroy(fn: () => any): void;
Schedules a callback to run immediately before the component is unmounted.
Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.
<script>
import { onDestroy } from 'svelte';
onDestroy(() => {
console.log('the component is being destroyed');
});
</script>tickpermalink
tsfunction tick(): Promise<void>;
Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.
<script>
import { beforeUpdate, tick } from 'svelte';
beforeUpdate(async () => {
console.log('the component is about to update');
await tick();
console.log('the component just updated');
});
</script>setContextpermalink
tsfunction setContext<T>(key: any, context: T): T;
Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.
Like lifecycle functions, this must be called during component initialisation.
<script>
import { setContext } from 'svelte';
setContext('answer', 42);
</script>
Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.
getContextpermalink
tsfunction getContext<T>(key: any): T;
Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.
<script>
import { getContext } from 'svelte';
const answer = getContext('answer');
</script>hasContextpermalink
tsfunction hasContext(key: any): boolean;
Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation.
<script>
import { hasContext } from 'svelte';
if (hasContext('answer')) {
// do something
}
</script>getAllContextspermalink
tsfunction getAllContexts<	T extends Map<any, any> = Map<any, any>>(): T;
Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.
<script>
import { getAllContexts } from 'svelte';
const contexts = getAllContexts();
</script>createEventDispatcherpermalink
tsfunction createEventDispatcher<	EventMap extends Record<string, any> = any>(): EventDispatcher<EventMap>;
Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.
Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.
<script>
function callbackFunction(event) {
console.log(`Notify fired! Detail: ${event.detail}`);
}
</script>
<Child on:notify={callbackFunction} />Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
function notify() {
const shouldContinue = dispatch('notify', 'detail value', { cancelable: true });
if (shouldContinue) {
// no one called preventDefault
} else {
// a listener called preventDefault
}
}
</script>You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.
TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Special elements next svelte/store
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
DOM event forwarding • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding REPL   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Reactive assignments • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments REPL  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Frameworks without the framework: why didn't we think of this sooner?
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Frameworks without the framework: why didn't we think of this sooner? You can't write serious applications in vanilla JavaScript without hitting a complexity wall. But a compiler can do it for you.  Rich Harris Nov 26 2016 On this page   On this page
Wait, this new framework has a runtime? Ugh. Thanks, I'll pass.
– front end developers in 2018
We're shipping too much code to our users. Like a lot of front end developers, I've been in denial about that fact, thinking that it was fine to serve 100kb of JavaScript on page load – just use one less .jpg! – and that what really mattered was performance once your app was already interactive.
But I was wrong. 100kb of .js isn't equivalent to 100kb of .jpg. It's not just the network time that'll kill your app's startup performance, but the time spent parsing and evaluating your script, during which time the browser becomes completely unresponsive. On mobile, those milliseconds rack up very quickly.
If you're not convinced that this is a problem, follow Alex Russell on Twitter. Alex hasn't been making many friends in the framework community lately, but he's not wrong. But the proposed alternative to using frameworks like Angular, React and Ember – Polymer – hasn't yet gained traction in the front end world, and it's certainly not for a lack of marketing.
Perhaps we need to rethink the whole thing.
What problem do frameworks really solve?permalinkThe common view is that frameworks make it easier to manage the complexity of your code: the framework abstracts away all the fussy implementation details with techniques like virtual DOM diffing. But that's not really true. At best, frameworks move the complexity around, away from code that you had to write and into code you didn't.
Instead, the reason that ideas like React are so wildly and deservedly successful is that they make it easier to manage the complexity of your concepts. Frameworks are primarily a tool for structuring your thoughts, not your code.
Given that, what if the framework didn't actually run in the browser? What if, instead, it converted your application into pure vanilla JavaScript, just like Babel converts ES2016+ to ES5? You'd pay no upfront cost of shipping a hefty runtime, and your app would get seriously fast, because there'd be no layers of abstraction between your app and the browser.
Introducing SveltepermalinkSvelte is a new framework that does exactly that. You write your components using HTML, CSS and JavaScript (plus a few extra bits you can learn in under 5 minutes), and during your build process Svelte compiles them into tiny standalone JavaScript modules. By statically analysing the component template, we can make sure that the browser does as little work as possible.
The Svelte implementation of TodoMVC weighs 3.6kb zipped. For comparison, React plus ReactDOM without any app code weighs about 45kb zipped. It takes about 10x as long for the browser just to evaluate React as it does for Svelte to be up and running with an interactive TodoMVC.
And once your app is up and running, according to js-framework-benchmark Svelte is fast as heck. It's faster than React. It's faster than Vue. It's faster than Angular, or Ember, or Ractive, or Preact, or Riot, or Mithril. It's competitive with Inferno, which is probably the fastest UI framework in the world, for now, because Dominic Gannaway is a wizard. (Svelte is slower at removing elements. We're working on it.)
It's basically as fast as vanilla JS, which makes sense because it is vanilla JS – just vanilla JS that you didn't have to write.
But that's not the important thingpermalinkWell, it is important – performance matters a great deal. What's really exciting about this approach, though, is that we can finally solve some of the thorniest problems in web development.
Consider interoperability. Want to npm install cool-calendar-widget and use it in your app? Previously, you could only do that if you were already using (a correct version of) the framework that the widget was designed for – if cool-calendar-widget was built in React and you're using Angular then, well, hard cheese. But if the widget author used Svelte, apps that use it can be built using whatever technology you like. (On the TODO list: a way to convert Svelte components into web components.)
Or code splitting. It's a great idea (only load the code the user needs for the initial view, then get the rest later), but there's a problem – even if you only initially serve one React component instead of 100, you still have to serve React itself. With Svelte, code splitting can be much more effective, because the framework is embedded in the component, and the component is tiny.
Finally, something I've wrestled with a great deal as an open source maintainer: your users always want their features prioritised, and underestimate the cost of those features to people who don't need them. A framework author must always balance the long-term health of the project with the desire to meet their users' needs. That's incredibly difficult, because it's hard to anticipate – much less articulate – the consequences of incremental bloat, and it takes serious soft skills to tell people (who may have been enthusiastically evangelising your tool up to that point) that their feature isn't important enough. But with an approach like Svelte's, many features can be added with absolutely no cost to people who don't use them, because the code that implements those features just doesn't get generated by the compiler if it's unnecessary.
We're just getting startedpermalinkSvelte is very new. There's a lot of work still left to do – creating build tool integrations, adding a server-side renderer, hot reloading, transitions, more documentation and examples, starter kits, and so on.
But you can already build rich components with it, which is why we've gone straight to a stable 1.0.0 release. Read the guide, try it out in the REPL, and head over to GitHub to help kickstart the next era of front end development.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Temperature Converter • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter REPL  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Spring • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring REPL   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Else blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
The use directive • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Underscore Separator • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Derived stores • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte   Edit this page on GitHub On this page   On this page  The svelte package exposes lifecycle functions and the context API.
onMountpermalink
tsfunction onMount<T>(	fn: () =>		| NotFunction<T>		| Promise<NotFunction<T>>		| (() => any)): void;
The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).
onMount does not run inside a server-side component.
<script>
import { onMount } from 'svelte';
onMount(() => {
console.log('the component has mounted');
});
</script>If a function is returned from onMount, it will be called when the component is unmounted.
<script>
import { onMount } from 'svelte';
onMount(() => {
const interval = setInterval(() => {
console.log('beep');
}, 1000);
return () => clearInterval(interval);
});
</script>
This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.
beforeUpdatepermalink
tsfunction beforeUpdate(fn: () => any): void;
Schedules a callback to run immediately before the component is updated after any state change.
The first time the callback runs will be before the initial onMount
<script>
import { beforeUpdate } from 'svelte';
beforeUpdate(() => {
console.log('the component is about to update');
});
</script>afterUpdatepermalink
tsfunction afterUpdate(fn: () => any): void;
Schedules a callback to run immediately after the component has been updated.
The first time the callback runs will be after the initial onMount
<script>
import { afterUpdate } from 'svelte';
afterUpdate(() => {
console.log('the component just updated');
});
</script>onDestroypermalink
tsfunction onDestroy(fn: () => any): void;
Schedules a callback to run immediately before the component is unmounted.
Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.
<script>
import { onDestroy } from 'svelte';
onDestroy(() => {
console.log('the component is being destroyed');
});
</script>tickpermalink
tsfunction tick(): Promise<void>;
Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.
<script>
import { beforeUpdate, tick } from 'svelte';
beforeUpdate(async () => {
console.log('the component is about to update');
await tick();
console.log('the component just updated');
});
</script>setContextpermalink
tsfunction setContext<T>(key: any, context: T): T;
Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.
Like lifecycle functions, this must be called during component initialisation.
<script>
import { setContext } from 'svelte';
setContext('answer', 42);
</script>
Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.
getContextpermalink
tsfunction getContext<T>(key: any): T;
Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.
<script>
import { getContext } from 'svelte';
const answer = getContext('answer');
</script>hasContextpermalink
tsfunction hasContext(key: any): boolean;
Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation.
<script>
import { hasContext } from 'svelte';
if (hasContext('answer')) {
// do something
}
</script>getAllContextspermalink
tsfunction getAllContexts<	T extends Map<any, any> = Map<any, any>>(): T;
Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.
<script>
import { getAllContexts } from 'svelte';
const contexts = getAllContexts();
</script>createEventDispatcherpermalink
tsfunction createEventDispatcher<	EventMap extends Record<string, any> = any>(): EventDispatcher<EventMap>;
Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.
Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.
<script>
function callbackFunction(event) {
console.log(`Notify fired! Detail: ${event.detail}`);
}
</script>
<Child on:notify={callbackFunction} />Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
function notify() {
const shouldContinue = dispatch('notify', 'detail value', { cancelable: true });
if (shouldContinue) {
// no one called preventDefault
} else {
// a listener called preventDefault
}
}
</script>You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.
TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Special elements next svelte/store
Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
In and out • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out REPL  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
The zen of Just Writing CSS
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           The zen of Just Writing CSS I would say this is the future, but we're already doing it.  Rich Harris Sep 6 2017 On this page   On this page  It's fashionable to dislike CSS. There are lots of reasons why that's the case, but it boils down to this: CSS is unpredictable. If you've never had the experience of tweaking a style rule and accidentally breaking some layout that you thought was completely unrelated — usually when you're trying to ship — then you're either new at this or you're a much better programmer than the rest of us.
So the JavaScript community rolled up its sleeves and got to work. Over the last couple of years, there's been a Cambrian explosion of libraries aimed at making CSS behave, collectively referred to as CSS-in-JS.
What you might not realise is that the biggest problems with CSS can be solved without CSS-in-JS. Without those problems, writing CSS isn't just tolerable — it's enjoyable. And you don't have to find solutions to the additional problems that CSS-in-JS introduces.
This article isn't in any way intended as criticism of the hard work the CSS-in-JS community has done. It's one of the most active corners of the JS ecosystem, and new ideas are springing up every week. Instead, my purpose is to illustrate why an alternative approach — based on Single File Components with real CSS — is so damn delightful.
The biggest problem with CSSpermalinkEverything in CSS is global. Because of that, styles intended for one bit of markup often end up affecting another. Because of that, developers often resort to wild namespacing conventions (not 'rules', since they're very difficult to enforce) that mostly just increase your risk of RSI.
It gets worse when you're working on a team. No-one dares touch styles authored by someone else, because it's often unclear what they're doing, what markup they apply to, and what disasters will unfold if you remove them.
The consequence of all this is the append-only stylesheet. There's no way of knowing which code can safely be removed, so it's common to undo some existing style with another, more specific style — even on relatively small projects.
Single File Components change all thatpermalinkThe idea behind SFCs is simple: you write your components in an HTML file that (optionally) contains a <style> and <script> attribute describing the component's styles and behaviour. Svelte, Ractive, Vue and Polymer all follow this basic pattern.
Read the introductory blog post if you're new to Svelte. Or read the testimonials.
(For the rest of this article we'll be using Svelte, obviously. But if the idea of using a template language makes you shudder — your fears are misplaced, but that's a topic for another day — then just use Vue which lets you use JSX in your SFCs.)
Several wonderful things happen as a result:
Your styles are scoped to the component. No more leakage, no more unpredictable cascade. And no more sesquipedalian classnames designed to prevent conflicts.
You don't need to go spelunking through your folder structure to find the rules that are breaking your stuff.
The compiler (in Svelte's case) can identify and remove unused styles. No more append-only stylesheets!
Let's see what that looks like in practice.
Is this what they mean by 'use the platform'?
Every code editor already knows about CSS, so there's a good chance that you'll get autocomplete, linting, syntax highlighting and so on — all without additional JS-fatigue-inducing tools.
And because it's real CSS, rather than some camelCased quotes-everywhere impostor, we can take advantage of the 'tweak in devtools, paste back into our source code' workflow, which I personally couldn't live without. Notice that we get CSS sourcemaps out of the box, so you can instantly pinpoint the lines in question. It's hard to overstate the importance of this: when you're in WYSIWYG mode, you're not thinking in terms of your component tree, so having a robust way to figure out where these damn styles came from is essential. Doubly so if someone else originally wrote the component. (I promise you, this is the single biggest productivity boost to your CSS workflow. If you're writing styles without sourcemaps, you are almost certainly wasting a lot of time. I know I was.)
Svelte transforms your selectors (using an attribute that's also applied to affected elements, though the exact mechanism is unimportant and subject to change) to achieve the scoping. It warns on and removes any unused rules, then it minifies the result and lets you write it out to a .css file. There's also an experimental new option to compile to web components, using shadow DOM to encapsulate the styles, if that's your jam.
This is all possible because your CSS is parsed (with css-tree) and statically analysed in the context of your markup. Static analysis opens the doors to all kinds of exciting future possibilities — smarter optimisations, a11y hints — that are much harder if your styles are computed dynamically at runtime. We're just getting started.
But we can add tools to do [x]!permalinkIf your reaction to the video was 'fine, but if we use TypeScript and write plugins for each editor then we can get all the autocomplete and syntax highlighting stuff' — in other words, if you believe that in order to achieve parity with CSS it makes sense to build, document, promote and maintain a fleet of ancillary projects — then, well, you and I may never see eye to eye!
We don't have all the answers — yetpermalinkHaving said all that, CSS-in-JS does point to answers to some lingering questions:
How can we install styles from npm?
How can we reuse constants that are defined in a single place?
How can we compose declarations?
Personally, I haven't found these issues to outweigh the benefits of the approach outlined above. You may well have a different set of priorities, and they may be reason enough for you to abandon CSS.
But at the end of the day, you have to know CSS anyway. Love it or loathe it, you must at least learn it. As custodians of the web, we have a choice: create abstractions that steepen the web dev learning curve yet further, or work together to fix the bad parts of CSS. I know which I choose.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
compound global css example • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Modal • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal REPL   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Writable stores • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Svelte 4 migration guide • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Misc Svelte 4 migration guide   Edit this page on GitHub On this page   On this page  This migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: npx svelte-migrate@latest svelte-4
If you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your peerDependencies.
Minimum version requirementspermalink
Upgrade to Node 16 or higher. Earlier versions are no longer supported. (#8566)
If you are using SvelteKit, upgrade to 1.20.4 or newer (sveltejs/kit#10172)
If you are using Vite without SvelteKit, upgrade to vite-plugin-svelte 2.4.1 or newer (#8516)
If you are using webpack, upgrade to webpack 5 or higher and svelte-loader 3.1.8 or higher. Earlier versions are no longer supported. (#8515, 198dbcf)
If you are using Rollup, upgrade to rollup-plugin-svelte 7.1.5 or higher (198dbcf)
If you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. (#8488)
Browser conditions for bundlerspermalinkBundlers must now specify the browser condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as onMount not get called and you'll need to update the module resolution configuration.
For Rollup this is done within the @rollup/plugin-node-resolve plugin by setting browser: true in its options. See the rollup-plugin-svelte documentation for more details
For wepback this is done by adding "browser" to the conditionNames array. You may also have to update your alias config, if you have set it. See the svelte-loader documentation for more details
(#8516)
Removal of CJS related outputpermalinkSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the svelte/register hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. (#8613)
Stricter types for Svelte functionspermalinkThere are now stricter types for createEventDispatcher, Action, ActionReturn, and onMount:
createEventDispatcher now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly (#7224)
tsimport { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher<{	optional: number | null;	required: string;	noArgument: null;}>();Expected 2-3 arguments, but got 1.2554Expected 2-3 arguments, but got 1.
Argument of type '"surprise"' is not assignable to parameter of type 'null | undefined'.2345Argument of type '"surprise"' is not assignable to parameter of type 'null | undefined'.// Svelte version 3:dispatch('optional');dispatch('required'); // I can still omit the detail argumentdispatch('noArgument', 'surprise'); // I can still add a detail argumentExpected 2-3 arguments, but got 1.2554Expected 2-3 arguments, but got 1.
Argument of type '"surprise"' is not assignable to parameter of type 'null | undefined'.2345Argument of type '"surprise"' is not assignable to parameter of type 'null | undefined'.// Svelte version 4 using TypeScript strict mode:dispatch('optional');dispatch('required'); // error, missing argumentdispatch('noArgument', 'surprise'); // error, cannot pass an argument
Action and ActionReturn have a default parameter type of undefined now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically (#7442)
const action: Action = (node, params) => { .. } // this is now an error if you use params in any way
const action: Action<HTMLElement, string> = (node, params) => { .. } // params is of type string
onMount now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions (#8136)
// Example where this change reveals an actual bug
onMount(
// someCleanup() not called because function handed to onMount is async
async () => {
const something = await foo();
// someCleanup() is called because function handed to onMount is sync
() => {
foo().then(something =>  ..
// ..
return () => someCleanup();
}
);
Custom Elements with SveltepermalinkThe creation of custom elements with Svelte has been overhauled and significantly improved. The tag option is deprecated in favor of the new customElement option:
<svelte:options tag="my-component" />
<svelte:options customElement="my-component" />
This change was made to allow more configurability for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. (#8457)
SvelteComponentTyped is deprecatedpermalinkSvelteComponentTyped is deprecated, as SvelteComponent now has all its typing capabilities. Replace all instances of SvelteComponentTyped with SvelteComponent.
import { SvelteComponentTyped } from 'svelte';
import { SvelteComponent } from 'svelte';
export class Foo extends SvelteComponentTyped<{ aProp: string }> {}
export class Foo extends SvelteComponent<{ aProp: string }> {}
If you have used SvelteComponent as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing : typeof SvelteComponent to : typeof SvelteComponent<any>.
<script>
import ComponentA from './ComponentA.svelte';
import ComponentB from './ComponentB.svelte';
import { SvelteComponent } from 'svelte';
let component: typeof SvelteComponent;
let component: typeof SvelteComponent<any>;
function choseRandomly() {
component = Math.random() > 0.5 ? ComponentA : ComponentB;
}
</script>
<button on:click={choseRandomly}>random</button>
<svelte:element this={component} />
The migration script will do both automatically for you. (#8512)
Transitions are local by defaultpermalinkTransitions are now local by default to prevent confusion around page navigations. "local" means that a transition will not play if it's within a nested control flow block (each/if/await/key) and not the direct parent block but a block above it is created/destroyed. In the following example, the slide intro animation will only play when success goes from false to true, but it will not play when show goes from false to true:
{#if show}
...
{#if success}
<p in:slide>Success</p>
{/each}
{/if}To make transitions global, add the |global modifier - then they will play when any control flow block above is created/destroyed. The migration script will do this automatically for you. (#6686)
Default slot bindingspermalinkDefault slot bindings are no longer exposed to named slots and vice versa:
<script>
import Nested from './Nested.svelte';
</script>
<Nested let:count>
<p>
count in default slot - is available: {count}
</p>
<p slot="bar">
count in bar slot - is not available: {count}
</p>
</Nested>This makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. (#6049)
PreprocessorspermalinkThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.
tsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(	source,	[		{			markup: () => {				console.log('markup-1');			},			script: () => {				console.log('script-1');			},			style: () => {				console.log('style-1');			}		},		{			markup: () => {				console.log('markup-2');			},			script: () => {				console.log('script-2');			},			style: () => {				console.log('style-2');			}		}	],	{		filename: 'App.svelte'	});
// Svelte 3 logs:// markup-1// markup-2// script-1// script-2// style-1// style-2
// Svelte 4 logs:// markup-1// script-1// style-1// markup-2// script-2// style-2This could affect you for example if you are using MDsveX - in which case you should make sure it comes before any script or style preprocessor.
preprocess: [
vitePreprocess(),
mdsvex(mdsvexConfig)
mdsvex(mdsvexConfig),
vitePreprocess()
]
Each preprocessor must also have a name. (#8618)
New eslint packagepermalinkeslint-plugin-svelte3 is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package eslint-plugin-svelte. See this Github post for an instruction how to migrate. Alternatively, you can create a new project using npm create svelte@latest, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project.
Other breaking changespermalink
the inert attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. (#8628)
the runtime now uses classList.toggle(name, boolean) which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8629)
the runtime now uses the CustomEvent constructor which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8775)
people implementing their own stores from scratch using the StartStopNotifier interface (which is passed to the create function of writable etc) from svelte/store now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. (#6750)
derived will now throw an error on falsy values instead of stores passed to it. (#7947)
type definitions for svelte/internal were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5
Removal of DOM nodes is now batched which slightly changes its order, which might affect the order of events fired if you're using a MutationObserver on these elements (#8763)
if you enhanced the global typings through the svelte.JSX namespace before, you need to migrate this to use the svelteHTML namespace. Similarly if you used the svelte.JSX namespace to use type definitions from it, you need to migrate those to use the types from svelte/elements instead. You can find more information about what to do here
previous TypeScript next svelte/register
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: June 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: June 2023 SvelteHack winners, lots of new bindings, Svelte 4.0.0-next.0, and a bunch of new features in SvelteKit  Dani Sandoval Jun 1 2023 On this page   On this page  Welcome to June everyone and congrats to our SvelteHack winners, across all the categories! If you missed it, these winners were announced at Svelte Summit on May 6th 🎉
The entire playlist of the summit, including all the talks broken up in to separate videos, can be found on the Svelte Society YouTube channel. So check it out, if you haven't already.
Lots to cover in this month's newsletter, including a lot of improvements to both Svelte and Kit...
What's new in SveltepermalinkSvelte 4.0.0-next.0, the first pre-release version of Svelte 4.0 is out! An explanation of the changes, improvements and goals of this release can be found in the Releases page on GitHub. Check it out to get an early sneak peek of the future of Svelte. It also includes a migration guide, for those interested in the minimal amount of breaking changes and deprecations.
Svelte 3.59.0 is also out, with a ton of new features:
Restructuring arrays with the spread operator (...) is now handled correctly (3.59.0, #8552, #8554)
The new a11y-autocomplete-valid warning will now warn if the autocomplete attribute isn't used according to the HTML specification (3.59.0, Examples, #8520)
fullscreenElement and visibilityState bindings are now available for the <svelte:document> element (3.59.0, #8507)
The devicePixelRatio binding is now available for the <svelte:window> element (3.59.0, #8285)
The ResizeObserver bindings contentRect/contentBoxSize/borderBoxSize/devicePixelContentBoxSize are now usable with bind:(3.59.0, #8022)
For all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
What's new in SvelteKitpermalink
Route-level entry generators allow exporting an entries function from +page, +page.server, and +server files to supply possible values for params for prerendering (1.16.0, Docs, #9571)
URLs in <meta> tags are now crawled to make programmatic social-images much easier (1.17.0, Docs, #9900)
data and form have been renamed to formData and formElement respectively in the enhance function. Using them through the old names will log a deprecation warning and they'll be removed in a future version. (1.17.0, Docs, #9902)
Link options can now be set to true and false (1.19.0, Docs, #10039)
The new resolvePath export can be used to build relative paths from route IDs and parameters (1.19.0, Docs, #9949)
Community ShowcasepermalinkApps & Sites built with Svelte
a-maze is a simple maze generator (using DFS) with any dimensions between 5 cells and 75 cells
Windows 11 in Svelte attempts to replicate the Windows 11 desktop experience on web
JsonCrunch is a JSON viewing, transformation and querying tool meant for quickly manipulating small to medium size pieces of JSON data
Typepost is a simple text post generator for social media
tall.ly is a website for sharing bookmarks (example)
bbchallenge is a collaborative environment to prove or disprove the Busy Beaver conjecture
Reddit Map is a project of computer, data, and social scientists to explore and visualize Reddit
WeWatch allows watching videos together in sync
Wonderplan is an AI-Powered Trip Planner tailored to your preferences and covering all aspects of your trip
CodingView.io is an online coding interview tool
MeatGPT is an art-site that promptly ignores your prompt
Vim Ninja is an interactive Vim course in the browser
prcl is a Pastebin-alternative focused on speed and simplicity
md is a web based markdown editor
Learning Resources
Featuring Svelte Contributors and Ambassadors
This Week in Svelte:
2023 April 28 - SK 1.15.9, colour contrast, SK reusable types, path aliases
2023 May 5 - SvelteKit 1.16.0, reactive statement lifecycle, custom stores
2023 May 12 - Svelte 4.0 preview, SvelteKit 1.16.3, Svelte 3.59.1
2023 May 19 - SvelteKit 1.18.0, accessible HTML tables, CSS nesting
2023 May 26 - SvelteKit 1.19.0, choosing a UI library, breakpoint debugging
Svelte Radio
Svelte Summit Hypisode (May 4, 2023)
A primer on AI for developers with Swyx from Latent Space (May 11, 2023 | Video Version)
To Watch
Build a Blazing Fast SvelteKit Markdown Blog, Page Versus Standalone Endpoints In SvelteKit and Learn How Data Flows In Your SvelteKit App by Joy of Code
Build a ChatGPT Plugin with SvelteKit by SuperMilkDaddy
Svelte makes Drag And Drop API easy! and Simple native-like App in SvelteKit! by Antonio Sarcevic
Let's Learn Svelte.js in 60 Minutes (fun speed run). by developedbyed
To Read
Bridging Vue 2 and Svelte by Alexis Faizeau
Write Once, Run Anywhere by Ross Robino
Reflections on Migrating my SaaS To SvelteKit by SvelteKitSaaS
Authentication system using rust (actix-web) and SvelteKit by John Owolabi Idogun
SvelteKit Forms: Grammar Check App, SvelteKit Ably: Sqvuably Real‑Time Game and Svelte Login Form Example: Best Practices by Rodney Lab
The Correct Way to Use Stores in SvelteKit and Rich Harris is NOT Getting Rid of TS Support in Svelte by Jonathan Gamble
How to add a basic SEO component to SvelteKit by Thilo Maier
SvelteKit Contact Form Example with Airtable by Scott Spence
Performant Reactivity with Svelte-Kit by Erxk
Svelte stores: the curious parts by Valdimir Klepov
Libraries, Tools & Components
svelte-svg-transform is a tiny library that makes it easier for you to add SVGs and transform them in your Svelte project
sirens is a visualization of active air raid sirens in Ukraine by DER SPIEGEL
Sveltronics is a collection of Svelte utility functions for your project
Prompta is yet another interface for chatting with ChatGPT (or GPT-4)
Colibri is a lightweight, customizable component library for Svelte apps
Svelte Smart Doc is a natural language interface to search the Svelte Svelte documentation
Tailwind Elements now has a Svelte Integration
Thanks for reading! As always, feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte <3 TypeScript
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte <3 TypeScript Typernetically enhanced web apps  Orta Therox Jul 17 2020 On this page   On this page  It's been by far the most requested feature for a while, and it's finally here: Svelte officially supports TypeScript.
We think it'll give you a much nicer development experience — one that also scales beautifully to larger Svelte code bases — regardless of whether you use TypeScript or JavaScript.
Image of TypeScript + Svelte in VS Code (theme is Kary Pro.)
Try it nowpermalinkYou can start a new Svelte TypeScript project using Svelte's official scaffolding CLI by running npm create svelte@latest and following the prompts. This sets up a new SvelteKit project for you.
Alternatively you can run npm create vite@latest myapp -- --template svelte-ts to scaffold a Vite project using Svelte and TypeScript.
If you're a VS Code user, make sure you're using the (new) official extension, which replaces the popular extension by James Birtles.
Later in this blog post, we'll detail the individual steps involved in using TypeScript in an existing Svelte project.
What does it mean to support TypeScript in Svelte?permalinkTypeScript support in Svelte has been possible for a long time, but you had to mix a lot of disparate tools together and each project ran independently. Today, nearly all of these tools live under the Svelte organization and are maintained by a set of people who take responsibility over the whole pipeline and have common goals.
A week before COVID was declared a pandemic, I pitched a consolidation of the best Svelte tools and ideas from similar dev-ecosystems and provided a set of steps to get first class TypeScript support. Since then, many people have pitched in and written the code to get us there.
When we say that Svelte now supports TypeScript, we mean a few different things:
You can use TypeScript inside your <script> blocks — just add the lang="ts" attribute
Components with TypeScript can be type-checked with the svelte-check command
You get autocompletion hints and type-checking as you're writing components, even in expressions inside markup
TypeScript files understand the Svelte component API — no more red squiggles when you import a .svelte file into a .ts module
How does it work?permalinkTo understand the two main parts of TypeScript support, we'll compare it to the technique TypeScript uses to provide dev tools. There is a compiler tsc which you run on the command-line to convert *.ts to *.js, then there is a TSServer which is a node API that responds to requests from text editors. The TSServer is what provides all the JavaScript and TypeScript realtime introspection for editors while coding, and it has most of the compiler's code inside it.
For Svelte, we have the Svelte compiler, and now we have the svelte-language-server which responds to text editor calls via the Language Server Protocol standard. First class TypeScript support means that both of these two systems do a good job of handling TypeScript code.
The Svelte compiler support for TypeScript is handled by Christian Kaisermann's svelte-preprocess which is now an official Svelte project.
For the editor level, we took inspiration from Pine's work in the Vue ecosystem via Vetur. Vetur provides an LSP, a VS Code extension and a CLI. Svelte now also has an LSP, a VS Code extension and a CLI.
*.svelte IntrospectionpermalinkFor the official Svelte VS Code extension, we built off the foundations which James Birtles has created in UnwrittenFun/svelte-vscode and UnwrittenFun/svelte-language-server.
Simon Holthausen and Lyu, Wei-Da have done great work improving the JavaScript and TypeScript introspection, including integrating @halfnelson's svelte2tsx which powers understanding the props on components in your codebase.
Adding TypeScript to an existing projectpermalinkBefore getting started, add the dependencies:
npm install --save-dev @tsconfig/svelte typescript svelte-preprocess svelte-check1. Compiling TypeScriptpermalinkYou first need to set up svelte-preprocess, which passes the contents of your <script lang="ts"> blocks through the TypeScript compiler.
In a Rollup project, that would look like this — note that we also need to install @rollup/plugin-typescript so that Rollup can handle .ts files:
import autoPreprocess from 'svelte-preprocess';
import typescript from '@rollup/plugin-typescript';
export default {
...,
plugins: [
svelte({
preprocess: autoPreprocess()
}),
typescript({ sourceMap: !production })
]
}
Full instructions for other environments here.
To configure TypeScript, you will need to create a tsconfig.json in the root of your project:
ts{	"extends": "@tsconfig/svelte/tsconfig.json",
"include": ["src/**/*", "src/node_modules"],	"exclude": ["node_modules/*", "__sapper__/*", "public/*"]}Your include/exclude may differ per project — these are defaults that should work across most Svelte projects.
2. Editor SupportpermalinkAny editor using an LSP can be supported. The VS Code extension has been our primary focus, but there is work in progress on Atom, and Vim via coc-svelte has been updated with the latest LSP.
These editor extensions will improve your coding experience even if you only use JavaScript. The editor won't offer errors, but it will offer inference and refactoring tools. You can add // @ts-check to the top of a <script> tag using JavaScript to get better error messages with no infra changes.
To switch a <script> to use TypeScript, use <script lang="ts"> and that should be it. Hopefully you won't be seeing an ocean of red squiggles.
3. CI CheckspermalinkHaving red squiggles is great, well, kinda. On the long run though, you want to be able to verify that there are no errors in your code. To verify your project is error free, you can use the CLI tool svelte-check. It acts like an editor asking for errors against all of your .svelte files.
You can add the dependency to your project and then add it to CI.
❯ npx svelte-check
Loading svelte-check in workspace: /Users/ortatherox/dev/svelte/example-app
Getting Svelte diagnostics...
====================================
/Users/ortatherox/dev/svelte/example-app/src/App.svelte:3:2
Error: Type '123' is not assignable to type 'string'. (ts)
====================================
svelte-check found 1 error
error Command failed with exit code 1.What about TypeScript in Sapper projects?permalinkTypeScript support was added to Sapper in 0.28, so if you're using an older version be sure to upgrade.
How can I contribute?permalinkWe're so glad you asked. The work is happening in the sveltejs/language-tools repo and in the #language-tools channel in the Svelte Discord. If you'd like to report issues, submit fixes, or help out with extensions for new editors and so on, that's where you can find us. See you there!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte • Cybernetically enhanced web apps
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte  Cybernetically enhanced  web apps tutorial   read the docs         compiled Svelte shifts as much work as possible out of the browser and into your build step. No more
manual optimisations — just faster, more efficient apps. compact Write breathtakingly concise components using languages you already know — HTML, CSS and
JavaScript. Oh, and your application bundles will be tiny as well. complete Built-in scoped styling, state management, motion primitives, form bindings and more — don't
waste time trawling npm for the bare essentials. It's all here.  see for yourself
Try it locally, on StackBlitz, or with
the interactive tutorial.
terminal npm create svelte@latest my-app
cd my-app
npm install
npm run dev -- --open    build with ease 1 Hello World 2 Scoped CSS 3 Reactivity 4 Transitions  more  examples →    Svelte components are built on top of HTML. Just add data.  loved by developers We're proud that Svelte was recently voted the most admired JS web framework
in one industry survey while drawing the most interest in learning it in
two others. We
think you'll love it too.                 Svelte is made possible by the work of hundreds of supporters. contributors Join us on GitHub Rich-Harris Conduitry tanhauhau dummdidumm benmccann PuruVJ baseballyama gtm-nayan trueadm Swatinem DreaminDani jacwright lukeed mindrones mrkishi pngwn geoffrich ekhaled EmilTholin antony ngtr6788 ignatiusmb tivac zxbodya  donors Support us on OpenCollective DatawrapperVercelCohereDabbleMonogramFrontend MastersHugging FacePQINARasterAvastINVISRMattLayer0MetafyThreema Open Source FundChangelogClancy DigitalCodesmithKenoxa GmbHLevel Up TutorialsThe PuddingJason HetheringtonJeff MoeZev Averbach   resources documentationtutorialexamplesblog connect githubopencollectivediscordtwitter
© 2023 Svelte contributors  Svelte is free and open source software released
under the MIT license
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Special elements • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Special elements   Edit this page on GitHub On this page   On this page  <slot>permalink<slot><!-- optional fallback --></slot><slot name="x"><!-- optional fallback --></slot><slot prop={value} />Components can have child content, in the same way that elements can.
The content is exposed in the child component using the <slot> element, which can contain fallback content that is rendered if no children are provided.
<!-- Widget.svelte -->
<div>
<slot>
this fallback content will be rendered when no content is provided, like in the first example
</slot>
</div>
<!-- App.svelte -->
<Widget />
<!-- this component will render the default content -->
<Widget>
<p>this is some child content that will overwrite the default slot content</p>
</Widget>Note: If you want to render regular <slot> element, You can use <svelte:element this="slot" />.
<slot name="name">permalinkNamed slots allow consumers to target specific areas. They can also have fallback content.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</Widget>Components can be placed in a named slot using the syntax <Component slot="name" />.
In order to place content in a slot without using a wrapper element, you can use the special element <svelte:fragment>.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<HeaderComponent slot="header" />
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget>$$slotspermalink$$slots is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in $$slots. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it.
Note that explicitly passing in an empty named slot will add that slot's name to $$slots. For example, if a parent passes <div slot="title" /> to a child component, $$slots.title will be truthy within the child.
<!-- Card.svelte -->
<div>
<slot name="title" />
{#if $$slots.description}
<!-- This <hr> and slot will render only if a slot named "description" is provided. -->
<hr />
<slot name="description" />
{/if}
</div>
<!-- App.svelte -->
<Card>
<h1 slot="title">Blog Post Title</h1>
<!-- No slot named "description" was provided so the optional slot will not be rendered. -->
</Card><slot key={value}>permalinkSlots can be rendered zero or more times and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.
The usual shorthand rules apply — let:item is equivalent to let:item={item}, and <slot {item}> is equivalent to <slot item={item}>.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot prop={item} />
</li>
{/each}
</ul>
<!-- App.svelte -->
<FancyList {items} let:prop={thing}>
<div>{thing.text}</div>
</FancyList>Named slots can also expose values. The let: directive goes on the element with the slot attribute.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot name="item" {item} />
</li>
{/each}
</ul>
<slot name="footer" />
<!-- App.svelte -->
<FancyList {items}>
<div slot="item" let:item>{item.text}</div>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</FancyList><svelte:self>permalinkThe <svelte:self> element allows a component to include itself, recursively.
It cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.
<script>
/** @type {number} */
export let count;
</script>
{#if count > 0}
<p>counting down... {count}</p>
<svelte:self count={count - 1} />
{:else}
<p>lift-off!</p>
{/if}<svelte:component>permalink<svelte:component this={expression} />The <svelte:component> element renders a component dynamically, using the component constructor specified as the this property. When the property changes, the component is destroyed and recreated.
If this is falsy, no component is rendered.
<svelte:component this={currentSelection.component} foo={bar} /><svelte:element>permalink<svelte:element this={expression} />The <svelte:element> element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element.
The only supported binding is bind:this, since the element type-specific bindings that Svelte does at build time (e.g. bind:value for input elements) do not work with a dynamic tag type.
If this has a nullish value, the element and its children will not be rendered.
If this is the name of a void element (e.g., br) and <svelte:element> has child elements, a runtime error will be thrown in development mode.
<script>
let tag = 'div';
export let handler;
</script>
<svelte:element this={tag} on:click={handler}>Foo</svelte:element><svelte:window>permalink<svelte:window on:event={handler} /><svelte:window bind:prop={value} />The <svelte:window> element allows you to add event listeners to the window object without worrying about removing them when the component is destroyed, or checking for the existence of window when server-side rendering.
Unlike <svelte:self>, this element may only appear at the top level of your component and must never be inside a block or element.
<script>
/** @param {KeyboardEvent} event */
function handleKeydown(event) {
alert(`pressed the ${event.key} key`);
}
</script>
<svelte:window on:keydown={handleKeydown} />You can also bind to the following properties:
innerWidth
innerHeight
outerWidth
outerHeight
scrollX
scrollY
online — an alias for window.navigator.onLine
devicePixelRatio
All except scrollX and scrollY are readonly.
<svelte:window bind:scrollY={y} />
Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of scrollX and scrollY will cause scrolling. However, if the scrolling behaviour is desired, call scrollTo() in onMount().
<svelte:document>permalink<svelte:document on:event={handler} /><svelte:document bind:prop={value} />Similarly to <svelte:window>, this element allows you to add listeners to events on document, such as visibilitychange, which don't fire on window. It also lets you use actions on document.
As with <svelte:window>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:document on:visibilitychange={handleVisibilityChange} use:someAction />You can also bind to the following properties:
fullscreenElement
visibilityState
All are readonly.
<svelte:body>permalink<svelte:body on:event={handler} />Similarly to <svelte:window>, this element allows you to add listeners to events on document.body, such as mouseenter and mouseleave, which don't fire on window. It also lets you use actions on the <body> element.
As with <svelte:window> and <svelte:document>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:body on:mouseenter={handleMouseenter} on:mouseleave={handleMouseleave} use:someAction /><svelte:head>permalink<svelte:head>...</svelte:head>This element makes it possible to insert elements into document.head. During server-side rendering, head content is exposed separately to the main html content.
As with <svelte:window>, <svelte:document> and <svelte:body>, this element may only appear at the top level of your component and must never be inside a block or element.
<svelte:head>
<title>Hello world!</title>
<meta name="description" content="This is where the description goes for SEO" />
</svelte:head><svelte:options>permalink<svelte:options option={value} />The <svelte:options> element provides a place to specify per-component compiler options, which are detailed in the compiler section. The possible options are:
immutable={true} — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed
immutable={false} — the default. Svelte will be more conservative about whether or not mutable objects have changed
accessors={true} — adds getters and setters for the component's props
accessors={false} — the default
namespace="..." — the namespace where this component will be used, most commonly "svg"; use the "foreign" namespace to opt out of case-insensitive attribute names and HTML-specific warnings
customElement="..." — the name to use when compiling this component as a custom element
<svelte:options customElement="my-custom-element" /><svelte:fragment>permalinkThe <svelte:fragment> element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget> previous Component directives next svelte
What's new in Svelte: July 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: July 2023 Svelte 4.0, new website and a tour around the community  Dani Sandoval Jul 1 2023 On this page   On this page  Svelte 4 is out and folks have been building! There's a bunch of new showcases, libraries and tutorials to share. So let's get right into it...
What's new in SveltepermalinkThe big news this month was the release of Svelte 4.0! You can read all about it in the Announcing Svelte 4 post. From performance fixes and developer experience improvements to a brand new site, docs and tutorial... this new release sets the stage for Svelte 5 with minimal breaking changes.
If you're already on Node.js 16, it's possible you won't see any breaking changes in your project. But be sure to read the migration guide for all the details.
For a full list of all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
What's new in SvelteKitpermalinkThis month there were lots of awesome bug fixes, so be sure to upgrade to the latest version! There are also a few new features to mention:
The new event.isSubRequest boolean indicates whether this is a same-origin fetch request to one of the app's own APIs during a server request (1.21.0, Docs, #10170)
A new config option, config.kit.env.privatePrefix will set a private prefix on environment variables. This defaults to '' (1.21.0, Docs, #9996)
VERSION is now exported and accessible via @sveltejs/kit. This can be used for feature detection or anything else that requires knowledge of the current version of SvelteKit (1.21.0, Docs, #9969)
For adapter-specific changes, check out the CHANGELOGs in each of the adapter directories.
Community ShowcasepermalinkApps & Sites built with Svelte
Heerdle is a remake of Spotify's now-defunct Heardle - the daily music guessing game
Meoweler is a travel site filled with cats and helpful facts about popular destinations
A tech lead from IKEA gave a few more details on the way they build pages (and page template) using Svelte
The Quest to Replace Passwords features an interactive comparison visualization for all the popular password management tools
audiogest lets you turn speech to text & summarize any audio in one click
heroify generates 3D graphics for your website with AI
Diesel Legacy: The Brazen Age is a fighting game whose leaderboard and profile pages were all built in Svelte
markmyimages is a watermarking tool with bulk image resize, rename, effects, and more
md.robino.dev is a web based markdown editor
YABin is Yet Another Pastebin with some very specific features
Learning Resources
Announcing Svelte 4 post
svelte.dev: A complete overhaul
Featuring Svelte Contributors and Ambassadors
Dev Vlog: June 2023 - Svelte 4.0 with Rich Harris
PodRocket: Svelte 4 with Geoff
This Dot Media: Svelte 4 Launch Party with Simon, Ben, Geoff, and Puru
Exposing Svelte: Between Two Nerds is a comedic conversation between Rich Harris and Dax Raad
Community Tutorial: Self-hosting SvelteKit with a VPS, Docker, CapRover and GitHub Actions with Stanislav Khromov
SvelteKit and Storybook with Jeppe Reinhold
This Week in Svelte:
2023 June 2 - SvelteKit 1.20.1, Svelte 4 pre-release, Headless UI libraries
2023 June 9 - Updates, Self-hosting SvelteKit, Passing styles to children
2023 June 16 - Svelte 4 next.1, how to create a hamburger menu, group layouts
2023 June 23 - Svelte 4, Popovers and hover, Real Time requests with SvelteKit
Svelte Radio
SvelteLab - a Svelte REPL for SvelteKit with Antonio and Paolo
Svelte Radio Live - Svelte 4 Summer Special with Simon and Puru
Svelte Society - London June 2023
Using The Svelte Context API With Stores, Impossible FLIP Layout Animations With Svelte And GSAP and Create Beautiful Presentations With Svelte by Joy of Code
To Watch
Server-side filtered, paginated and sorted Table in SvelteKit by hartenfellerdev
Best Icon Library for Svelte and SvelteKit in 2023 by SvelteRust
To Read
From Zero to Production with SvelteKit by Justin Ahinon
Thoughts on Svelte(Kit), one year and 3 billion requests later by Claudio Holanda
How I published a gratitude journaling app for iOS and Android using SvelteKit and Capacitor by Stanislav Khromov
Learning by doing - Vue devs build a Svelte Single Page App by Black Spike
Generate Breadcrumb and Navigation in SvelteKit, SvelteKit Authentication using SvelteKitAuth and OAuth providers: A Comprehensive Guide and SvelteKitAuth with Salesforce OAuth provider by Aakash Goplani
Instantly find and remove Svelte component orphans by Jeremy Zaborowski
Migration Guide from Routify to SvelteKit Router by Aakash Goplani
Creating 3D data visualization using Threlte and D3 by DataViz Cubed
Svelte Real‑time Multiplayer Game: User Presence and SvelteKit PostCSS Tutorial: use Future CSS Today by Rodney Lab
SvelteKit’s World of Routing: Unleash power of your app using Dynamic Routes and Parameters by Igor Nowosad
Libraries, Tools & Components
The Vercel AI SDK is an interoperable, streaming-enabled, edge-ready software development kit for AI apps built with React and Svelte
Superforms 1.0 has been released. Check out the migration guide and new feature list for more details
Panda CSS is CSS-in-JS with build time generated styles, RSC compatibility and multi-variant support
svelte-section-list is a headless Svelte npm package that provides drag-and-drop functionality for managing items and sections
WebStorm is starting to use the Svelte Language Server in its IDE tooling
shadcn-svelte is an unofficial port of shadcn/ui to Svelte that makes it easy to build your component library from common base components
sveltekit-multibuild is a starter repo to create Android apps, web sites, desktop apps, and Chrome extensions automatically
SvelteKit AI Chatbot is an open-source AI chatbot app template built with SvelteKit, the Vercel AI SDK, OpenAI, and Vercel KV.
KitAI provides batteries-included AI templates for SvelteKit and Next.js
Svelte Form Builder is a no-code drag&drop form builder for Svelte
Thanks for reading! As always, feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte   Edit this page on GitHub On this page   On this page  The svelte package exposes lifecycle functions and the context API.
onMountpermalink
tsfunction onMount<T>(	fn: () =>		| NotFunction<T>		| Promise<NotFunction<T>>		| (() => any)): void;
The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).
onMount does not run inside a server-side component.
<script>
import { onMount } from 'svelte';
onMount(() => {
console.log('the component has mounted');
});
</script>If a function is returned from onMount, it will be called when the component is unmounted.
<script>
import { onMount } from 'svelte';
onMount(() => {
const interval = setInterval(() => {
console.log('beep');
}, 1000);
return () => clearInterval(interval);
});
</script>
This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.
beforeUpdatepermalink
tsfunction beforeUpdate(fn: () => any): void;
Schedules a callback to run immediately before the component is updated after any state change.
The first time the callback runs will be before the initial onMount
<script>
import { beforeUpdate } from 'svelte';
beforeUpdate(() => {
console.log('the component is about to update');
});
</script>afterUpdatepermalink
tsfunction afterUpdate(fn: () => any): void;
Schedules a callback to run immediately after the component has been updated.
The first time the callback runs will be after the initial onMount
<script>
import { afterUpdate } from 'svelte';
afterUpdate(() => {
console.log('the component just updated');
});
</script>onDestroypermalink
tsfunction onDestroy(fn: () => any): void;
Schedules a callback to run immediately before the component is unmounted.
Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.
<script>
import { onDestroy } from 'svelte';
onDestroy(() => {
console.log('the component is being destroyed');
});
</script>tickpermalink
tsfunction tick(): Promise<void>;
Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.
<script>
import { beforeUpdate, tick } from 'svelte';
beforeUpdate(async () => {
console.log('the component is about to update');
await tick();
console.log('the component just updated');
});
</script>setContextpermalink
tsfunction setContext<T>(key: any, context: T): T;
Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.
Like lifecycle functions, this must be called during component initialisation.
<script>
import { setContext } from 'svelte';
setContext('answer', 42);
</script>
Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.
getContextpermalink
tsfunction getContext<T>(key: any): T;
Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.
<script>
import { getContext } from 'svelte';
const answer = getContext('answer');
</script>hasContextpermalink
tsfunction hasContext(key: any): boolean;
Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation.
<script>
import { hasContext } from 'svelte';
if (hasContext('answer')) {
// do something
}
</script>getAllContextspermalink
tsfunction getAllContexts<	T extends Map<any, any> = Map<any, any>>(): T;
Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.
<script>
import { getAllContexts } from 'svelte';
const contexts = getAllContexts();
</script>createEventDispatcherpermalink
tsfunction createEventDispatcher<	EventMap extends Record<string, any> = any>(): EventDispatcher<EventMap>;
Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.
Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.
<script>
function callbackFunction(event) {
console.log(`Notify fired! Detail: ${event.detail}`);
}
</script>
<Child on:notify={callbackFunction} />Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
function notify() {
const shouldContinue = dispatch('notify', 'detail value', { cancelable: true });
if (shouldContinue) {
// no one called preventDefault
} else {
// a listener called preventDefault
}
}
</script>You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.
TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Special elements next svelte/store
Client-side component API • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API Client-side component API   Edit this page on GitHub On this page   On this page  Creating a componentpermalinktsconst component = new Component(options);A client-side component — that is, a component compiled with generate: 'dom' (or the generate option left unspecified) is a JavaScript class.
tsimport App from './App.svelte';
const app = new App({	target: document.body,	props: {		// assuming App.svelte contains something like		// `export let answer`:		answer: 42	}});The following initialisation options can be provided:
option
default
description
target
none
An HTMLElement or ShadowRoot to render to. This option is required
anchor
null
A child of target to render the component immediately before
props
{}
An object of properties to supply to the component
context
new Map()
A Map of root-level context key-value pairs to supply to the component
hydrate
false
See below
intro
false
If true, will play transitions on initial render, rather than waiting for subsequent state changes
Existing children of target are left where they are.
The hydrate option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the hydratable: true option. Hydration of <head> elements only works properly if the server-side rendering code was also compiled with hydratable: true, which adds a marker to each element in the <head> so that the component knows which elements it's responsible for removing during hydration.
Whereas children of target are normally left alone, hydrate: true will cause any children to be removed. For that reason, the anchor option cannot be used alongside hydrate: true.
The existing DOM doesn't need to match the component — Svelte will 'repair' the DOM as it goes.
index.jstsimport App from './App.svelte';
const app = new App({	target: document.querySelector('#server-rendered-html'),	hydrate: true});$setpermalinktscomponent.$set(props);Programmatically sets props on an instance. component.$set({ x: 1 }) is equivalent to x = 1 inside the component's <script> block.
Calling this method schedules an update for the next microtask — the DOM is not updated synchronously.
tscomponent.$set({ answer: 42 });$onpermalinktscomponent.$on(ev, callback);Causes the callback function to be called whenever the component dispatches an event.
A function is returned that will remove the event listener when called.
index.jstsconst off = component.$on('selected', (event) => {	console.log(event.detail.selection);});
off();$destroypermalinktscomponent.$destroy();Removes a component from the DOM and triggers any onDestroy handlers.
Component propspermalinktscomponent.prop;tscomponent.prop = value;If a component is compiled with accessors: true, each instance will have getters and setters corresponding to each of the component's props. Setting a value will cause a synchronous update, rather than the default async update caused by component.$set(...).
By default, accessors is false, unless you're compiling as a custom element.
index.jstsconsole.log(component.count);component.count += 1;index.tstsconsole.log(component.count);component.count += 1; previous svelte/compiler next Server-side component API
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
tick • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick REPL   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Writable stores • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores REPL  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Inline handlers • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Select multiple • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple REPL  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Nested components • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: April 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: April 2021 SvelteKit beta and new way to use slots  Dani Sandoval Apr 1 2021 On this page   On this page  Two projects that have been months (even years) in the making have made their way out into the world. SvelteKit is now in public beta and slotted components are now available in Svelte!
What's up with SvelteKit?permalinkSvelteKit - Svelte's versatile framework for building SSR, serverless applications, or SPAs - is now officially in public beta. Expect bugs! Lots more detail in the latest blog post. Want to know when 1.0 is close? Check out the milestone on github.
Want to learn more about how to get started, what's different compared to Sapper, new features and migration paths? Check out this week's episode of Svelte Radio for a deep dive with Antony, Kev and Swyx.
New in Svelte & Language Toolspermalink
Slotted components, including <svelte:fragment slot="..."> lets component consumers target specific slots with rich content (Svelte 3.35.0, Language Tools 104.5.0, check out the docs and the tutorial)
Linked editing now works for HTML in Svelte files (Language Tools, 104.6.0)
Type definitions svelte.d.ts are now resolved in order, allowing library authors to ship type definitions with their svelte components (Language Tools, 104.7.0)
vite-plugin-svelte is available for general use of Svelte in Vite. npm init @vitejs/app includes Svelte options using this plugin.
Community ShowcasepermalinkApps & Sites
Nagato is a task management tool that connects popular time tracking and to-do tools all in one place.
type-kana is a quiz app to help you learn ひらがな (hiragana) and カタカナ (katakana), the Japanese syllabaries.
Pittsburgh Steps is an interactive map of the more than 800 sets of public outdoor stairways in Pittsburgh, PA.
Music Mode Wheels is a website that displays music modes as interactive wheels.
Critical Notes helps game masters and players keep track of their roleplaying games campaigns and adventures.
Svelte Game of Life is an educational implementation of Conway's Game of Life in TypeScript + Svelte
foxql is a peer to peer full text search engine that runs on your browser.
Demos, Libraries, Tools & Components
svelte-nodegui is a way to build performant, native and cross-platform desktop applications with Node.js and Svelte
Svelte Story Format allows you to write your "stories" in Storybook using the Svelte syntax. More info in the Storybook blog
SelectMadu is a replacement for the select menu, with support for searching, multiple selections, async data loading and more.
Svelte Checklist is a customizable CheckList built with Svelte.
Suspense for Svelte is a Svelte component that implements the core idea of React's <Suspense>.
MiniRx is a RxJS Redux Store that works with Svelte and TypeScript
svelte-formly generates dynamic forms for Svelte and Sapper
7ty is a static site generator that uses Svelte, supports partial hydration of components, and uses file based routing resembling Sapper and 11ty.
Want to contribute your own component? Submit a Component to the Svelte Society site by making a PR to this file.
Starters
sveltekit-electron is a starter kit for Electron using SvelteKit
sveltekit-tailwindcss-external-api is everything you need to build a Svelte project with TailwindCSS and an external API, powered by create-svelte.
Sapper Netlify is a Sapper project that can run on a Netlify function.
Looking for a particular starter? Check out svelte-adders and a number of other template examples at the community site sveltesociety.dev
Learning Resources
How to Build a Website with Svelte and SvelteKit is a step-by-step tutorial walking through the new SvelteKit setup.
A Svelte store for prefers-reduced-motion demonstrates how to make a custom Svelte store whose value will indicate whether the user has requested reduced motion and improve accessibility.
TypeScript support in Svelte is an MDN guide to using TypeScript in Svelte.
How to merge cells with svelte-window is a walkthrough of svelte-window, a port of the popular react-window tool for merging table cells. For more on this migration, see from react-window 1:1 to svelte-window.
Easy-to-Embed Svelte Components explains how to use Rollup and a script tag to embed Svelte components anywhere.
Convert Svelte project from Rollup to Snowpack walks through a common migration pattern on video.
How to internationalize routing in Svelte & Sapper explains how leaf.cloud translated their site to Dutch.
Svelte Store: Reactive context using Svelte Store is a video answer to the question, "How do we make [a] context value reactive?"
Creating Social Sharing Images with Cloudinary and Svelte is a video from Cloudinary that demonstrates how to dynamically develop Open Graph images and Twitter Cards for a JAMstack website.
See you next month!permalinkGot something to add? Join us on Svelte Society, Reddit and Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/action • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/action   Edit this page on GitHub On this page   On this page  Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called immediately after Svelte has applied updates to the markup whenever that parameter changes.
Don't worry that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
/** @type {string} */
export let bar;
/** @type {import('svelte/action').Action<HTMLElement, string>}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />AttributespermalinkSometimes actions emit custom events and apply custom attributes to the element they are applied to. To support this, actions typed with Action or ActionReturn type can have a last parameter, Attributes:
<script>
/**
* @type {import('svelte/action').Action<HTMLDivElement, { prop: any }, { 'on:emit': (e: CustomEvent<string>) => void }>}
*/
function foo(node, { prop }) {
// the node has been mounted in the DOM
//...LOGIC
node.dispatchEvent(new CustomEvent('emit', { detail: 'hello' }));
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div on:emit={handleEmit} use:foo={{ prop: 'someValue' }} />TypespermalinkActionpermalinkActions are functions that are called when an element is created.
You can use this interface to type such actions.
The following example defines an action that only works on <div> elements
and optionally accepts a parameter which it has a default value for:
tsexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {  // ...}Action<HTMLDivElement> and Action<HTMLDivElement, undefined> both signal that the action accepts no parameters.
You can return an object with methods update and destroy from the function and type which additional attributes and events it has.
See interface ActionReturn for more details.
Docs: https://svelte.dev/docs/svelte-action
tsinterface Action<	Element = HTMLElement,	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
ts<Node extends Element>(	...args: undefined extends Parameter		? [node: Node, parameter?: Parameter]		: [node: Node, parameter: Parameter]): void | ActionReturn<Parameter, Attributes>;
ActionReturnpermalinkActions can return an object containing the two properties defined in this interface. Both are optional.
update: An action can have a parameter. This method will be called whenever that parameter changes,
immediately after Svelte has applied updates to the markup. ActionReturn and ActionReturn<undefined> both
mean that the action accepts no parameters.
destroy: Method that is called after the element is unmounted
Additionally, you can specify which additional attributes and events the action enables on the applied element.
This applies to TypeScript typings only and has no effect at runtime.
Example usage:
tsinterface Attributes {	newprop?: string;	'on:event': (e: CustomEvent<boolean>) => void;}
export function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {	// ...	return {		update: (updatedParameter) => {...},		destroy: () => {...}	};}Docs: https://svelte.dev/docs/svelte-action
tsinterface ActionReturn<	Parameter = undefined,	Attributes extends Record<string, any> = Record<		never,		any	>> {…}
tsupdate?: (parameter: Parameter) => void;
tsdestroy?: () => void;
previous svelte/easing next svelte/compiler
Svelte components • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Svelte components   Edit this page on GitHub On this page   On this page  Components are the building blocks of Svelte applications. They are written into .svelte files, using a superset of HTML.
All three sections — script, styles and markup — are optional.
<script>
// logic goes here
</script>
<!-- markup (zero or more items) goes here -->
<style>
/* styles go here */
</style><script>permalinkA <script> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules:
1. export creates a component proppermalinkSvelte uses the export keyword to mark a variable declaration as a property or prop, which means it becomes accessible to consumers of the component (see the section on attributes and props for more information).
<script>
export let foo;
// Values that are passed in as props
// are immediately available
console.log({ foo });
</script>You can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is undefined) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to undefined (rather than its initial value).
In development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined.
<script>
export let bar = 'optional default initial value';
export let baz = undefined;
</script>If you export a const, class or function, it is readonly from outside the component. Functions are valid prop values, however, as shown below.
App.svelte<script>
// these are readonly
export const thisIs = 'readonly';
/** @param {string} name */
export function greet(name) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>App.svelte<script lang="ts">
// these are readonly
export const thisIs = 'readonly';
export function greet(name: string) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>Readonly props can be accessed as properties on the element, tied to the component using bind:this syntax.
You can use reserved words as prop names.
App.svelte<script>
/** @type {string} */
let className;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>App.svelte<script lang="ts">
let className: string;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>2. Assignments are 'reactive'permalinkTo change component state and trigger a re-render, just assign to a locally declared variable.
Update expressions (count += 1) and property assignments (obj.x = y) have the same effect.
<script>
let count = 0;
function handleClick() {
// calling this function will trigger an
// update if the markup references `count`
count = count + 1;
}
</script>Because Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the tutorial.
<script>
let arr = [0, 1];
function handleClick() {
// this method call does not trigger an update
arr.push(2);
// this assignment will trigger an update
// if the markup references `arr`
arr = arr;
}
</script>Svelte's <script> blocks are run only when the component is created, so assignments within a <script> block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section.
<script>
export let person;
// this will only set `name` on component creation
// it will not update when `person` does
let { name } = person;
</script>3. $: marks a statement as reactivepermalinkAny top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the $: JS label syntax. Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed.
<script>
export let title;
export let person;
// this will update `document.title` whenever
// the `title` prop changes
$: document.title = title;
$: {
console.log(`multiple statements can be combined`);
console.log(`the current title is ${title}`);
}
// this will update `name` when 'person' changes
$: ({ name } = person);
// don't do this. it will run before the previous line
let name2 = name;
</script>Only values which directly appear within the $: block will become dependencies of the reactive statement. For example, in the code below total will only update when x changes, but not y.
App.svelte<script>
let x = 0;
let y = 0;
/** @param {number} value */
function yPlusAValue(value) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>App.svelte<script lang="ts">
let x = 0;
let y = 0;
function yPlusAValue(value: number) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>It is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that yDependent will not be updated when x is updated in the following example:
<script>
let x = 0;
let y = 0;
/** @param {number} value */
function setY(value) {
y = value;
}
$: yDependent = y;
$: setY(x);
</script>Moving the line $: yDependent = y below $: setY(x) will cause yDependent to be updated when x is updated.
If a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a let declaration on your behalf.
App.svelte<script>
/** @type {number} */
export let num;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>App.svelte<script lang="ts">
export let num: number;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>4. Prefix stores with $ to access their valuespermalinkA store is an object that allows reactive access to a value via a simple store contract. The svelte/store module contains minimal store implementations which fulfil this contract.
Any time you have a reference to a store, you can access its value inside a component by prefixing it with the $ character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate.
Assignments to $-prefixed variables require that the variable be a writable store, and will result in a call to the store's .set method.
Note that the store must be declared at the top level of the component — not inside an if block or a function, for example.
Local variables (that do not represent store values) must not have a $ prefix.
<script>
import { writable } from 'svelte/store';
const count = writable(0);
console.log($count); // logs 0
count.set(1);
console.log($count); // logs 1
$count = 2;
console.log($count); // logs 2
</script>Store contractpermalinktsstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }You can create your own stores without relying on svelte/store, by implementing the store contract:
A store must contain a .subscribe method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling .subscribe. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.
The .subscribe method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.
A store may optionally contain a .set method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a writable store.
For interoperability with RxJS Observables, the .subscribe method is also allowed to return an object with an .unsubscribe method, rather than return the unsubscription function directly. Note however that unless .subscribe synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as undefined until it does.
<script context="module">permalinkA <script> tag with a context="module" attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <script> (and the component markup) but not vice versa.
You can export bindings from this block, and they will become exports of the compiled module.
You cannot export default, since the default export is the component itself.
Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a store.
<script context="module">
let totalComponents = 0;
// the export keyword allows this function to imported with e.g.
// `import Example, { alertTotal } from './Example.svelte'`
export function alertTotal() {
alert(totalComponents);
}
</script>
<script>
totalComponents += 1;
console.log(`total number of times this component has been created: ${totalComponents}`);
</script><style>permalinkCSS inside a <style> block will be scoped to that component.
This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. svelte-123xyz).
<style>
p {
/* this will only affect <p> elements in this component */
color: burlywood;
}
</style>To apply styles to a selector globally, use the :global(...) modifier.
<style>
:global(body) {
/* this will apply to <body> */
margin: 0;
}
div :global(strong) {
/* this will apply to all <strong> elements, in any
component, that are inside <div> elements belonging
to this component */
color: goldenrod;
}
p:global(.red) {
/* this will apply to all <p> elements belonging to this
component with a class of red, even if class="red" does
not initially appear in the markup, and is instead
added at runtime. This is useful when the class
of the element is dynamically applied, for instance
when updating the element's classList property directly. */
}
</style>If you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with -global-.
The -global- part will be removed when compiled, and the keyframe then be referenced using just my-animation-name elsewhere in your code.
<style>
@keyframes -global-my-animation-name {
/* code goes here */
}
</style>There should only be 1 top-level <style> tag per component.
However, it is possible to have <style> tag nested inside other elements or logic blocks.
In that case, the <style> tag will be inserted as-is into the DOM, no scoping or processing will be done on the <style> tag.
<div>
<style>
/* this style tag will be inserted as-is */
div {
/* this will apply to all `<div>` elements in the DOM */
color: red;
}
</style>
</div> previous Introduction next Basic markup
Streaming, snapshots, and other new features since SvelteKit 1.0
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Streaming, snapshots, and other new features since SvelteKit 1.0 Exciting improvements in the latest version of SvelteKit  Geoff Rich and   Rich Harris Feb 21 2023 On this page   On this page  The Svelte team has been hard at work since the release of SvelteKit 1.0. Let’s talk about some of the major new features that have shipped since launch: streaming non-essential data, snapshots, and route-level config.
Stream non-essential data in load functionspermalinkSvelteKit uses load functions to retrieve data for a given route. When navigating between pages, it first fetches the data, and then renders the page with the result. This could be a problem if some of the data for the page takes longer to load than others, especially if the data isn’t essential – the user won’t see any part of the new page until all the data is ready.
There were ways to work around this. In particular, you could fetch the slow data in the component itself, so it first renders with the data from load and then starts fetching the slow data. But this was not ideal: the data is even more delayed since you don’t start fetching until the client renders, and you’re also having to break SvelteKit’s load convention.
Now, in SvelteKit 1.8, we have a new solution: you can return a nested promise from a server load function, and SvelteKit will start rendering the page before it resolves. Once it completes, the result will be streamed to the page.
For example, consider the following load function:
tsexport const load: PageServerLoad = () => {Cannot find name 'PageServerLoad'.2304Cannot find name 'PageServerLoad'.	return {		post: fetchPost(),Cannot find name 'fetchPost'.2304Cannot find name 'fetchPost'.		streamed: {			comments: fetchComments()Cannot find name 'fetchComments'.2304Cannot find name 'fetchComments'.		}	};};SvelteKit will automatically await the fetchPost call before it starts rendering the page, since it’s at the top level. However, it won’t wait for the nested fetchComments call to complete – the page will render and data.streamed.comments will be a promise that will resolve as the request completes. We can show a loading state in the corresponding +page.svelte using Svelte’s await block:
<script lang="ts">
import type { PageData } from './$types';
export let data: PageData;
</script>
<article>
{data.post}
</article>
{#await data.streamed.comments}
Loading...
{:then value}
<ol>
{#each value as comment}
<li>{comment}</li>
{/each}
</ol>
{/await}There is nothing unique about the property streamed here – all that is needed to trigger the behavior is a promise outside the top level of the returned object.
SvelteKit will only be able to stream responses if your app’s hosting platform supports it. In general, any platform built around AWS Lambda (e.g. serverless functions) will not support streaming, but any traditional Node.js server or edge-based runtime will. Check your provider’s documentation for confirmation.
If your platform does not support streaming, the data will still be available, but the response will be buffered and the page won’t start rendering until all data has been fetched.
How does it work?permalinkIn order for data from a server load function to get to the browser, we have to serialize it. SvelteKit uses a library called devalue, which is like JSON.stringify but better — it can handle values that JSON can't (like dates and regular expressions), it can serialize objects that contain themselves (or that exist multiple times in the data) without breaking identity, and it protects you against XSS vulnerabilities.
When we server-render a page, we tell devalue to serialize promises as function calls that create a deferred. This is a simplified version of the code SvelteKit adds to the page:
tsconst deferreds = new Map();
window.defer = (id) => {Property 'defer' does not exist on type 'Window & typeof globalThis'.Parameter 'id' implicitly has an 'any' type.23397006Property 'defer' does not exist on type 'Window & typeof globalThis'.Parameter 'id' implicitly has an 'any' type.	return new Promise((fulfil, reject) => {		deferreds.set(id, { fulfil, reject });	});};
window.resolve = (id, data, error) => {Property 'resolve' does not exist on type 'Window & typeof globalThis'.Parameter 'id' implicitly has an 'any' type.Parameter 'data' implicitly has an 'any' type.Parameter 'error' implicitly has an 'any' type.2339700670067006Property 'resolve' does not exist on type 'Window & typeof globalThis'.Parameter 'id' implicitly has an 'any' type.Parameter 'data' implicitly has an 'any' type.Parameter 'error' implicitly has an 'any' type.	const deferred = deferreds.get(id);	deferreds.delete(id);
if (error) {		deferred.reject(error);	} else {		deferred.fulfil(data);	}};
// devalue converts your data into a JavaScript expressionconst data = {	post: {		title: 'My cool blog post',		content: '...'	},	streamed: {		comments: window.defer(1)Property 'defer' does not exist on type 'Window & typeof globalThis'.2339Property 'defer' does not exist on type 'Window & typeof globalThis'.	}};This code, along with the rest of the server-rendered HTML, is sent to the browser immediately, but the connection is kept open. Later, when the promise resolves, SvelteKit pushes an additional chunk of HTML to the browser:
<script>
window.resolve(1, {
data: [{ comment: 'First!' }]
});
</script>For client-side navigation, we use a slightly different mechanism. Data from the server is serialized as newline delimited JSON, and SvelteKit reconstructs the values — using a similar deferred mechanism — with devalue.parse:
ts// this is generated immediately — note the ["Promise",1]...[{"post":1,"streamed":4},{"title":2,"content":3},"My cool blog post","...",{"comments":5},["Promise",6],1]
// ...then this chunk is sent to the browser once the promise resolves[{"id":1,"data":2},1,[3],{"comment":4},"First!"]Because promises are natively supported in this way, you can put them anywhere in the data returned from load (except at the top level, since we automatically await those for you), and they can resolve with any type of data that devalue supports — including more promises!
One caveat: this feature needs JavaScript. Because of this, we recommend that you only stream in non-essential data so that the core of the experience is available to all users.
For more on this feature, see the documentation. You can see a demo at sveltekit-on-the-edge.vercel.app (the location data is artificially delayed and streamed in) or deploy your own on Vercel, where streaming is supported in both Edge Functions and Serverless Functions.
We're grateful for the inspiration from prior implementations of this idea including Qwik, Remix, Solid, Marko, React and many others.
SnapshotspermalinkPreviously in a SvelteKit app, if you navigated away after starting to fill out a form, going back wouldn’t restore your form state – the form would be recreated with its default values. Depending on the context, this can be frustrating for users. Since SvelteKit 1.5, we have a built-in way to address this: snapshots.
Now, you can export a snapshot object from a +page.svelte or +layout.svelte. This object has two methods: capture and restore. The capture function defines what state you want to store when the user leaves the page. SvelteKit will then associate that state with the current history entry. If the user navigates back to the page, the restore function will be called with the state you previously had set.
For example, here is how you would capture and restore the value of a textarea:
<script lang="ts">
import type { Snapshot } from './$types';
let comment = '';
export const snapshot: Snapshot = {
capture: () => comment,
restore: (value) => (comment = value)
};
</script>
<form method="POST">
<label for="comment">Comment</label>
<textarea id="comment" bind:value={comment} />
<button>Post comment</button>
</form>While things like form input values and scroll positions are common examples, you can store any JSON-serializable data you like in a snapshot. The snapshot data is stored in sessionStorage, so it will persist even when the page is reloaded, or if the user navigates to a different site entirely. Because it’s in sessionStorage, you won’t be able to access it during server-side rendering.
For more, see the documentation.
Route-level deployment configurationpermalinkSvelteKit uses platform-specific adapters to transform your app code for deployment to production. Until now, you had to configure your deployment on an app-wide level. For instance, you could either deploy your app as an edge function or a serverless function, but not both. This made it impossible to take advantage of the edge for parts of your app – if any route needed Node APIs, then you couldn’t deploy any of it to the edge. The same is true for other aspects of deployment configuration, such as regions and allocated memory: you had to choose one value that applied to every route in your entire app.
Now, you can export a config object in your +server.js, +page(.server).js and +layout(.server).js files to control how those routes are deployed. Doing so in a +layout.js will apply the configuration to all child pages. The type of config is unique to each adapter, since it depends on the environment you’re deploying to.
tsimport type { Config } from 'some-adapter';Cannot find module 'some-adapter' or its corresponding type declarations.2307Cannot find module 'some-adapter' or its corresponding type declarations.
export const config: Config = {	runtime: 'edge'};Configs are merged at the top level, so you can override values set in a layout for pages further down the tree. For more details, see the documentation.
If you deploy to Vercel, you can take advantage of this feature by installing the latest versions of SvelteKit and your adapter. This will require a major upgrade to your adapter version, since adapters supporting route-level config require SvelteKit 1.5 or later.
npm i @sveltejs/kit@latest
npm i @sveltejs/adapter-auto@latest # or @sveltejs/adapter-vercel@latestFor now, only the Vercel adapter implements route-specific config, but the building blocks are there to implement this for other platforms. If you’re an adapter author, see the changes in the PR to see what is required.
Incremental static regeneration on VercelpermalinkRoute-level config also unlocked another much-requested feature – you can now use incremental static regeneration (ISR) with SvelteKit apps deployed to Vercel. ISR provides the performance and cost advantages of prerendered content with the flexibility of dynamically rendered content.
To add ISR to a route, include the isr property in your config object:
tsexport const config = {	isr: {		// see Vercel adapter docs for the required options	}};And much more...permalink
The OPTIONS method is now supported in +server.js files
Better error messages when you export something that belongs in a different file or forget to put a slot in your +layout.svelte.
You can now access public environment variables in app.html
A new text helper for creating responses
And a ton of bug fixes – see the changelog for the full release notes.
Thank you to everyone who has contributed and uses SvelteKit in their projects. We’ve said it before, but Svelte is a community project, and it wouldn’t be possible without your feedback and contributions.
Spread props • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props REPL   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
The use directive • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive REPL  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: May 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: May 2022 Dynamically switch between HTML element types with `<svelte:element>`  Dani Sandoval May 1 2022 On this page   On this page  With yesterday's Svelte Summit behind us, we've got a lot of news to share! Check out all of the recordings on the Svelte Society YouTube Channel and the rest of this month's updates below...
What's new in Sveltepermalink
The <svelte:element> element lets you render an element of a dynamically specified type. This is useful, for example, when rendering rich text content from a CMS. Check out the docs or the tutorial for more info (3.47.0)!
Language Tools updatespermalink
svelte:element and sveltekit:reload are now supported
Invalid Svelte import paths will now be automatically detected - see PR for getting back the old behavior (#1448)
source.sortImports lets you sort imports without deleting unused imports (#1338)
Hovering over HTML attributes will now show HTML hover info instead of the TS hover info - resulting in much more useful information (#1447)
In VS Code, you can now wrap existing blocks of code in control flow tags using the Insert Snippet command (#1373)
What's new in SvelteKitpermalink
Files and directories can now be named __tests__ and __test__ in the routes directory (#4438)
Netlify Edge Functions (#4657) and the Vercel build output API (#4663) are now supported
Custom load dependencies, array of strings representing URLs the page depends on, are now available when loading routes (Docs, #4536)
Breaking Changes
Validators are now called "matchers" (Docs, #4358)
__layout.reset has been replaced by named layouts - which have much configurability for shared layout elements (Docs, #4388)
Prerendering is now skipped for rel="external" links (#4545)
maxage is now cache in LoadOutput (#4690)
Community ShowcasepermalinkApps & Sites built with Svelte
polySpectra AR lets you prototype faster 3D Printing with seamless AR file handoffs (video demo)
Pixel Art Together is a free multiplayer pixel art editor powered by Liveblocks
Tooling Manager lets you compare your JavaScript tech stack against industry standard boilerplates
Easy Portfolio generates a portfolio based on your GitHub profile
FLOAT is an attendance tracking program for events
The Coin Perspective is a cryptocurrency price tracker and portfolio management tool
Locutionis is a small, online reference of figures of speech (en français)
ASM Editor is an all in one web editor for M68K and MIPS
Otium is a free and open source book manager and bookshelf organiser, that helps you managing your books and the ones you would like to read
Sinwaver is an SVG sine wave generator
Want to contribute to a modern SvelteKit website? Help build the Svelte Society site!
Learning Resources
To Read
4 tips for cleaner Svelte components by Geoff Rich
Building a Clubhouse clone with Svelte and 100ms By Seun Taiwo
SvelteKit uvu Testing: Fast Component Unit Tests by Rodney Lab
SvelteKit JWT authentication tutorial by pilcrowOnPaper
Converting a Rollup-based Svelte SPA to SvelteKit by Simon H
Add Commitint, Commitizen, Standard Version, and Husky to SvelteKit Project by David Peng
To Watch or Hear
Rich Harris - The Road to SvelteKit 1.0 (Svelte Society NYC) by Svelte Society
Svelte Fundamentals - Intro to Svelte by Coding Cat
Svelte Components Using Custom Markdown Renderers - Weekly Svelte by LevelUpTuts
Implementing {@const} in if block by lihautan
Svelte and Contributing to Open-Source with Geoff Rich by 20minJS
Libraries, Tools & Components
KitDocs is a documentation integration for SvelteKit - like VitePress for Svelte.
Svelte Copy is a click/tap-to-copy library that makes it easy to copy to the clipboard
Svend3r provides beautiful visualizations that harness the power of D3 to bring your data to life while abstracting away its imperative-style code
Svelte Hamburgers is the easy to use Hamburger menu component for Svelte
Svelte Droplet is a file dropzone for Svelte
Svelte MP3 is a light blazingly fast yet simple minimalistic audio player for Svelte
SvelteUI is a component library for building fully functional & accessible web applications faster than ever
svelte-spotlight is a headless spotlight component to help you build your site's global search box in minutes
svelte-pdf-simple is a simple svelte library for displaying PDFs and giving you all the control
persistent-svelte-store is a generic persistent writable store, built from scratch in TypeScript according to the Svelte store contract
svelte-exmarkdown is Svelte component to render markdown dynamically
Bookit is a storybook-like component rendering environment - finely tuned to work directly within your SvelteKit projects
Join us on Reddit or Discord to continue the conversation.
If you'd prefer to join us in person, Svelte Summit is finally transitioning properly into the real world. Come join us for two days of awesome Svelte content! Get your tickets now!
See y'all next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Numeric inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs REPL  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
setContext and getContext • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Each block bindings • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings REPL  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Counter • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Component directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Component directives   Edit this page on GitHub On this page   On this page  on:eventnamepermalinkon:eventname={handler}Components can emit events using createEventDispatcher or by forwarding DOM events.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<!-- programmatic dispatching -->
<button on:click={() => dispatch('hello')}> one </button>
<!-- declarative event forwarding -->
<button on:click> two </button>Listening for component events looks the same as listening for DOM events:
<SomeComponent on:whatever={handler} />As with DOM events, if the on: directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it.
<SomeComponent on:whatever />--style-propspermalink--style-props="anycssvalue"You can also pass styles as props to components for the purposes of theming, using CSS custom properties.
Svelte's implementation is essentially syntactic sugar for adding a wrapper element. This example:
<Slider bind:value min={0} --rail-color="black" --track-color="rgb(0, 0, 255)" />Desugars to this:
<div style="display: contents; --rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</div>Note: Since this is an extra <div>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
For SVG namespace, the example above desugars into using <g> instead:
<g style="--rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</g>Note: Since this is an extra <g>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
Svelte's CSS Variables support allows for easily themeable components:
<style>
.potato-slider-rail {
background-color: var(--rail-color, var(--theme-color, 'purple'));
}
</style>So you can set a high-level theme color:
/* global.css */
html {
--theme-color: black;
}Or override it at the consumer level:
<Slider --rail-color="goldenrod" />bind:propertypermalinkbind:property={variable}You can bind to component props using the same syntax as for elements.
<Keypad bind:value={pin} />While Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using bind:property allows changes to the property from within the component to flow back up out of the component.
bind:thispermalinkbind:this={component_instance}Components also support bind:this, allowing you to interact with component instances programmatically.
<ShoppingCart bind:this={cart} />
<button on:click={() => cart.empty()}> Empty shopping cart </button>
Note that we can't do {cart.empty} since cart is undefined when the button is first rendered and throws an error.
previous Element directives next Special elements
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Reactive assignments • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Each blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks REPL  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Keyed each blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: October 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: October 2023 Reactions to Runes and SvelteKit +server fallbacks  Dani Sandoval Oct 1 2023 On this page   On this page  Svelte 5 isn't out yet (you can, however, preview it now), but that doesn't mean we don't get a sneak peek! Most notably are Runes - a simpler way to manage reactive variables in Svelte code. There's lots of links the showcase section for deeper dives on all things Runes, but let's talk about what else been released this month...
What's new in Svelte & Language Toolspermalink
Svelte 4.2.1 was released with a bunch of fixes to HTML, CSS and sourcemap compilation
The latest version of the Svelte language tools enhances component references in the "Find All References" command, fixes a persistent issue with automated types going missing after restarting a project and adds fallback handling to auto-types (like those found in SvelteKit's +server.js files)
What's new in SvelteKitpermalink
+server.js now has a catch-all handler that handles all unimplemented valid server requests. Just export a fallback function! (1.25.0, Docs, #9755)
That's all for the new features! If you're looking for other patches and performance updates, check out the SvelteKit CHANGELOG. You can also find adapter-specific CHANGELOGs in each of the adapter directories.
Community ShowcasepermalinkSvelte Summit Fall is happening on Nov 11, 2023. The 7th Virtual Svelte Conference is open for proposals until October 15 - anyone can submit!
Threlte is throwing a hackathon (motion warning for the landing page - it will respect Reduce Motion settings). The kickoff event is on Sunday, 15 October 2023 16:00 UTC.
Apps & Sites built with Svelte
game-of-life-svelte is a Conway's Game of Life implementation using SvelteKit tech
Limey is an easy-to-use website builder for simple sites and landing pages
Appwrite's new landing page is now written with SvelteKit (previously covered was their console UI in Svelte)
PlaceIt is a game about numbers and places
Sveltroid is a fan-made recreation of Metroid Prime: Remastered (code)
Bolighub is a Denmark housing search portal
Dithering is a tool to dither photos with plenty of options
Rocky Mountain Slam is an interactive map to follow Jason Heyn as he attempts to complete the first ever Rocky Mountain Slam (code)
Learning Resources
Featuring Svelte Contributors and Ambassadors
Svelte 5: Introducing Runes... with Rich Harris and its follow-up: Svelte 5 runes: what's the deal with getters and setters?
Conditionally stream data in SvelteKit by Geoff Rich
Svelte Runes Change How Reactivity Works In Svelte, Make A 3D GitHub Skyline With Svelte To Flex On Your Peers, Simple Page Transitions Using The View Transitions API With SvelteKit and Using JavaScript Libraries With Svelte Is Easy by Joy of Code
Modern Web Podcast S11E2 - Exploring Svelte, Open Source, and Discord Bots with Willow (GHOST)
We are back! Svelte 5, Transitions, What's New?! by Svelte Radio
This Week in Svelte:
2023 September 1 - SvelteKit 1.24.0, View Transitions API, AbortController
2023 September 8 - SvelteKit 1.24.1, Capacitor walkthrough, reusing prop types
2023 September 15 - SvelteKit 1.25.0, deserialize form data, magic is coming
2023 September 22 - Svelte 5 Runes!
To Watch
RUNES - Coming in Svelte v5 | My Take by Coding Garden
Don't Sleep on Svelte 5 and Level Up Your Svelte Stores by Huntabyte
Introduction To Svelte Runes (Every Svelte Rune Explained) by Cooper Codes
Svelte Runes: Awesome or Awful? by Jack Herrington
Let Build A Youtube Clone With SvelteKit (Svelte, Tailwind Css, RapidApi, Shadcn Svelte, Axios, etc) by Lawal Adebola
To Read
Create the Perfect Sharable Rune in Svelte by Jonathan Gamble
You Don't Need to "Learn" Svelte by KaviiSuri
Build Websites with Prismic and SvelteKit by Angelo Ashmore
How to embed Svelte apps inside PHP? by Justin Ahinon
Using Web Browser's Indexed DB in SvelteKit by Shivam Meena
Integrate Storybook in Svelte: Doing it the Svelte-way by Oscar Dominguez
The Sveltekit tutorial: Part 1 | What, why, and how? by Suyashtnt
Libraries, Tools & Components
KitForStartups is an Open Source SvelteKit SaaS boilerplate
SuperNavigation is a mobile-like navigation UX for the web
skeleton-material-theme is a Material theme for the Skeleton UI library
better-i18n-for-svelte is a SEO focused library for multi-language SvelteKit sites
uico is a Tailwind plugin that provides utility classes for basic UI elements
svelte-maskify is a action wrapper for AlpineJS masks
sveltekit-capacitor is a template for building a SvelteKit SPA with Capacitor
router-gen.ts is a type-safe router for SvelteKit
That's it for this month! Feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
<svelte:window> bindings • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings REPL  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Group inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs REPL  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Named exports • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Zero-effort type safety
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Zero-effort type safety More convenience and correctness, less boilerplate  Simon Holthausen Mar 9 2023 On this page   On this page  By sprinkling type annotations into your SvelteKit apps, you can get full type safety across the network — the data in your page has a type that's inferred from the return values of the load functions that generated that data, without you having to explicitly declare anything. It's one of those things that you come to wonder how you ever lived without.
But what if we didn't even need the annotations? Since load and data are part of the framework, can't the framework type them for us? This is, after all, what computers are for — doing the boring bits so we can focus on the creative stuff.
As of today, yes: it can.
If you're using VSCode, just upgrade the Svelte extension to the latest version, and you'll never have to annotate your load functions or data props again. Extensions for other editors can also use this feature, as long as they support the Language Server Protocol and TypeScript plugins. It even works with the latest version of our CLI diagnostics tool svelte-check!
Before we dive in, let's recap how type safety works in SvelteKit.
Generated typespermalinkIn SvelteKit, you get the data for a page in a load function. You could type the event by using ServerLoadEvent from @sveltejs/kit:
ts// src/routes/blog/[slug]/+page.server.tsimport type { ServerLoadEvent } from '@sveltejs/kit';
export async function load(event: ServerLoadEvent) {	return {		post: await database.getPost(event.params.post)	};}This works, but we can do better. Notice that we accidentally wrote event.params.post, even though the parameter is called slug (because of the [slug] in the filename) rather than post. You could type params yourself by adding a generic argument to ServerLoadEvent, but that's brittle.
This is where our automatic type generation comes in. Every route directory has a hidden $types.d.ts file with route-specific types:
// src/routes/blog/[slug]/+page.server.ts
import type { ServerLoadEvent } from '@sveltejs/kit';
import type { PageServerLoadEvent } from './$types';
export async function load(event: PageServerLoadEvent) {
return {
post: await database.getPost(event.params.post)
post: await database.getPost(event.params.slug)
};
}
This reveals our typo, as it now errors on the params.post property access. Besides narrowing the parameter types, it also narrows the types for await event.parent() and the data passed from a server load function to a universal load function. Notice that we’re now using PageServerLoadEvent, to distinguish it from LayoutServerLoadEvent.
After we have loaded our data, we want to display it in our +page.svelte. The same type generation mechanism ensures that the type of data is correct:
<!-- src/routes/blog/[slug]/+page.svelte -->
<script lang="ts">
import type { PageData } from './$types';
export let data: PageData;
</script>
<h1>{data.post.title}</h1>
<div>{@html data.post.content}</div>Virtual filespermalinkWhen running the dev server or the build, types are auto-generated. Thanks to the file-system based routing, SvelteKit is able to infer things like the correct parameters or parent data by traversing the route tree. The result is outputted into one $types.d.ts file for each route, which looks roughly like this:
ts// $types.d.tsimport type * as Kit from '@sveltejs/kit';
// types inferred from the routing treetype RouteParams = { slug: string };type RouteId = '/blog/[slug]';Type 'string' does not satisfy the constraint 'void | Record<string, any>'.2344Type 'string' does not satisfy the constraint 'void | Record<string, any>'.type PageParentData = {};
// PageServerLoad type extends the generic Load type and fills its generics with the info we haveexport type PageServerLoad = Kit.ServerLoad<RouteParams, PageParentData, RouteId>;
// The input parameter type of the load functionNamespace '"@sveltejs/kit"' has no exported member 'ReturnType'.2694Namespace '"@sveltejs/kit"' has no exported member 'ReturnType'.export type PageServerLoadEvent = Parameters<PageServerLoad>[0];Cannot find module '../src/routes/blog/[slug]/+page.server.js' or its corresponding type declarations.2307Cannot find module '../src/routes/blog/[slug]/+page.server.js' or its corresponding type declarations.
// The return type of the load functionexport type PageData = Kit.ReturnType<	typeof import('../src/routes/blog/[slug]/+page.server.js').load>;We don't actually write $types.d.ts into your src directory — that would be messy, and no-one likes messy code. Instead, we use a TypeScript feature called rootDirs, which lets us map ‘virtual’ directories to real ones. By setting rootDirs to the project root (the default) and additionally to .svelte-kit/types (the output folder of all the generated types) and then mirroring the route structure inside it we get the desired behavior:
// on disk:
.svelte-kit/
├ types/
│ ├ src/
│ │ ├ routes/
│ │ │ ├ blog/
│ │ │ │ ├ [slug]/
│ │ │ │ │ └ $types.d.ts
src/
├ routes/
│ ├ blog/
│ │ ├ [slug]/
│ │ │ ├ +page.server.ts
│ │ │ └ +page.svelte
// what TypeScript sees:
src/
├ routes/
│ ├ blog/
│ │ ├ [slug]/
│ │ │ ├ $types.d.ts
│ │ │ ├ +page.server.ts
│ │ │ └ +page.svelteType safety without typespermalinkThanks to the automatic type generation we get advanced type safety. Wouldn't it be great though if we could just omit writing the types at all? As of today you can do exactly that:
// src/routes/blog/[slug]/+page.server.ts
import type { PageServerLoadEvent } from './$types';
export async function load(event: PageServerLoadEvent) {
export async function load(event) {
return {
post: await database.getPost(event.params.post)
};
}
<!-- src/routes/blog/[slug]/+page.svelte -->
<script lang="ts">
import type { PageData } from './$types';
export let data: PageData;
export let data;
</script>
While this is super convenient, this isn't just about that. It's also about correctness: When copying and pasting code it's easy to accidentally get PageServerLoadEvent mixed up with LayoutServerLoadEvent or PageLoadEvent, for example — similar types with subtle differences. Svelte's major insight was that by writing code in a declarative way we can get the machine to do the bulk of the work for us, correctly and efficiently. This is no different — by leveraging strong framework conventions like +page files, we can make it easier to do the right thing than to do the wrong thing.
This works for all exports from SvelteKit files (+page, +layout, +server, hooks, params and so on) and for data, form and snapshot properties in +page/layout.svelte files.
To use this feature with VS Code install the latest version of the Svelte for VS Code extension. For other IDEs, use the latest versions of the Svelte language server and the Svelte TypeScript plugin. Beyond the editor, our command line tool svelte-check also knows how to add these annotations since version 3.1.1.
How does it work?permalinkGetting this to work required changes to both the language server (which powers the IntelliSense in Svelte files) and the TypeScript plugin (which makes TypeScript understand Svelte files from within .ts/js files). In both we auto-insert the correct types at the correct positions and tell TypeScript to use our virtual augmented file instead of the original untyped file. That in combination with mapping the generated and original positions back and forth gives the desired result. Since svelte-check reuses parts of the language server under the hood, it gets that feature for free without further adjustments.
We'd like to thank the Next.js team for inspiring this feature.
What's nextpermalinkFor the future we want to look into making even more areas of SvelteKit type-safe — links for example, be it in your HTML or through programmatically calling goto.
TypeScript is eating the JavaScript world — and we're here for it! We care deeply about first class type safety in SvelteKit, and we provide you the tools to make the experience as smooth as possible — one that also scales beautifully to larger Svelte code bases — regardless of whether you use TypeScript or typed JavaScript through JSDoc.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: November 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: November 2023 Svelte Summit on Nov 11 and better DevEx for all!  Dani Sandoval Nov 1 2023 On this page   On this page  Mark your calendars! Svelte Summit Fall is on November 11th. Join us on YouTube and in the Discord for hours of Svelte-focused fun 🎥
Every month, maintainers within the Svelte ecosystem fix bugs, improve performance and bring new features to Svelte, SvelteKit and the tooling around them. This month's releases brings an improved developer experience with better block folding, inferred types and configuration for use:enhance.
Let's take a closer look 👀...
What's new in Svelte & Language Toolspermalink
Svelte 4.2.2 cleans up a few element-specific features (Release Notes)
Extensions 107.12.0 improves block folding for functions, if statements and more (Release Notes, PR)
What's new in SvelteKitpermalink
Route parameter types will now be inferred from the applicable matcher's guard check (kit@1.26.0, Docs, #10755)
The new invalidateAll boolean option lets you turn on and off the invalidateAll() form function within the enhance callback (kit@1.27.0, Docs, #9476)
The output of the project creation wizard will now reflect which package manager you're using (create-svelte@5.1.1, #10811)
For a complete list of bug fixes and performance updates, check out the SvelteKit CHANGELOG. You can also find adapter-specific CHANGELOGs in each of the adapter directories.
Community ShowcasepermalinkApps & Sites built with Svelte
4THSEX is a creative website for the producer / creative director with the same name
Syntax.fm has been redesigned from the ground up with SvelteKit
GitContext is an early-access tool to improve the process of reviewing code
Lunier is a site to browse and buy handbags (site is in French)
Feldman Architecture is a portfolio set for the architects of the same name
Formulator is a faster way to iterate, experiment, & build user interfaces
Dwarf is a relaxed domain name marketplace for domain hoarders
Teek is a simple, free time tracker for developers with an hourly rate
Sessionic is a web extension to easily save browser sessions and manage them
Pilink is a "suckless" link shortener
Learning Resources
Featuring Svelte Contributors and Ambassadors
Wolfensvelte 3D and the Svelte Language Server in the Browser with Jason Bradnick by Svelte Radio
This Is How You Sveltify Any JavaScript Library, Svelte Actions Make Svelte The Best JavaScript Framework and How Svelte Stores Make State Management Easy by Joy of Code
Svelte Society Talks
Svelte Society - San Diego October 2023
Daniils Petrovs - SvelteKit: From landing page to offline PWAs
Lukas Stracke - State of Sentry for Svelte 2023
This Week in Svelte:
2023 September 29 - Svelte 4.2.1, SvelteKit 1.25.1, Runes FAQ, data mocking
2023 October 6 - Ordering attribs, client hints, async custom store with runes
2023 October 13 - SvelteKit 1.25.2, How Melt UI works
2023 October 20 - Kit 1.26.0, Svelte 4.2.2, dynamically-loaded components
To Watch
SvelteKit & TailwindCSS Tutorial – Build & Deploy a Web Portfolio by freeCodeCamp.org
Why SvelteKit? [Intro to SvelteKit 1.0, part 1] by Jeffrey Codes Javascript
Build an AI Chatbot - it's that easy?! by Simon Prammer
Introduction to SvelteKit | FREE 5 HOUR SVELTE WORKSHOP 2023 | Lessons + Coding Exercises by This Dot Media
To Read
What we learned from migrating our web app to SvelteKit by Marten Sigwart
SvelteKit Tutorial: Build a Website From Scratch by Prismic has been updated based on the latest SvelteKit features
Svelte by Example is a succinct, gentle introduction to Svelte & SvelteKit
The Comprehensive Guide to Locals in SvelteKit by Stanislav Khromov
How to build a blog, the hard way by Curtis Parfitt-Ford
How to make a full-content RSS feed for your SvelteKit blog by Kyle Nazario
A simple hash-routed dialog system with Svelte by Jamie Perkins
When and Where to Render and One Less Reason to Build a Native App by Ross Robino
Open Neovim From Your Browser - Integrating nvim with Svelte’s Inspector by Theo Steiner
Libraries, Tools & Components
Work to support SvelteKit in Deno is ongoing and Deno now supports creating SvelteKit projects out-of-the-box!
Purplix is an open-source collection of tools dedicated to user privacy and creating trust with your audience
Obra Icons is a simple, consistent set of icons, perfect for user interfaces
svelte-chat-langchain is a minimal version of "Chat LangChain" implemented with SvelteKit, Vercel AI SDK and of course Langchain
Cloudinary just released an official Svelte SDK (GitHub)
That's it for this month! Feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
bind:this={canvas} • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Else blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks REPL  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
404
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:window> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Slot props • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: July 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: July 2021 Keeping cool with fixes, TypeScript tooling and tonnes of new features  Dani Sandoval Jul 1 2021 On this page   On this page  As the northern hemisphere heats up, Svelte has stayed cool with lots of performance and bug fixes, better TypeScript support, and lots of new components & tools from around the ecosystem. Let's take a peek 👀
New in SvelteKitpermalink
adapter-node now precompresses assets using gzip & brotli (#1693)
Support for TypeScript transpilation has been added to the svelte-kit package tooling (#1633)
Improved caching defaults in adapter-node (#1416)
Allow configuring Rollup output options (#1572)
Fixed usage of SSL with HMR (#1517)
Features & bug fixes from around svelte/*permalink
Svelte 3.38.3 (released June 22) includes a bunch of performance and bug fixes - including hydration optimizations, this preservation in bubbled events, and more!
The latest language tools releases added support for prop renaming from outside of a component, PostCSS syntax grammar, and a .d.ts output target in svelte2tsx which can be used to create type definitions from Svelte files.
Also in language tools, some long-awaited experimental features for enhanced TypeScript support were added - including explicitly typing all possible component events or slots, and using generics. Have a look at the RFC for more details and leave feedback in this issue if you are using it.
svelte-scroller got some quality-of-life fixes in 2.0.7 - fixing an initial width bug and updating its index more conservatively
Coming soon to Sveltepermalink
Constants in markup (RFC): Adds a new {@const ...} tag that defines a local constant (PR)
Community ShowcasepermalinkApps & Sites
SvelteThemes is a curated list of Svelte themes and templates built using svelte, sveltekit, elderjs, routify etc.
Beatbump is an alternative frontend for YouTube Music created using Svelte/SvelteKit.
Sveltuir is an app help you memorize the guitar fretboard
Educational Content
Svelte Radio: A Jolly Good Svelte Summer is a conversation about what's new in Svelte and a celebration of Svelte Radio's 1-year anniversary
Class properties in Svelte is a refresher on the power of class for developers switching over to Svelte from React
Sveltekit Tutorial for Beginners is a video playlist for learning SvelteKit by WebJeda
How To Cache Dynamic Pages On Demand With A Service Worker In SvelteKit walks through the power of service workers when used within SvelteKit for on-demand caching
Vue vs Svelte: Comparing Framework Internals dives deep into the differences between Vue and Svelte from the inside out
Setting up a development environment for SvelteKit with Docker and Docker Compose walks through how to use Docker to create reusable development environments, no matter what kind of device you run your code on
Scalable Scripts released three videos this month documenting how to deploy dockerized Svelte Apps to AWS, Azure and Google Cloud
Render Katex with Svelte from zero to hero demonstrates how to implement Katex in a Svelte project
Using Custom Elements in Svelte shows some of the quirks to look out for when using custom elements in a Svelte site
Libraries, Tools & Components
svelte-pipeline provides custom JavaScript contexts and the Svelte Compiler as Svelte Stores, for REPLs, Editors, etc.
Sveltotron is an Electron-based app made to inspect your Svelte app
svelte-qr-reader-writer is a Svelte component that helps read and write data from QR codes
svelte-stack-router Aims to make Svelte apps feel more native by routing with Stacks
svelte-typed-context provides an interface which, when provided to getContext or setContext, allows for stricter types
svelte-modals is a simple, flexible, zero-dependency modal manager for Svelte
Want to contribute a component? Interested in helping make Svelte's presence on the web better? Submit a Component to the Svelte Society site by making a PR to this file or check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
See you next month!permalinkWant more updates? Join us on Reddit or Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/animate • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/animate   Edit this page on GitHub On this page   On this page  The svelte/animate module exports one function for use with Svelte animations.
flippermalink
tsfunction flip(	node: Element,	{		from,		to	}: {		from: DOMRect;		to: DOMRect;	},	params?: FlipParams): AnimationConfig;
animate:flip={params}The flip function calculates the start and end position of an element and animates between them, translating the x and y values. flip stands for First, Last, Invert, Play.
flip accepts the following parameters:
delay (number, default 0) — milliseconds before starting
duration (number | function, default d => Math.sqrt(d) * 120) — see below
easing (function, default cubicOut) — an easing function
duration can be provided as either:
a number, in milliseconds.
a function, distance: number => duration: number, receiving the distance the element will travel in pixels and returning the duration in milliseconds. This allows you to assign a duration that is relative to the distance travelled by each element.
You can see a full example on the animations tutorial.
<script>
import { flip } from 'svelte/animate';
import { quintOut } from 'svelte/easing';
let list = [1, 2, 3];
</script>
{#each list as n (n)}
<div animate:flip={{ delay: 250, duration: 250, easing: quintOut }}>
{n}
</div>
{/each}TypespermalinkAnimationConfigpermalink
tsinterface AnimationConfig {…}
tsdelay?: number;
tsduration?: number;
tseasing?: (t: number) => number;
tscss?: (t: number, u: number) => string;
tstick?: (t: number, u: number) => void;
FlipParamspermalink
tsinterface FlipParams {…}
tsdelay?: number;
tsduration?: number | ((len: number) => number);
tseasing?: (t: number) => number;
previous svelte/transition next svelte/easing
import.meta.url • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Logic blocks • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Logic blocks   Edit this page on GitHub On this page   On this page  {#if ...}permalink{#if expression}...{/if}{#if expression}...{:else if expression}...{/if}{#if expression}...{:else}...{/if}Content that is conditionally rendered can be wrapped in an if block.
{#if answer === 42}
<p>what was the question?</p>
{/if}Additional conditions can be added with {:else if expression}, optionally ending in an {:else} clause.
{#if porridge.temperature > 100}
<p>too hot!</p>
{:else if 80 > porridge.temperature}
<p>too cold!</p>
{:else}
<p>just right!</p>
{/if}(Blocks don't have to wrap elements, they can also wrap text within elements!)
{#each ...}permalink{#each expression as name}...{/each}{#each expression as name, index}...{/each}{#each expression as name (key)}...{/each}{#each expression as name, index (key)}...{/each}{#each expression as name}...{:else}...{/each}Iterating over lists of values can be done with an each block.
<h1>Shopping list</h1>
<ul>
{#each items as item}
<li>{item.name} x {item.qty}</li>
{/each}
</ul>You can use each blocks to iterate over any array or array-like value — that is, any object with a length property.
An each block can also specify an index, equivalent to the second argument in an array.map(...) callback:
{#each items as item, i}
<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}If a key expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.
{#each items as item (item.id)}
<li>{item.name} x {item.qty}</li>
{/each}
<!-- or with additional index value -->
{#each items as item, i (item.id)}
<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}You can freely use destructuring and rest patterns in each blocks.
{#each items as { id, name, qty }, i (id)}
<li>{i + 1}: {name} x {qty}</li>
{/each}
{#each objects as { id, ...rest }}
<li><span>{id}</span><MyComponent {...rest} /></li>
{/each}
{#each items as [id, ...rest]}
<li><span>{id}</span><MyComponent values={rest} /></li>
{/each}An each block can also have an {:else} clause, which is rendered if the list is empty.
{#each todos as todo}
<p>{todo.text}</p>
{:else}
<p>No tasks today!</p>
{/each}Since Svelte 4 it is possible to iterate over iterables like Map or Set. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using Array.from before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant.
{#await ...}permalink{#await expression}...{:then name}...{:catch name}...{/await}{#await expression}...{:then name}...{/await}{#await expression then name}...{/await}{#await expression catch name}...{/await}Await blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected.
In SSR mode, only the pending branch will be rendered on the server.
If the provided expression is not a Promise only the fulfilled branch will be rendered, including in SSR mode.
{#await promise}
<!-- promise is pending -->
<p>waiting for the promise to resolve...</p>
{:then value}
<!-- promise was fulfilled or not a Promise -->
<p>The value is {value}</p>
{:catch error}
<!-- promise was rejected -->
<p>Something went wrong: {error.message}</p>
{/await}The catch block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).
{#await promise}
<!-- promise is pending -->
<p>waiting for the promise to resolve...</p>
{:then value}
<!-- promise was fulfilled -->
<p>The value is {value}</p>
{/await}If you don't care about the pending state, you can also omit the initial block.
{#await promise then value}
<p>The value is {value}</p>
{/await}Similarly, if you only want to show the error state, you can omit the then block.
{#await promise catch error}
<p>The error is {error}</p>
{/await}{#key ...}permalink{#key expression}...{/key}Key blocks destroy and recreate their contents when the value of an expression changes.
This is useful if you want an element to play its transition whenever a value changes.
{#key value}
<div transition:fade>{value}</div>
{/key}When used around components, this will cause them to be reinstantiated and reinitialised.
{#key value}
<Component />
{/key} previous Basic markup next Special tags
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Reactive statements • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements REPL   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Accessibility warnings • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Misc Accessibility warnings   Edit this page on GitHub On this page   On this page  Accessibility (shortened to a11y) isn't always easy to get right, but Svelte will help by warning you at compile time if you write inaccessible markup. However, keep in mind that many accessibility issues can only be identified at runtime using other automated tools and by manually testing your application.
Some warnings may be incorrect in your concrete use case. You can disable such false positives by placing a <!-- svelte-ignore a11y-<code> --> comment above the line that causes the warning. Example:
<!-- svelte-ignore a11y-autofocus -->
<input autofocus />Here is a list of accessibility checks Svelte will do for you.
a11y-accesskeypermalinkEnforce no accesskey on element. Access keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements. Inconsistencies between keyboard shortcuts and keyboard commands used by screen reader and keyboard-only users create accessibility complications. To avoid complications, access keys should not be used.
<!-- A11y: Avoid using accesskey -->
<div accessKey="z" />a11y-aria-activedescendant-has-tabindexpermalinkAn element with aria-activedescendant must be tabbable, so it must either have an inherent tabindex or declare tabindex as an attribute.
<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->
<div aria-activedescendant="some-id" />a11y-aria-attributespermalinkCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the aria-* props.
<!-- A11y: <meta> should not have aria-* attributes -->
<meta aria-hidden="false" />a11y-autofocuspermalinkEnforce that autofocus is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users alike.
<!-- A11y: Avoid using autofocus -->
<input autofocus />a11y-click-events-have-key-eventspermalinkEnforce that visible, non-interactive elements with an on:click event are accompanied by a keyboard event handler.
Users should first consider whether an interactive element might be more appropriate such as a <button type="button"> element for actions or <a> element for navigations. These elements are more semantically meaningful and will have built-in key handling. E.g. Space and Enter will trigger a <button> and Enter will trigger an <a> element.
If a non-interactive element is required then on:click should be accompanied by an on:keyup or on:keydown handler that enables the user to perform equivalent actions via the keyboard. In order for the user to be able to trigger a key press, the element will also need to be focusable by adding a tabindex. While an on:keypress handler will also silence this warning, it should be noted that the keypress event is deprecated.
<!-- A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. -->
<div on:click={() => {}} />Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.
a11y-distracting-elementspermalinkEnforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated, and should be avoided.
The following elements are visually distracting: <marquee> and <blink>.
<!-- A11y: Avoid <marquee> elements -->
<marquee />a11y-hiddenpermalinkCertain DOM elements are useful for screen reader navigation and should not be hidden.
<!-- A11y: <h2> element should not be hidden -->
<h2 aria-hidden="true">invisible header</h2>a11y-img-redundant-altpermalinkEnforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce img elements as an image. There is no need to use words such as image, photo, and/or picture.
<img src="foo" alt="Foo eating a sandwich." />
<!-- aria-hidden, won't be announced by screen reader -->
<img src="bar" aria-hidden="true" alt="Picture of me taking a photo of an image" />
<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Photo of foo being weird." />
<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="bar" alt="Image of me at a bar!" />
<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Picture of baz fixing a bug." />a11y-incorrect-aria-attribute-typepermalinkEnforce that only the correct type of value is used for aria attributes. For example, aria-hidden
should only receive a boolean.
<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->
<div aria-hidden="yes" />a11y-invalid-attributepermalinkEnforce that attributes important for accessibility have a valid value. For example, href should not be empty, '#', or javascript:.
<!-- A11y: '' is not a valid href attribute -->
<a href="">invalid</a>a11y-interactive-supports-focuspermalinkEnforce that elements with an interactive role and interactive handlers (mouse or key press) must be focusable or tabbable.
<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->
<div role="button" on:keypress={() => {}} />a11y-label-has-associated-controlpermalinkEnforce that a label tag has a text label and an associated control.
There are two supported ways to associate a label with a control:
Wrapping a control in a label tag.
Adding for to a label and assigning it the ID of an input on the page.
<label for="id">B</label>
<label>C <input type="text" /></label>
<!-- A11y: A form label must be associated with a control. -->
<label>A</label>a11y-media-has-captionpermalinkProviding captions for media is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is this important for accessibility, but can also be useful for all users in the case that the media is unavailable (similar to alt text on an image when an image is unable to load).
The captions should contain all important and relevant information to understand the corresponding media. This may mean that the captions are not a 1:1 mapping of the dialogue in the media content. However, captions are not necessary for video components with the muted attribute.
<video><track kind="captions" /></video>
<audio muted />
<!-- A11y: Media elements must have a <track kind=\"captions\"> -->
<video />
<!-- A11y: Media elements must have a <track kind=\"captions\"> -->
<video><track /></video>a11y-misplaced-rolepermalinkCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the role props.
<!-- A11y: <meta> should not have role attribute -->
<meta role="tooltip" />a11y-misplaced-scopepermalinkThe scope attribute should only be used on <th> elements.
<!-- A11y: The scope attribute should only be used with <th> elements -->
<div scope="row" />a11y-missing-attributepermalinkEnforce that attributes required for accessibility are present on an element. This includes the following checks:
<a> should have an href (unless it's a fragment-defining tag)
<area> should have alt, aria-label, or aria-labelledby
<html> should have lang
<iframe> should have title
<img> should have alt
<object> should have title, aria-label, or aria-labelledby
<input type="image"> should have alt, aria-label, or aria-labelledby
<!-- A11y: <input type=\"image\"> element should have an alt, aria-label or aria-labelledby attribute -->
<input type="image" />
<!-- A11y: <html> element should have a lang attribute -->
<html />
<!-- A11y: <a> element should have an href attribute -->
<a>text</a>a11y-missing-contentpermalinkEnforce that heading elements (h1, h2, etc.) and anchors have content and that the content is accessible to screen readers
<!-- A11y: <a> element should have child content -->
<a href="/foo" />
<!-- A11y: <h1> element should have child content -->
<h1 />a11y-mouse-events-have-key-eventspermalinkEnforce that on:mouseover and on:mouseout are accompanied by on:focus and on:blur, respectively. This helps to ensure that any functionality triggered by these mouse events is also accessible to keyboard users.
<!-- A11y: on:mouseover must be accompanied by on:focus -->
<div on:mouseover={handleMouseover} />
<!-- A11y: on:mouseout must be accompanied by on:blur -->
<div on:mouseout={handleMouseout} />a11y-no-redundant-rolespermalinkSome HTML elements have default ARIA roles. Giving these elements an ARIA role that is already set by the browser has no effect and is redundant.
<!-- A11y: Redundant role 'button' -->
<button role="button" />
<!-- A11y: Redundant role 'img' -->
<img role="img" src="foo.jpg" />a11y-no-interactive-element-to-noninteractive-rolepermalinkWAI-ARIA roles should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip.
<!-- A11y: <textarea> cannot have role 'listitem' -->
<textarea role="listitem" />a11y-no-noninteractive-element-interactionspermalinkA non-interactive element does not support event handlers (mouse and key handlers). Non-interactive elements include <main>, <area>, <h1> (,<h2>, etc), <p>, <img>, <li>, <ul> and <ol>. Non-interactive WAI-ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip.
<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->
<li on:click={() => {}} />
<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->
<div role="listitem" on:click={() => {}} />a11y-no-noninteractive-element-to-interactive-rolepermalinkWAI-ARIA roles should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include button, link, checkbox, menuitem, menuitemcheckbox, menuitemradio, option, radio, searchbox, switch and textbox.
<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->
<h3 role="searchbox">Button</h3>a11y-no-noninteractive-tabindexpermalinkTab key navigation should be limited to elements on the page that can be interacted with.
<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->
<div tabindex="0" />a11y-no-static-element-interactionspermalinkElements like <div> with interactive handlers like click must have an ARIA role.
<!-- A11y: <div> with click handler must have an ARIA role -->
<div on:click={() => ''} />a11y-positive-tabindexpermalinkAvoid positive tabindex property values. This will move elements out of the expected tab order, creating a confusing experience for keyboard users.
<!-- A11y: avoid tabindex values above zero -->
<div tabindex="1" />a11y-role-has-required-aria-propspermalinkElements with ARIA roles must have all required attributes for that role.
<!-- A11y: A11y: Elements with the ARIA role "checkbox" must have the following attributes defined: "aria-checked" -->
<span role="checkbox" aria-labelledby="foo" tabindex="0" />a11y-role-supports-aria-propspermalinkElements with explicit or implicit roles defined contain only aria-* properties supported by that role.
<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->
<div role="link" aria-multiline />
<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->
<li aria-required />a11y-structurepermalinkEnforce that certain DOM elements have the correct structure.
<!-- A11y: <figcaption> must be an immediate child of <figure> -->
<div>
<figcaption>Image caption</figcaption>
</div>a11y-unknown-aria-attributepermalinkEnforce that only known ARIA attributes are used. This is based on the WAI-ARIA States and Properties spec.
<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->
<input type="image" aria-labeledby="foo" />a11y-unknown-rolepermalinkElements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at WAI-ARIA site.
<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->
<div role="toooltip" /> previous Frequently asked questions next TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte v2 is out!
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte v2 is out! Here's what you need to know  Rich Harris Apr 18 2018 On this page   On this page  Our motto is 'move slowly and break things'. No, wait, that came out wrong...
Almost a year after we first started talking about version 2 on the Svelte issue tracker, it's finally time to make some breaking changes. This blog post will explain what changed, why it changed, and what you need to do to bring your apps up to date.
tl;drpermalinkEach of these items is described in more depth below. If you get stuck, ask for help in our friendly Discord chatroom.
Install Svelte v2 from npm
Upgrade your templates with svelte-upgrade
Remove calls to component.observe, or add the observe method from svelte-extras
Rewrite calls to component.get('foo') as component.get().foo
Return destroy from your custom event handlers, rather than teardown
Make sure you're not passing numeric string props to components
New template syntaxpermalinkThe most visible change: we've made some improvements to the template syntax.
A common piece of feedback we heard was 'ewww, Mustache' or 'ewww, Handlebars'. A lot of people who used string-based templating systems in a previous era of web development really dislike them. Because Svelte adopted the {{curlies}} from those languages, a lot of people assumed that we somehow shared the limitations of those tools, such as weird scoping rules or an inability to use arbitrary JavaScript expressions.
If you need to show an actual `{` character, it's as easy as `&#123;`
Beyond that, JSX proved that double curlies are unnecessary. So we've made our templates more... svelte, by adopting single curlies. The result feels much lighter to look at and is more pleasant to type:
<h1>Hello {name}!</h1>There are a few other updates. But you don't need to make them manually — just run svelte-upgrade on your codebase:
npx svelte-upgrade v2 srcThis assumes any .html files in src are Svelte components. You can specify whichever directory you like, or target a different directory — for example, you'd do npx svelte-upgrade v2 routes to update a Sapper app.
To see the full set of changes, consult the svelte-upgrade README.
Computed propertiespermalinkAnother thing that people often found confusing about Svelte is the way computed properties work. To recap, if you had a component with this...
tsexport default {	computed: {		d: (a, b, c) => (a = b + c)	}};...then Svelte would first look at the function arguments to see which values d depended on, and then it would write code that updated d whenever those values changed, by injecting them into the function. That's cool, because it allows you to derive complex values from your component's inputs without worrying about when they need to recomputed, but it's also... weird. JavaScript doesn't work that way!
In v2, we use destructuring instead:
tsexport default {	computed: {		d: ({ a, b, c }) => (a = b + c)	}};The Svelte compiler can still see which values d depends on, but it's no longer injecting values — it just passes the component state object into each computed property.
Again, you don't need to make this change manually — just run svelte-upgrade on your components, as shown above.
Sorry, IE11. It's not you, it's... well actually, yeah. It's youpermalinkSvelte v1 was careful to only emit ES5 code, so that you wouldn't be forced to faff around with transpilers in order to use it. But it's 2018 now, and almost all browsers support modern JavaScript. By ditching the ES5 constraint, we can generate leaner code.
If you need to support IE11 and friends, you will need to use a transpiler like Babel or Bublé.
New lifecycle hookspermalinkIn addition to oncreate and ondestroy, Svelte v2 adds two more lifecycle hooks for responding to state changes:
tsexport default {	onstate({ changed, current, previous }) {		// this fires before oncreate, and		// whenever state changes	},
onupdate({ changed, current, previous }) {		// this fires after oncreate, and		// whenever the DOM has been updated		// following a state change	}};You can also listen to those events programmatically:
tscomponent.on('state', ({ changed, current, previous }) => {	// ...});component.observepermalinkWith the new lifecycle hooks, we no longer need the component.observe(...) method:
ts// beforeexport default {	oncreate() {		this.observe('foo', foo => {			console.log(`foo is now ${foo}`);		});	}};
// afterexport default {	onstate({ changed, current }) {		if (changed.foo) {			console.log(`foo is now ${current.foo}`);		}	}};This shrinks the amount of code Svelte needs to generate, and gives you more flexibility. For example, it's now very easy to take action when any one of several properties have changed, such as redrawing a canvas without debouncing several observers.
However, if you prefer to use component.observe(...), then you can install it from svelte-extras:
tsimport { observe } from 'svelte-extras';
export default {	methods: {		observe	}};component.getpermalinkThis method no longer takes an optional key argument — instead, it always returns the entire state object:
ts// beforeconst foo = this.get('foo');const bar = this.get('bar');
// afterconst { foo, bar } = this.get();This change might seem annoying initially, but it's the right move: among other things, it's likely to play better with type systems as we explore that space more fully in future.
event_handler.destroypermalinkIf your app has custom event handlers, they must return an object with a destroy method, not a teardown method (this aligns event handlers with the component API).
No more type coercionpermalinkPreviously, numeric values passed to components were treated as numbers:
<Counter start="1" />That causes unexpected behaviour, and has been changed: if you need to pass a literal number, do so as an expression:
<Counter start={1} />Compiler changespermalinkIn most cases you'll never need to deal with the compiler directly, so this shouldn't require any action on your part. It's worth noting anyway: the compiler API has changed. Instead of an object with a mish-mash of properties, the compiler now returns js, css, ast and stats:
tsconst { js, css, ast, stats } = svelte.compile(source, options);js and css are both { code, map } objects, where code is a string and map is a sourcemap. The ast is an abstract syntax tree of your component, and the stats object contains metadata about the component, and information about the compilation.
Before, there was a svelte.validate method which checked your component was valid. That's been removed — if you want to check a component without actually compiling it, just pass the generate: false option.
My app is broken! Help!permalinkHopefully this covers everything, and the update should be easier for you than it was for us. But if you find bugs, or discover things that aren't mentioned here, swing by Discord chatroom or raise an issue on the tracker.
Svelte for new developers
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte for new developers Never used Node.js or the command line? No problem  Rich Harris Apr 16 2019 On this page   On this page  This short guide is designed to help you — someone who has looked at the tutorial and wants to start creating Svelte apps, but doesn't have a ton of experience using JavaScript build tooling — get up and running.
If there are things that don't make sense, or that we're glossing over, feel free to raise an issue or suggest edits to this page that will help us help more people.
If you get stuck at any point following this guide, the best place to ask for help is in the chatroom.
First things firstpermalinkYou'll be using the command line, also known as the terminal. On Windows, you can access it by running Command Prompt from the Start menu; on a Mac, hit Cmd and Space together to bring up Spotlight, then start typing Terminal.app. On most Linux systems, Ctrl-Alt-T brings up the command line.
The command line is a way to interact with your computer (or another computer! but that's a topic for another time) with more power and control than the GUI (graphical user interface) that most people use day-to-day.
Once on the command line, you can navigate the filesystem using ls (dir on Windows) to list the contents of your current directory, and cd to change the current directory. For example, if you had a Development directory of your projects inside your home directory, you would type
cd Developmentto go to it. From there, you could create a new project directory with the mkdir command:
mkdir svelte-projects
cd svelte-projectsA full introduction to the command line is out of the scope of this guide, but here are a few more useful commands:
cd .. — navigates to the parent of the current directory
cat my-file.txt — on Mac/Linux (type my-file.txt on Windows), lists the contents of my-file.txt
open . (or start . on Windows) — opens the current directory in Finder or File Explorer
Installing Node.jspermalinkNode is a way to run JavaScript on the command line. It's used by many tools, including Svelte. If you don't yet have it installed, the easiest way is to download the latest version straight from the website.
Once installed, you'll have access to three new commands:
node my-file.js — runs the JavaScript in my-file.js
npm [subcommand] — npm is a way to install 'packages' that your application depends on, such as the svelte package
npx [subcommand] — a convenient way to run programs available on npm without permanently installing them
Installing a text editorpermalinkTo write code, you need a good editor. The most popular choice is Visual Studio Code or VSCode, and justifiably so — it's well-designed and fully-featured, and has a wealth of extensions (including one for Svelte, which provides syntax highlighting and diagnostic messages when you're writing components).
Creating a projectpermalinkWe're going to use the Svelte + Vite template. You don't have to use a project template, but it means you have to do a lot less setup work.
On the command line, navigate to where you want to create a new project, then type the following lines (you can paste the whole lot, but you'll develop better muscle memory if you get into the habit of writing each line out one at a time then running it):
npm create vite@latest my-svelte-project -- --template svelte
cd my-svelte-project
npm install
You can replace --template svelte with --template svelte-ts, if you prefer TypeScript.
This creates a new directory, my-svelte-project, adds files from the create-vite/template-svelte template, and installs a number of packages from npm. Open the directory in your text editor and take a look around. The app's 'source code' lives in the src directory, while the files your app can load are in public.
In the package.json file, there is a section called "scripts". These scripts define shortcuts for working with your application — dev, build and preview. To launch your app in development mode, type the following:
npm run devRunning the dev script starts a program called Vite. Vite's job is to take your application's source files, pass them to other programs (including Svelte, in our case) and convert them into the code that will actually run when you open the application in a browser.
Speaking of which, open a browser and navigate to http://localhost:5173. This is your application running on a local web server (hence 'localhost') on port 5173.
Try changing src/App.svelte and saving it. The application will update with your changes.
Building your apppermalinkIn the last step, we were running the app in 'development mode'. In dev mode, Svelte adds extra code that helps with debugging, and Vite skips the final step where your app's JavaScript is compressed.
When you share your app with the world, you want to build it in 'production mode', so that it's as small and efficient as possible for end users. To do that, use the build command:
npm run buildYour dist directory now contains an optimised version of your app. You can run it like so:
npm run preview
Crossfade Link Animation • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Logic blocks • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Logic blocks   Edit this page on GitHub On this page   On this page  {#if ...}permalink{#if expression}...{/if}{#if expression}...{:else if expression}...{/if}{#if expression}...{:else}...{/if}Content that is conditionally rendered can be wrapped in an if block.
{#if answer === 42}
<p>what was the question?</p>
{/if}Additional conditions can be added with {:else if expression}, optionally ending in an {:else} clause.
{#if porridge.temperature > 100}
<p>too hot!</p>
{:else if 80 > porridge.temperature}
<p>too cold!</p>
{:else}
<p>just right!</p>
{/if}(Blocks don't have to wrap elements, they can also wrap text within elements!)
{#each ...}permalink{#each expression as name}...{/each}{#each expression as name, index}...{/each}{#each expression as name (key)}...{/each}{#each expression as name, index (key)}...{/each}{#each expression as name}...{:else}...{/each}Iterating over lists of values can be done with an each block.
<h1>Shopping list</h1>
<ul>
{#each items as item}
<li>{item.name} x {item.qty}</li>
{/each}
</ul>You can use each blocks to iterate over any array or array-like value — that is, any object with a length property.
An each block can also specify an index, equivalent to the second argument in an array.map(...) callback:
{#each items as item, i}
<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}If a key expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.
{#each items as item (item.id)}
<li>{item.name} x {item.qty}</li>
{/each}
<!-- or with additional index value -->
{#each items as item, i (item.id)}
<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}You can freely use destructuring and rest patterns in each blocks.
{#each items as { id, name, qty }, i (id)}
<li>{i + 1}: {name} x {qty}</li>
{/each}
{#each objects as { id, ...rest }}
<li><span>{id}</span><MyComponent {...rest} /></li>
{/each}
{#each items as [id, ...rest]}
<li><span>{id}</span><MyComponent values={rest} /></li>
{/each}An each block can also have an {:else} clause, which is rendered if the list is empty.
{#each todos as todo}
<p>{todo.text}</p>
{:else}
<p>No tasks today!</p>
{/each}Since Svelte 4 it is possible to iterate over iterables like Map or Set. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using Array.from before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant.
{#await ...}permalink{#await expression}...{:then name}...{:catch name}...{/await}{#await expression}...{:then name}...{/await}{#await expression then name}...{/await}{#await expression catch name}...{/await}Await blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected.
In SSR mode, only the pending branch will be rendered on the server.
If the provided expression is not a Promise only the fulfilled branch will be rendered, including in SSR mode.
{#await promise}
<!-- promise is pending -->
<p>waiting for the promise to resolve...</p>
{:then value}
<!-- promise was fulfilled or not a Promise -->
<p>The value is {value}</p>
{:catch error}
<!-- promise was rejected -->
<p>Something went wrong: {error.message}</p>
{/await}The catch block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).
{#await promise}
<!-- promise is pending -->
<p>waiting for the promise to resolve...</p>
{:then value}
<!-- promise was fulfilled -->
<p>The value is {value}</p>
{/await}If you don't care about the pending state, you can also omit the initial block.
{#await promise then value}
<p>The value is {value}</p>
{/await}Similarly, if you only want to show the error state, you can omit the then block.
{#await promise catch error}
<p>The error is {error}</p>
{/await}{#key ...}permalink{#key expression}...{/key}Key blocks destroy and recreate their contents when the value of an expression changes.
This is useful if you want an element to play its transition whenever a value changes.
{#key value}
<div transition:fade>{value}</div>
{/key}When used around components, this will cause them to be reinstantiated and reinitialised.
{#key value}
<Component />
{/key} previous Basic markup next Special tags
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Auto-subscriptions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions REPL  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
What's new in Svelte: February 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: February 2022 Rapid-fire releases across Svelte, SvelteKit and the community  Dani Sandoval Feb 1 2022 On this page   On this page  Happy February, everyone! Over the last month or so, we've seen Svelte and SvelteKit develop at rapid speed, new community rules across the Reddit, GitHub and Discord, and quite a few amazing apps, tutorials and libraries.
Let's take a look...
Highlights from the Svelte changelogpermalink
3.45.0 brought a new a11y warning a11y-no-redundant-roles, destructuring and caching fixes
3.46.0 added the much requested {@const} tag and style: directive
Check out 3.46.1 - 3.46.3 for fixes to the {@const} tag and style: directive, along with a number of fixes to animations
AST output is now available in the Svelte REPL
What's new in SvelteKitpermalink
inlineStyleThreshold allows you to specify where inline stylesheets are inserted into the page (Docs, #2620)
beforeNavigate/afterNavigate lifecycle functions lets you add functionality before or after a page navigation (Docs, #3293)
Platform context can now be passed from adapters (Docs, #3429)
Hooks now have an ssr parameter in resolve to make it easier to skip SSR, when needed (Docs, #2804)
$page.stuff provides a mechanism for pages to pass data 'upward' to layouts (Docs, #3252)
Fallthrough routes let you specify where to route when an route can't be loaded (Docs, #3217)
New configs
Content Security Policy (CSP) is now supported for increased security when using inline javascript or stylesheets (Docs, #3499)
kit.routes config allows you to customise public/private modules during build (Docs, #3576)
prerender.createIndexFiles config lets you prerender index.html files as their subfolder's name (Docs, #2632)
HTTP methods can now be overridden using kit.methodOverride (Docs, #2989)
Config changes
config.kit.hydrate and config.kit.router are now nested under config.kit.browser (Docs, 3578)
Breaking change
use Request and Response objects in endpoints and hooks (#3384)
Community ShowcasepermalinkApps & Sites
timb(re) is a live music programming environment
Music for Programming is a series of mixes intended for listening while ${task} to focus the brain and inspire the mind
Team Tale allows two authors to write the same story in a tag-team sort of fashion
Puzzlez is an online place to play Sudoku and Wordle
Closed Caption Creator makes it easy to add subtitles to your video on Windows, Mac and Google Chrome
SC3Lab is a code generator for experimenting with svelte-cubed and three.js
Donkeytype is a minimalistic and lightweight typingtest inspired by Monkeytype.
Above is a visual routine timer built for the ADHD/autistic mind
base.report is a modern research platform for serious investors
String turns your Phone into a secure portable audio recorder, making it easy to capture and share personal notes, family moments, classroom lectures, and more
The Raytracer Challenge REPL provides a live editor interface to configure a raytraced scene and render it live in any modern browser
awesome-svelte-kit is a list of awesome examples of SvelteKit in the wild
Map Projection Explorer lets you explore different map projections and explains their differences
Rubiks is a Rubik's Cube simulator
Pianisto is a working piano made with SVG, ToneJS and a lot of patience
Want to work on a SvelteKit site with others, try contributing to the Svelte Society site!
Learning and Listening
To Read
Accelerating Svelte's Development by Ben McCann
Storybook for Vite
Let's learn SvelteKit by building a static Markdown blog from scratch by Josh Collinsworth
Building an iOS app with Svelte, Capacitor and Firebase by Harry Herskowitz
Mutating Query Params in SvelteKit Without Page Reloads or Navigations and Workaround for Bubbling Custom Events in Svelte by Mohamad Harith
How to build a full stack serverless application with Svelte and GraphQL by Shadid Haque
How to Deploy SvelteKit Apps to GitHub Pages
Creating a dApp with SvelteKit by Anthony Riley
Comparing Svelte Reactivity Options by Steve Lee
To Watch
Integrating Storybook with SvelteKit and Integrating FaunaDB with Svelte by the Svelte Sirens
SvelteKit Crash Course Tutorial by The Net Ninja
Svelte for Beginners by Joy of Code
SvelteKit For Beginners | Movie App Tutorial by Dev Ed
SvelteKit $app/stores by lihautan
Sveltekit - Get All Routes/Pages by WebJeda
To Listen To
New Year, New Svelte!? from Svelte Radio
So much Sveltey goodness (featuring Rich Harris) from JS Party
The Other Side of Tech: A Documentarian Perspective (with Stefan Kingham) from Purrfect.dev
Libraries, Tools & Components
threlte is a three.js component library for Svelte
svelte-formify is a library to manage and validate forms that uses decorators to define validations
gQuery is a GraphQL Fetcher & Cache for Svelte Kit
Unlock-protocol is an integration to help login with MetaMask, Firebase, and paywall customers
AgnosticUI is a set of UI primitives that start their lives in clean HTML and CSS
Vitebook is a fast and lightweight alternative to Storybook that's powered by Vite
SwyxKit is an opinionated blog starter for SvelteKit + Tailwind + Netlify. Refreshed for 2022!
svelte-themes is an abstraction for themes in your SvelteKit app
svelte-transition is a Svelte component to make using CSS class based transitions easier - ideally suited for use with TailwindCSS
Svelte Inview is a Svelte action that monitors an element enters or leaves the viewport/parent element
svelte-inline-compile is a babel transform that allows for a much more pleasant experience when testing svelte components using Jest and @testing-library/svelte
@feltcoop/svelte-mutable-store is a Svelte store for mutable values with an immutable compiler option
headless-svelte-ui is a group of headless components that can be used in building Svelte Apps.
Did we miss something? Need help bringing your next idea to life in Svelte? Join us on Reddit or Discord.
See ya next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
DOM event forwarding • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Else-if blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks REPL  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Tweened • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Tilt • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Reactive declarations • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: January 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: January 2022 Faster builds with SvelteKit and a much anticipated REPL feature  Dani Sandoval Jan 1 2022 On this page   On this page  Happy new year, Svelte Community! Lots to share this month across Svelte, SvelteKit, Language Tools and the Showcase. Thanks to everyone who made 2021 a great year to use Svelte. Looking forward to the next one 🚀
What's new in SvelteKitpermalink
@sveltejs/adapter-static for SvelteKit now has a precompress option to make brotli compression of assets and pages easier to do out of the box (#3079)
Concurrency mode in SvelteKit will now prerender pages in parallel (#3120). It is enabled by default in 1.0.0-next.205 and later
CSS is now automatically included before JS for improved page performance (d13efe)
A new config option adds the ability to disable service worker registration to do your own custom registration (#2988)
SSR route-splitting is here - breaking monolithic builds into smaller pieces for improved startup and routing performance (#2931)
request.origin/path/query is now request.url - simplifying the config and page load functions (#3126)
After the update to Vite 2.7, SvelteKit users are reporting significant performance improvements and loading third-parties libraries in SSR has also been greatly improved
SvelteKit server will now automatically restart when the config files is changed (vite-plugin-svelte#237)
Other new bits from svelte/*permalink
Svelte 3.44.3 is out with a few bug fixes in the binding and loop code
Svelte Language Tools has introduced support for the then/catch shorthands from Svelte 3.41 and TypeScript's "go to" functionality (105.8.0 and later)
The Svelte REPL got a nice upgrade as well - letting you delete saved REPLs. Try it out by logging in at svelte.dev/apps
Community ShowcasepermalinkApps & Sites
Discover Twitter Spaces is a tool that helps you find the Twitter Spaces
Modern Fluid Typography Editor helps create beautiful fluid typography using CSS clamp
Unnwhiteboard is a job board for companies (or teams) that don't do "whiteboard" interviews
Secret Santa is a gift giving coordination app developed with easiness in mind
LogSnag notifies you of your projects' events and provides you with a timeline to keep track of anything important that happens
Version 0.2 of Tangent, a Svelte-based note writing app, is now in beta
Intl Explorer is a tool for viewing output for all possible formatters for Intl
A lot of work this month has gone into migrating the Svelte main website and Svelte REPL to live in the https://github.com/sveltejs/sites repository - including a brand new homepage for svelte.dev. Thanks to all the contributors who made this possible!
If you're looking for a fun SvelteKit project to work on, you can contribute to the Svelte Society site rewrite 💅
Learning and Listening
To Read
Mutating Query Params in SvelteKit Without Page Reloads or Navigations by Mohamad Harith
Svelte for Reactaholics : A guide for React developers by Puru Vijay
Svelte's lifecycle methods can be used anywhere and The many meanings of $ in Svelte by Geoff Rich
Vercel and Svelte: A Perfect Match for Web Developers by Darryl K. Taft
User-defined TailwindCSS Color Scheme with Svelte Stores by jeremy zaborowski
Ionic 6 + Svelte 🚀 by Raymond Boswel
What happened in #Svelte language tools this year by Simon H
To Watch
The Future of Svelte (Interview with Rich Harris) by Lee Robinson, Director of Developer Relations at Vercel
Svelte is becoming the go-to framework for Obsidian plugin developers
Sveltekit WordPress Headless Blog by WebJeda
Getting started with SvelteKit by Lihau Tan
Deploy a full-stack SvelteKit app on Cloudflare Pages by 1nf
To Listen To
Syntax podcast: How To Do Things In Svelte
JS Party #205: So much Sveltey goodness (w/ Rich Harris)
Libraries, Tools & Components
svelte-headlessui is an unofficial, complete Svelte port of the Headless UI component library
svelte-forms v2 has been released - the author is looking for feedback
Percival is a declarative data query and visualization language
Svelte FlatList is a mobile-friendly, simple, and customizable draggable menu
svelte-keyed is a writable derived store for objects and arrays
Svemix is Remix for Svelte - providing server scripts inside your Svelte components/routes, which will be transformed into endpoints
Want to add something to the showcase? Need help bringing your next idea to life in Svelte? Join us on Reddit or Discord.
See ya next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
The class directive • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Area chart • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart REPL  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/motion • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/motion   Edit this page on GitHub On this page   On this page  The svelte/motion module exports two functions, tweened and spring, for creating writable stores whose values change over time after set and update, rather than immediately.
tweenedpermalink
tsfunction tweened<T>(	value?: T | undefined,	defaults?: TweenedOptions<T> | undefined): Tweened<T>;
Tweened stores update their values over a fixed duration. The following options are available:
delay (number, default 0) — milliseconds before starting
duration (number | function, default 400) — milliseconds the tween lasts
easing (function, default t => t) — an easing function
interpolate (function) — see below
store.set and store.update can accept a second options argument that will override the options passed in upon instantiation.
Both functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve.
Out of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same 'shape', and their 'leaf' properties are also numbers).
<script>
import { tweened } from 'svelte/motion';
import { cubicOut } from 'svelte/easing';
const size = tweened(1, {
duration: 300,
easing: cubicOut
});
function handleClick() {
// this is equivalent to size.update(n => n + 1)
$size += 1;
}
</script>
<button on:click={handleClick} style="transform: scale({$size}); transform-origin: 0 0">
embiggen
</button>If the initial value is undefined or null, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don't want any motion when the component first renders.
tsimport { tweened } from 'svelte/motion';import { cubicOut } from 'svelte/easing';
const size = tweened(undefined, {	duration: 300,	easing: cubicOut});
$: $size = big ? 100 : 10;The interpolate option allows you to tween between any arbitrary values. It must be an (a, b) => t => value function, where a is the starting value, b is the target value, t is a number between 0 and 1, and value is the result. For example, we can use the d3-interpolate package to smoothly interpolate between two colours.
<script>
import { interpolateLab } from 'd3-interpolate';
import { tweened } from 'svelte/motion';
const colors = ['rgb(255, 62, 0)', 'rgb(64, 179, 255)', 'rgb(103, 103, 120)'];
const color = tweened(colors[0], {
duration: 800,
interpolate: interpolateLab
});
</script>
{#each colors as c}
<button style="background-color: {c}; color: white; border: none;" on:click={(e) => color.set(c)}>
{c}
</button>
{/each}
<h1 style="color: {$color}">{$color}</h1>springpermalink
tsfunction spring<T = any>(	value?: T | undefined,	opts?: SpringOpts | undefined): Spring<T>;
A spring store gradually changes to its target value based on its stiffness and damping parameters. Whereas tweened stores change their values over a fixed duration, spring stores change over a duration that is determined by their existing velocity, allowing for more natural-seeming motion in many situations. The following options are available:
stiffness (number, default 0.15) — a value between 0 and 1 where higher means a 'tighter' spring
damping (number, default 0.8) — a value between 0 and 1 where lower means a 'springier' spring
precision (number, default 0.01) — determines the threshold at which the spring is considered to have 'settled', where lower means more precise
All of the options above can be changed while the spring is in motion, and will take immediate effect.
tsimport { spring } from 'svelte/motion';
const size = spring(100);size.stiffness = 0.3;size.damping = 0.4;size.precision = 0.005;As with tweened stores, set and update return a Promise that resolves if the spring settles.
Both set and update can take a second argument — an object with hard or soft properties. { hard: true } sets the target value immediately; { soft: n } preserves existing momentum for n seconds before settling. { soft: true } is equivalent to { soft: 0.5 }.
tsimport { spring } from 'svelte/motion';
const coords = spring({ x: 50, y: 50 });// updates the value immediatelycoords.set({ x: 100, y: 200 }, { hard: true });// preserves existing momentum for 1scoords.update(	(target_coords, coords) => {		return { x: target_coords.x, y: coords.y };	},	{ soft: 1 });See a full example on the spring tutorial.
<script>
import { spring } from 'svelte/motion';
const coords = spring(
{ x: 50, y: 50 },
{
stiffness: 0.1,
damping: 0.25
}
);
</script>If the initial value is undefined or null, the first value change will take effect immediately, just as with tweened values (see above).
tsimport { spring } from 'svelte/motion';
const size = spring();$: $size = big ? 100 : 10;TypespermalinkSpringpermalink
tsinterface Spring<T> extends Readable<T> {…}
tsset: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;
tsupdate: (fn: Updater<T>, opts?: SpringUpdateOpts) => Promise<void>;
tsprecision: number;
tsdamping: number;
tsstiffness: number;
Tweenedpermalink
tsinterface Tweened<T> extends Readable<T> {…}
tsset(value: T, opts?: TweenedOptions<T>): Promise<void>;
tsupdate(updater: Updater<T>, opts?: TweenedOptions<T>): Promise<void>;
previous svelte/store next svelte/transition
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Checkbox inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Hacker News • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Checkbox inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs REPL  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: March 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: March 2021 Call for Svelte Summit Speakers! Improved SSR, non-HTML5 compilation targets, and ESLint TypeScript support  Dani Sandoval Mar 1 2021 On this page   On this page  Lots to cover this month with releases from across the Svelte ecosystem. Most importantly, Svelte Summit Spring 2021 has an Open Call for Speakers. The deadline is March 14 so if you have an idea for a talk, submit it now!
Let's dive into the news 🐬
What's new in sveltejs/sveltepermalink
SSR store handling has been reworked to subscribe and unsubscribe as in DOM mode. SSR stores should work much more consistently now (3.31.2, see custom stores and Server-side component API )
Multiple instances of the same action are now allowed on an element (3.32.0, example)
The new foreign namespace should make it easier for alternative compile targets (like Svelte Native and SvelteGUI) by disabling certain HTML5-specific behaviour and checks (3.32.0, more info)
Support for inline comment sourcemaps in code from preprocessors (3.32.0)
Destructured defaults are now allowed to refer to other variables (3.33.0, example)
Custom elements will now call onMount functions when connecting and clean up when disconnecting (3.33.0, checkout this PR for an interesting conversation on how folks are using Svelte with Web Components)
A cssHash option has been added to the compiler options to control the classname used for CSS scoping (3.34.0, docs)
Continued improvement to TypeScript definitions
For a complete list of changes, including bug fixes and links to PRs, check out the CHANGELOG
New from sveltejs/language-toolspermalink
For language server clients that don't support didChangeWatchedFiles, a fallback file watcher will be used instead
New highlighting rules for store accessors and element directives (like bind: and class:)
HTML tags can now be renamed together
Mustache tags parsing is now more robust and will provide better intellisense in more situations
Haven't tried the language-tools yet? Check out Svelte Extension for VSCode or find a plugin for your favorite IDE!
Other changes from sveltejs/*permalink
eslint-plugin-svelte3 now supports TypeScript as of 3.1.0
prettier-plugin-svelte released a number of minor versions to address whitespace and comment trimming issues.
svelte-preprocess bug fixes this month include fixes to postcss transformations and support for both v2 and v3 of postcss-load-config
sapper's 0.29.1 release fixes some bad imports in type definitions, updates typings to be compatible with express/polka, and restores hashing of all CSS file names.
Community ShowcasepermalinkApps & Sites
Tracking the Coronavirus from NYTimes is an example of SvelteKit in production
Budibase is an open-source low-code platform, helping developers and IT professionals build, automate, and ship internal tools 50x faster on their own infrastructure.
Track the Parcel is a one-stop tool for tracking parcel status with all major package shippers.
Memo is a replacement for email that uses Svelte for modern messaging
Userscripts Safari is an open-source userscript editor for Safari... a native Svelte app for Mac OS!
SVGX is "the desktop SVG asset manager designers and developers wished they had."
Armoria is a procedural heraldry generator and editor
FictionBoard is a virtual table top (VTT) platform that just released fillable and responsive character sheets
Castles & Crusades Treasure Generator is a treasure generator for the table top RPG: Castles and Crusades.
NESBit Studio is a toolkit to help the development of homebrew NES games
ElectroBlocks is an online Arduino IDE with a built-in simulator (Chrome Only)
Goblin.life is a 3D world builder whose UI is built with Svelte
farmbox is a UAE-based grocery delivery services
heroeswearmasks.fun is a client-side machine learning tool that determines whether or not you're wearing a mask.
weatherify is a very pretty (and open source) weather app
DSN Live lets you monitor connections between NASA/JPL and interplanetary spacecraft missions in real time.
Demos, Libraries, Tools & Components
spc is a special characters picker component for the web
svelte-injector lets you inject Svelte components in React, Angular, Vue, jQuery, Vanilla JS.
Felte is a form library for Svelte with simple validation reporting.
svelte-use-form is form library that "is easy to use and has 0 boilerplate."
Formula provides "Zero Configuration Reactive Forms for Svelte."
Houdini is "the disappearing GraphQL client built for Sapper and Sveltekit."
svelte-split-pane is a draggable split pane component
svelte-virtualized-auto-sizer is a high-order component that automatically adjusts the width and height of a single child.
svelte-window are components for efficiently rendering large, scrollable lists and tabular data.
Svelte Persistent store is a Svelte store that keep its value through pages and reloads
Svelte Dark is a VSCode theme inspired by the svelte.dev REPL
Import Cost has been updated to support Svelte libraries and help developers keep their bundle size under control.
Tree-sitter-svelte provides tree-sitter grammar for svelte
Svelte Ripple is a Material Design ripple effect that doesn't depend on @material/ripple (made by @karakara in the Svelte Discord)
Analog SVG Clock is a great example of easing functions (made by @tonmcg in the Svelte Discord)
Console Log Styler lets you generate a styled console log using pseudo HTML and CSS (made by @EmNudge in the Svelte Discord)
svelte-heroicons is a handy wrapper for the Heroicons icon library
supabase-ui-svelte are UI components for Supabase authentication
Have your own Svelte Component to share? Check out the Components page on the Svelte Society site. You can contribute by making a PR to this file.
Learning Resources & Starters
The unofficial SvelteKit docs were built using SvelteKit and are open for contributions
📦 Svelte Store course by lihautan covers the basics of Svelte Stores and best practices.
Svelte Events by WebJeda explains how directives like on: can be used to listen to DOM events.
How to Set Up Protected Routes in Your Svelte Application describes how to authenticate your users to access your routes
Using Fauna's streaming feature to build a chat with Svelte demonstrates how to setup and configure Fauna to build a real-time chat interface with Svelte
Using TakeShape with Sapper demonstrates how to connect the TakeShape CMS with Sapper
YastPack is Yet Another Snowpack-Svelte-TailwindCss-Routify Template Pack
S2T2 is a Snowpack + Svelte + TailwindCSS + TypeScript template
tonyketcham/sapper-tailwind2-template is a Sapper Template w/ Tailwind 2.0, TypeScript, ESLint, and Prettier
See you next month!permalinkGot something to add? Join us on Svelte Society, Reddit and Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: October 2020
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: October 2020 New object methods, in-depth learning resources and tons of integration examples!  Dani Sandoval Oct 1 2020 On this page   On this page  Welcome to the first edition of our "What's new in Svelte" series! We'll try to make this a monthly blog post in which you'll find out about new features, bug fixes, and a showcase of Svelte projects from around the community.
New featurespermalink
use:obj.method allows functions defined within objects to be used within actions (Example, 3.26.0, warning removed in 3.27.0)
_ is now supported as a "numerical separator", similar to a . or , (Example, 3.26.0)
import.meta now works in template expressions (Example, 3.26.0)
CSS Selectors with ~ and + combinators are now supported (Example, 3.27.0, with a compiler fix in 3.29.0)
The {#key} block is now available to key arbitrary content on an expression. Whenever the expression changes, the contents inside the {#key} block will be destroyed and recreated. For an in-depth explanation and to find out how it's implemented, check out the new blog post of Svelte Team member Tan Li Hau. (More info, 3.29.0)
Slots can now be forwarded through child components! This used to only be possible by adding extra wrapper <div>s (More info, 3.29.0)
When using TypeScript, you can now type the createEventDispatcher method:
<script lang="ts">
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher<{
/**
* you can also add docs
*/
checked: boolean; // Will translate to `CustomEvent<boolean>`
hello: string;
}>();
// ...
</script>This will make sure that you can invoke dispatch only with the specified event names and its types. The Svelte for VS Code extension was also updated to deal with this new feature. It will provide strong typings for these events as well as autocompletion and hover information.
New from Sapper!
Sapper 0.28.9 just came out. The highlights from it include much better support for CSP nonces, asset preload support for exported pages, and error details are now available in the $page store on error pages.
In addition, Sapper's CSS handling has been rewritten over the course of recent releases in order to fix existing CSS handling bugs, refactor the CSS handling to occur entirely within a Rollup plugin, and remove the need internally to register CSS in the routing system. Congrats and thank you to the folks working on Sapper for all their solid work!
Impactful bug fixespermalink
CSS compilation will no longer remove rules for the open attribute on <details> elements (Example, 3.26.0)
prettier-plugin-svelte will do a better job now at dealing with whitespaces, especially around inline elements. It will also preserve formatting inside <pre> tags and will no longer format languages which are not supported by Prettier, like SASS, Pug or Stylus.
Coming uppermalink
Svelte Summit, Svelte's second global online conference, is taking place on October 18! Sign up for free to get reminders and talk updates!
For all the features and bugfixes see the CHANGELOG for Svelte and Sapper.
Svelte Showcasepermalink
This CustomMenu example demos how to replace the OS right-click menu
GitHub Tetris lets you play a Tetris-like game in a git commit history
Who are my representatives? is a website built with Svelte to help US residents get more info on their congressional representatives
Pick Palette is a color palette manager made with Svelte!
In-depth learning:permalink
Svelte 3 Up and Running is a new book about building production-ready static web apps with Svelte 3
Sapper Tutorial (Crash Course) walks through the ins-and-outs of Sapper, the Svelte-powered application framework
Svelte Society Day France happened September 27th featuring a wide variety of topics all in French! You can find the full recording here.
Plug-and-play components:permalink
svelte-zoom brings "nearly native" pan-and-zoom to images on desktop and mobile
svelte-materialify is a Material component library for Svelte with over 50 components
svelte-undoable makes it easy to introduce undo and redo functionality using bind:
This Tilt component implements a common UX pattern where the hovered element tilts to follow the mouse
Lots of examples of how use JS tech came out this month:permalink
Sapper with PostCSS and Tailwind
PrismJS (Code block syntax highlighting)
Filepond (Drag-and-drop file upload)
Ionic (UI Components)
Pell (WYSIWYG Editor)
Leaflet (Mapping)
Reminder: There's a Svelte integrations repo that demonstrates ways to incorporate Svelte into your stack (and vice versa). If you've got questions on how to use a particular piece of tech with Svelte, you may find your answer there... and if you've gotten something to work with Svelte, consider contributing!
For more amazing Svelte projects, check out the Svelte Society, Reddit and Discord… and be sure to post your own!
See you next month!permalinkBy the way, Svelte now has an OpenCollective! All contributions and all expenses are published in our transparent public ledger. Learn who is donating, how much, where that money is going, submit expenses, get reimbursed and more!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Readable stores • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores REPL  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/store • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/store   Edit this page on GitHub On this page   On this page  The svelte/store module exports functions for creating readable, writable and derived stores.
Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.
This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.
writablepermalink
tsfunction writable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Writable<T>;
Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.
set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.
update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'store.tstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'store.tstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.
readablepermalink
tsfunction readable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Readable<T>;
Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.
tsimport { readable } from 'svelte/store';
const time = readable(new Date(), (set) => {	set(new Date());
const interval = setInterval(() => {		set(new Date());	}, 1000);
return () => clearInterval(interval);});
const ticktock = readable('tick', (set, update) => {	const interval = setInterval(() => {		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));	}, 1000);
return () => clearInterval(interval);});derivedpermalink
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (		values: StoresValues<S>,		set: (value: T) => void,		update: (fn: Updater<T>) => void	) => Unsubscriber | void,	initial_value?: T | undefined): Readable<T>;
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (values: StoresValues<S>) => T,	initial_value?: T | undefined): Readable<T>;
Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.
In the simplest version, derived takes a single store, and the callback returns a derived value.
tsimport { derived } from 'svelte/store';
const doubled = derived(a, ($a) => $a * 2);The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.
In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.
tsimport { derived } from 'svelte/store';
const delayed = derived(	a,	($a, set) => {		setTimeout(() => set($a), 1000);	},	2000);
const delayedIncrement = derived(a, ($a, set, update) => {	set($a);	setTimeout(() => update((x) => x + 1), 1000);	// every time $a produces a value, this produces two	// values, $a immediately and then $a + 1 a second later});If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.
tsimport { derived } from 'svelte/store';
const tick = derived(	frequency,	($frequency, set) => {		const interval = setInterval(() => {			set(Date.now());		}, 1000 / $frequency);
return () => {			clearInterval(interval);		};	},	2000);In both cases, an array of arguments can be passed as the first argument instead of a single store.
tsimport { derived } from 'svelte/store';
const summed = derived([a, b], ([$a, $b]) => $a + $b);
const delayed = derived([a, b], ([$a, $b], set) => {	setTimeout(() => set($a + $b), 1000);});readonlypermalink
tsfunction readonly<T>(store: Readable<T>): Readable<T>;
This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.
tsimport { readonly, writable } from 'svelte/store';
const writableStore = writable(1);const readableStore = readonly(writableStore);
Property 'set' does not exist on type 'Readable<number>'.2339Property 'set' does not exist on type 'Readable<number>'.readableStore.subscribe(console.log);
writableStore.set(2); // console: 2readableStore.set(2); // ERRORgetpermalink
tsfunction get<T>(store: Readable<T>): T;
Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.
This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.
tsimport { get } from 'svelte/store';
const value = get(store);TypespermalinkReadablepermalinkReadable interface for subscribing.
tsinterface Readable<T> {…}
tssubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;
run subscription callback
invalidate cleanup callback
Subscribe on value changes.
StartStopNotifierpermalinkStart and stop notification callbacks.
This function is called when the first subscriber subscribes.
tstype StartStopNotifier<T> = (	set: (value: T) => void,	update: (fn: Updater<T>) => void) => void | (() => void);
SubscriberpermalinkCallback to inform of a value updates.
tstype Subscriber<T> = (value: T) => void;
UnsubscriberpermalinkUnsubscribes from value updates.
tstype Unsubscriber = () => void;
UpdaterpermalinkCallback to update a value.
tstype Updater<T> = (value: T) => T;
WritablepermalinkWritable interface for both updating and subscribing.
tsinterface Writable<T> extends Readable<T> {…}
tsset(this: void, value: T): void;
value to set
Set value and inform subscribers.
tsupdate(this: void, updater: Updater<T>): void;
updater callback
Update value using callback and inform subscribers.
previous svelte next svelte/motion
The transition directive • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Reactivity / Declarations • Svelte Tutorial
Skip to main content  svelte.dev svelte  ｜ Tutorial     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme               Reactivity / Declarations a. Basicsb. Adding datac. Dynamic attributesd. Stylinge. Nested componentsf. Making an appa. Assignmentsb. Declarationsc. Statementsd. Updating arrays and objectsa. Declaring propsb. Default valuesc. Spread propsa. If blocksb. Else blocksc. Else-if blocksd. Each blockse. Keyed each blocksf. Await blocksa. DOM eventsb. Inline handlersc. Event modifiersd. Component eventse. Event forwardingf. DOM event forwardinga. Text inputsb. Numeric inputsc. Checkbox inputsd. Group inputse. Textarea inputsf. Select bindingsg. Select multipleh. Contenteditable bindingsi. Each block bindingsj. Media elementsk. Dimensionsl. Thism. Component bindingsn. Binding to component instancesa. onMountb. onDestroyc. beforeUpdate and afterUpdated. ticka. Writable storesb. Auto-subscriptionsc. Readable storesd. Derived storese. Custom storesf. Store bindingsa. Tweenedb. Springa. The transition directiveb. Adding parametersc. In and outd. Custom CSS transitionse. Custom JS transitionsf. Transition eventsg. Global transitionsh. Deferred transitionsi. Key blocksa. The animate directivea. The use directiveb. Adding parametersa. The class directiveb. Shorthand class directivec. Inline stylesd. The style directivea. Slotsb. Slot fallbacksc. Named slotsd. Checking for slot contente. Slot propsa. setContext and getContexta. <svelte:self>b. <svelte:component>c. <svelte:element>d. <svelte:window>e. <svelte:window> bindingsf. <svelte:document>g. <svelte:body>h. <svelte:head>i. <svelte:options>j. <svelte:fragment>a. Sharing codeb. Exportsa. The @debug tagb. HTML tagsa. Congratulations!    Svelte's reactivity not only keeps the DOM in sync with your application's variables as shown in the previous section, it can also keep variables in sync with each other using reactive declarations. They look like this:
tslet count = 0;$: doubled = count * 2;
Don't worry if this looks a little alien. It's valid (if unconventional) JavaScript, which Svelte interprets to mean 're-run this code whenever any of the referenced values change'. Once you get used to it, there's no going back.
Let's use doubled in our markup:
<p>{count} doubled is {doubled}</p>Of course, you could just write {count * 2} in the markup instead — you don't have to use reactive values. Reactive values become particularly valuable when you need to reference them multiple times, or you have values that depend on other reactive values.
Show me  Edit this chapter
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:head> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head> REPL   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Bar chart • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart REPL  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:element> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
File inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs REPL  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Await blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks REPL   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
onDestroy • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Dynamic attributes • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes REPL  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Introducing runes
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Introducing runes Rethinking 'rethinking reactivity'  The Svelte team Sep 20 2023 On this page   On this page  In 2019, Svelte 3 turned JavaScript into a reactive language. Svelte is a web UI framework that uses a compiler to turn declarative component code like this...
<script>
let count = 0;
function increment() {
count += 1;
}
</script>
<button on:click={increment}>
clicks: {count}
</button>...into tightly optimized JavaScript that updates the document when state like count changes. Because the compiler can 'see' where count is referenced, the generated code is highly efficient, and because we're hijacking syntax like let and = instead of using cumbersome APIs, you can write less code.
A common piece of feedback we get is 'I wish I could write all my JavaScript like this'. When you're used to things inside components magically updating, going back to boring old procedural code feels like going from colour to black-and-white.
Svelte 5 changes all that with runes, which unlock universal, fine-grained reactivity.
Introducing runes
Before we beginpermalinkEven though we're changing how things work under the hood, Svelte 5 should be a drop-in replacement for almost everyone. The new features are opt-in — your existing components will continue to work.
We don't yet have a release date for Svelte 5. What we're showing you here is a work-in-progress that is likely to change!
What are runes?permalink
rune /ro͞on/ noun
A letter or mark used as a mystical or magic symbol.
Runes are symbols that influence the Svelte compiler. Whereas Svelte today uses let, =, the export keyword and the $: label to mean specific things, runes use function syntax to achieve the same things and more.
For example, to declare a piece of reactive state, we can use the $state rune:
<script>
let count = 0;
let count = $state(0);
function increment() {
count += 1;
}
</script>
<button on:click={increment}>
clicks: {count}
</button>
At first glance, this might seem like a step back — perhaps even un-Svelte-like. Isn't it better if let count is reactive by default?
Well, no. The reality is that as applications grow in complexity, figuring out which values are reactive and which aren't can get tricky. And the heuristic only works for let declarations at the top level of a component, which can cause confusion. Having code behave one way inside .svelte files and another inside .js can make it hard to refactor code, for example if you need to turn something into a store so that you can use it in multiple places.
Beyond componentspermalinkWith runes, reactivity extends beyond the boundaries of your .svelte files. Suppose we wanted to encapsulate our counter logic in a way that could be reused between components. Today, you would use a custom store in a .js or .ts file:
tsimport { writable } from 'svelte/store';
export function createCounter() {	const { subscribe, update } = writable(0);
return {		subscribe,		increment: () => update((n) => n + 1)	};}Because this implements the store contract — the returned value has a subscribe method — we can reference the store value by prefixing the store name with $:
<script>
import { createCounter } from './counter.js';
const counter = createCounter();
let count = 0;
function increment() {
count += 1;
}
</script>
<button on:click={increment}>
clicks: {count}
<button on:click={counter.increment}>
clicks: {$counter}
</button>
This works, but it's pretty weird! We've found that the store API can get rather unwieldy when you start doing more complex things.
With runes, things get much simpler:
import { writable } from 'svelte/store';
export function createCounter() {
const { subscribe, update } = writable(0);
let count = $state(0);
return {
subscribe,
increment: () => update((n) => n + 1)
get count() { return count },
increment: () => count += 1
};
}
<script>
import { createCounter } from './counter.js';
const counter = createCounter();
</script>
<button on:click={counter.increment}>
clicks: {$counter}
clicks: {counter.count}
</button>
Note that we're using a get property in the returned object, so that counter.count always refers to the current value rather than the value at the time the function was called.
Runtime reactivitypermalinkToday, Svelte uses compile-time reactivity. This means that if you have some code that uses the $: label to re-run automatically when dependencies change, those dependencies are determined when Svelte compiles your component:
<script>
export let width;
export let height;
// the compiler knows it should recalculate `area`
// when either `width` or `height` change...
$: area = width * height;
// ...and that it should log the value of `area`
// when _it_ changes
$: console.log(area);
</script>This works well... until it doesn't. Suppose we refactored the code above:
tsconst multiplyByHeight = (width) => width * height;Parameter 'width' implicitly has an 'any' type.Cannot find name 'height'.70062304Parameter 'width' implicitly has an 'any' type.Cannot find name 'height'.$: area = multiplyByHeight(width);Cannot find name 'area'.Cannot find name 'width'.23042304Cannot find name 'area'.Cannot find name 'width'.Because the $: area = ... declaration can only 'see' width, it won't be recalculated when height changes. As a result, code is hard to refactor, and understanding the intricacies of when Svelte chooses to update which values can become rather tricky beyond a certain level of complexity.
Svelte 5 introduces the $derived and $effect runes, which instead determine the dependencies of their expressions when they are evaluated:
<script>
let { width, height } = $props(); // instead of `export let`
const area = $derived(width * height);
$effect(() => {
console.log(area);
});
</script>As with $state, $derived and $effect can also be used in your .js and .ts files.
Signal boostpermalinkLike every other framework, we've come to the realisation that Knockout was right all along.
Svelte 5's reactivity is powered by signals, which are essentially what Knockout was doing in 2010. More recently, signals have been popularised by Solid and adopted by a multitude of other frameworks.
We're doing things a bit differently though. In Svelte 5, signals are an under-the-hood implementation detail rather than something you interact with directly. As such, we don't have the same API design constraints, and can maximise both efficiency and ergonomics. For example, we avoid the type narrowing issues that arise when values are accessed by function call, and when compiling in server-side rendering mode we can ditch the signals altogether, since on the server they're nothing but overhead.
Signals unlock fine-grained reactivity, meaning that (for example) changes to a value inside a large list needn't invalidate all the other members of the list. As such, Svelte 5 is ridonkulously fast.
Simpler times aheadpermalinkRunes are an additive feature, but they make a whole bunch of existing concepts obsolete:
the difference between let at the top level of a component and everywhere else
export let
$:, with all its attendant quirks
different behaviour between <script> and <script context="module">
$$props and $$restProps
lifecycle functions (things like afterUpdate can just be $effect functions)
the store API and $ store prefix (while stores are no longer necessary, they are not being deprecated)
For those of you who already use Svelte, it's new stuff to learn, albeit hopefully stuff that makes your Svelte apps easier to build and maintain. But newcomers won't need to learn all those things — it'll just be in a section of the docs titled 'old stuff'.
This is just the beginning though. We have a long list of ideas for subsequent releases that will make Svelte simpler and more capable.
Try it!permalinkYou can't use Svelte 5 in production yet. We're in the thick of it at the moment and can't tell you when it'll be ready to use in your apps.
But we didn't want to leave you hanging. We've created a preview site with detailed explanations of the new features and an interactive playground. You can also visit the #svelte-5-runes channel of the Svelte Discord to learn more. We'd love to have your feedback!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Readable stores • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/store • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/store   Edit this page on GitHub On this page   On this page  The svelte/store module exports functions for creating readable, writable and derived stores.
Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.
This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.
writablepermalink
tsfunction writable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Writable<T>;
Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.
set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.
update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'store.tstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'store.tstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.
readablepermalink
tsfunction readable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Readable<T>;
Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.
tsimport { readable } from 'svelte/store';
const time = readable(new Date(), (set) => {	set(new Date());
const interval = setInterval(() => {		set(new Date());	}, 1000);
return () => clearInterval(interval);});
const ticktock = readable('tick', (set, update) => {	const interval = setInterval(() => {		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));	}, 1000);
return () => clearInterval(interval);});derivedpermalink
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (		values: StoresValues<S>,		set: (value: T) => void,		update: (fn: Updater<T>) => void	) => Unsubscriber | void,	initial_value?: T | undefined): Readable<T>;
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (values: StoresValues<S>) => T,	initial_value?: T | undefined): Readable<T>;
Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.
In the simplest version, derived takes a single store, and the callback returns a derived value.
tsimport { derived } from 'svelte/store';
const doubled = derived(a, ($a) => $a * 2);The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.
In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.
tsimport { derived } from 'svelte/store';
const delayed = derived(	a,	($a, set) => {		setTimeout(() => set($a), 1000);	},	2000);
const delayedIncrement = derived(a, ($a, set, update) => {	set($a);	setTimeout(() => update((x) => x + 1), 1000);	// every time $a produces a value, this produces two	// values, $a immediately and then $a + 1 a second later});If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.
tsimport { derived } from 'svelte/store';
const tick = derived(	frequency,	($frequency, set) => {		const interval = setInterval(() => {			set(Date.now());		}, 1000 / $frequency);
return () => {			clearInterval(interval);		};	},	2000);In both cases, an array of arguments can be passed as the first argument instead of a single store.
tsimport { derived } from 'svelte/store';
const summed = derived([a, b], ([$a, $b]) => $a + $b);
const delayed = derived([a, b], ([$a, $b], set) => {	setTimeout(() => set($a + $b), 1000);});readonlypermalink
tsfunction readonly<T>(store: Readable<T>): Readable<T>;
This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.
tsimport { readonly, writable } from 'svelte/store';
const writableStore = writable(1);const readableStore = readonly(writableStore);
Property 'set' does not exist on type 'Readable<number>'.2339Property 'set' does not exist on type 'Readable<number>'.readableStore.subscribe(console.log);
writableStore.set(2); // console: 2readableStore.set(2); // ERRORgetpermalink
tsfunction get<T>(store: Readable<T>): T;
Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.
This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.
tsimport { get } from 'svelte/store';
const value = get(store);TypespermalinkReadablepermalinkReadable interface for subscribing.
tsinterface Readable<T> {…}
tssubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;
run subscription callback
invalidate cleanup callback
Subscribe on value changes.
StartStopNotifierpermalinkStart and stop notification callbacks.
This function is called when the first subscriber subscribes.
tstype StartStopNotifier<T> = (	set: (value: T) => void,	update: (fn: Updater<T>) => void) => void | (() => void);
SubscriberpermalinkCallback to inform of a value updates.
tstype Subscriber<T> = (value: T) => void;
UnsubscriberpermalinkUnsubscribes from value updates.
tstype Unsubscriber = () => void;
UpdaterpermalinkCallback to update a value.
tstype Updater<T> = (value: T) => T;
WritablepermalinkWritable interface for both updating and subscribing.
tsinterface Writable<T> extends Readable<T> {…}
tsset(this: void, value: T): void;
value to set
Set value and inform subscribers.
tsupdate(this: void, updater: Updater<T>): void;
updater callback
Update value using callback and inform subscribers.
previous svelte next svelte/motion
What's new in Svelte: August 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: August 2022 Changes to SvelteKit's `load` before 1.0 plus support for Vite 3 and `vite.config.js`!  Dani Sandoval Aug 1 2022 On this page   On this page  There's a lot to cover this month... big changes are coming to SvelteKit's design before 1.0 can be completed. If you haven't already, check out Rich's Discussion, Fixing load, and tightening up SvelteKit's design before 1.0 #5748.
Also, @dummdidumm (Simon H) has joined Vercel to work on Svelte full-time and @tcc-sejohnson has joined the group of SvelteKit maintainers! We're super excited to have additional maintainers now dedicated to working on Svelte and SvelteKit and have already been noticing their impact. July was the third largest month for SvelteKit changes since its inception!
Now onto the rest of the updates...
What's new in SvelteKitpermalink
Dynamically imported styles are now included during SSR (#5138)
Improvements to routes and prop updates to prevent unnecessary rerendering (#5654, #5671)
Lots of improvements to error handling (#4665, #5622, #5619, #5616)
Custom Vite modes are now respected in SSR builds (#5602)
Custom Vite config locations are now supported (#5705)
Private environment variables (aka "secrets") are now much more secure. Now if you accidentally import them to client-side code, you'll see an error (#5663, Docs)
Vercel's v3 build output API is now being used in adapter-vercel (#5514)
vite-plugin-svelte has reached 1.0 and now supports Vite 3. You'll notice new default ports for dev (port 5173) and preview (port 4173) (#5005, vite-plugin-svelte CHANGELOG)
Breaking changes:
mode, prod and server are no longer available in $app/env (#5602)
svelte-kit CLI commands are now run using the vite command and vite.config.js is required. This will allow first-class support with other projects in the Vite ecosystem like Vitest and Storybook (#5332, Docs)
endpointExtensions is now moduleExtensions and can be used to filter param matchers (#5085, Docs)
Node 16.9 is now the minimum version for SvelteKit (#5395)
%-encoded filenames are now allowed. If you had a % in your route, you must now encode it with %25 (#5056)
Endpoint method names are now uppercased to match HTTP specifications (#5513, Docs)
writeStatic has been removed to align with Vite's config (#5618)
transformPage is now transformPageChunk (#5657, Docs)
The prepare script is no longer needed in package.json (#5760)
adapter-node no longer does any compression while we wait for a bug fix in the compression library (#5560)
For a full list of changes, check out kit's CHANGELOG.
What's new in Svelte & Language Toolspermalink
The @layer CSS at-rule is now supported in Svelte components (3.49.0, PR)
The inert HTML attribute is now supported in Svelte's language tools and plugins (105.20.0, PR)
The Svelte plugin will now use SvelteComponentTyped typings, if available (105.19.0, PR)
Community ShowcasepermalinkApps & Sites built with Svelte
PocketBase is an open source Go backend with a single file and an admin dashboard built with Svelte
Hondo is a word guessing game with multiple rounds
Hexapipes is a site for playing hexagonal pipes puzzle
Mail Must Move is an email made for those who want to get more done
Jot Down is a Visual Studio Code extension for quick and simple note taking
Kadium is an app for staying on top of YouTube channels' uploads
Samen zjin we #1metS10 is a campaign website to support S10, the dutch Eurovision finalist, by sending a drawing or a wish
On Writing Code is an interactive website to learn programming design patterns
Svelte-In-Motion lets you create Svelte-animated videos in your browser
Svelte Terminal is a terminal-like website
Bulletlist is a simple tool with a single purpose: making lists
Remind Me Again is an app for toggleable reminders on Mac, Linux and Windows
Heyweek is a timetracking app built for freelancers craving that extra pizzazz
Learning Resources
Starring the Svelte team
The Svelte Documentary is out! on Svelte Radio
Beginner SvelteKit by Vercel
Challenge: Explore Svelte by Building a Bubble Popping Game by Brittney Postma
Let's write a Client-side Routing Library with Svelte by lihautan
Svelte Sirens July Talk - Testing in Svelte with Jess Sachs
To Watch
10 Awesome Svelte UI Component Libraries by LevelUpTuts
Learn How SvelteKit Works and SvelteKit Endpoints by Joy of Code
SvelteKit using TS, and Storybook setup by Jarrod Kane
Building Apps with Svelte! by Simon Grimm
SvelteKit authentication, the better way - Tutorial by Pilcrow
To Read
Some assorted Svelte demos by Geoff Rich
Three ways to bootstrap a Svelte project by Thilo Maier
Design & build an app with Svelte by Hugo
Define routes via JS in SvelteKit by Max Core
Integrating Telegram api with SvelteKit by Shivam Meena
SvelteKit SSG: how to Prerender your SvelteKit Site by Rodney Lab
ADEO Design System: Building a Web Component library with Svelte and Rollup by Mohamed Mokhtari
The Svelte Handbook by The Valley of Code
Test Svelte Component Using Vitest & Playwright by David Peng
Transitional Apps with Phoenix and Svelte by Nathan Cahill
Tech Demos
Bringing the best GraphQL experience to Svelte by The Guild
Style your Svelte website faster with Stylify CSS by Stylify
Revamped Auth Helpers for Supabase (with SvelteKit support) by Supabase
Libraries, Tools & Components
Lucia is a simple, JWT based authentication library for SvelteKit that connects your SvelteKit app with your database
Skeleton is a UI component library for use with Svelte + Tailwind
pass-composer helps you compose your postprocessing passes for threlte scenes
@crikey/stores-* is a collection of libraries to extend Svelte stores for common use-cases
Svelte Chrome Storage is a lightweight abstraction between Svelte stores and Chrome extension storage
Svelte Schema Form is a form generator for JSON schema
svelte-gesture is a library that lets you bind richer mouse and touch events to any component or view
Snap Layout and universal-title-bar bring Windows 11 snap layout and title features to webapps and PWAs. Both can be imported as a .svelte module or as a web component
svelte-adapter-bun is an adapter for SvelteKit apps that generates a standalone Bun server
json2dir converts JSON objects into directory trees
Svelte Command Palette is a drop-in command palette component
svelte-use-drop-outside is a Svelte action to drop an element outside an area
PowerTable is a JavaScript component that turns JSON data into an interactive HTML table
svelte-slides is a slide show template for Svelte using Reveal.js
Svelte Theme Light is a Visual Studio Code theme based on the Svelte REPL
Did we miss anything? Let us know on Reddit or Discord!
Still looking for something to do in September? Come join us at the Svelte Summit in Stockholm! Get your tickets now.
See ya next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Special elements • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Special elements   Edit this page on GitHub On this page   On this page  <slot>permalink<slot><!-- optional fallback --></slot><slot name="x"><!-- optional fallback --></slot><slot prop={value} />Components can have child content, in the same way that elements can.
The content is exposed in the child component using the <slot> element, which can contain fallback content that is rendered if no children are provided.
<!-- Widget.svelte -->
<div>
<slot>
this fallback content will be rendered when no content is provided, like in the first example
</slot>
</div>
<!-- App.svelte -->
<Widget />
<!-- this component will render the default content -->
<Widget>
<p>this is some child content that will overwrite the default slot content</p>
</Widget>Note: If you want to render regular <slot> element, You can use <svelte:element this="slot" />.
<slot name="name">permalinkNamed slots allow consumers to target specific areas. They can also have fallback content.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</Widget>Components can be placed in a named slot using the syntax <Component slot="name" />.
In order to place content in a slot without using a wrapper element, you can use the special element <svelte:fragment>.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<HeaderComponent slot="header" />
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget>$$slotspermalink$$slots is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in $$slots. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it.
Note that explicitly passing in an empty named slot will add that slot's name to $$slots. For example, if a parent passes <div slot="title" /> to a child component, $$slots.title will be truthy within the child.
<!-- Card.svelte -->
<div>
<slot name="title" />
{#if $$slots.description}
<!-- This <hr> and slot will render only if a slot named "description" is provided. -->
<hr />
<slot name="description" />
{/if}
</div>
<!-- App.svelte -->
<Card>
<h1 slot="title">Blog Post Title</h1>
<!-- No slot named "description" was provided so the optional slot will not be rendered. -->
</Card><slot key={value}>permalinkSlots can be rendered zero or more times and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.
The usual shorthand rules apply — let:item is equivalent to let:item={item}, and <slot {item}> is equivalent to <slot item={item}>.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot prop={item} />
</li>
{/each}
</ul>
<!-- App.svelte -->
<FancyList {items} let:prop={thing}>
<div>{thing.text}</div>
</FancyList>Named slots can also expose values. The let: directive goes on the element with the slot attribute.
<!-- FancyList.svelte -->
<ul>
{#each items as item}
<li class="fancy">
<slot name="item" {item} />
</li>
{/each}
</ul>
<slot name="footer" />
<!-- App.svelte -->
<FancyList {items}>
<div slot="item" let:item>{item.text}</div>
<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</FancyList><svelte:self>permalinkThe <svelte:self> element allows a component to include itself, recursively.
It cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.
<script>
/** @type {number} */
export let count;
</script>
{#if count > 0}
<p>counting down... {count}</p>
<svelte:self count={count - 1} />
{:else}
<p>lift-off!</p>
{/if}<svelte:component>permalink<svelte:component this={expression} />The <svelte:component> element renders a component dynamically, using the component constructor specified as the this property. When the property changes, the component is destroyed and recreated.
If this is falsy, no component is rendered.
<svelte:component this={currentSelection.component} foo={bar} /><svelte:element>permalink<svelte:element this={expression} />The <svelte:element> element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element.
The only supported binding is bind:this, since the element type-specific bindings that Svelte does at build time (e.g. bind:value for input elements) do not work with a dynamic tag type.
If this has a nullish value, the element and its children will not be rendered.
If this is the name of a void element (e.g., br) and <svelte:element> has child elements, a runtime error will be thrown in development mode.
<script>
let tag = 'div';
export let handler;
</script>
<svelte:element this={tag} on:click={handler}>Foo</svelte:element><svelte:window>permalink<svelte:window on:event={handler} /><svelte:window bind:prop={value} />The <svelte:window> element allows you to add event listeners to the window object without worrying about removing them when the component is destroyed, or checking for the existence of window when server-side rendering.
Unlike <svelte:self>, this element may only appear at the top level of your component and must never be inside a block or element.
<script>
/** @param {KeyboardEvent} event */
function handleKeydown(event) {
alert(`pressed the ${event.key} key`);
}
</script>
<svelte:window on:keydown={handleKeydown} />You can also bind to the following properties:
innerWidth
innerHeight
outerWidth
outerHeight
scrollX
scrollY
online — an alias for window.navigator.onLine
devicePixelRatio
All except scrollX and scrollY are readonly.
<svelte:window bind:scrollY={y} />
Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of scrollX and scrollY will cause scrolling. However, if the scrolling behaviour is desired, call scrollTo() in onMount().
<svelte:document>permalink<svelte:document on:event={handler} /><svelte:document bind:prop={value} />Similarly to <svelte:window>, this element allows you to add listeners to events on document, such as visibilitychange, which don't fire on window. It also lets you use actions on document.
As with <svelte:window>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:document on:visibilitychange={handleVisibilityChange} use:someAction />You can also bind to the following properties:
fullscreenElement
visibilityState
All are readonly.
<svelte:body>permalink<svelte:body on:event={handler} />Similarly to <svelte:window>, this element allows you to add listeners to events on document.body, such as mouseenter and mouseleave, which don't fire on window. It also lets you use actions on the <body> element.
As with <svelte:window> and <svelte:document>, this element may only appear the top level of your component and must never be inside a block or element.
<svelte:body on:mouseenter={handleMouseenter} on:mouseleave={handleMouseleave} use:someAction /><svelte:head>permalink<svelte:head>...</svelte:head>This element makes it possible to insert elements into document.head. During server-side rendering, head content is exposed separately to the main html content.
As with <svelte:window>, <svelte:document> and <svelte:body>, this element may only appear at the top level of your component and must never be inside a block or element.
<svelte:head>
<title>Hello world!</title>
<meta name="description" content="This is where the description goes for SEO" />
</svelte:head><svelte:options>permalink<svelte:options option={value} />The <svelte:options> element provides a place to specify per-component compiler options, which are detailed in the compiler section. The possible options are:
immutable={true} — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed
immutable={false} — the default. Svelte will be more conservative about whether or not mutable objects have changed
accessors={true} — adds getters and setters for the component's props
accessors={false} — the default
namespace="..." — the namespace where this component will be used, most commonly "svg"; use the "foreign" namespace to opt out of case-insensitive attribute names and HTML-specific warnings
customElement="..." — the name to use when compiling this component as a custom element
<svelte:options customElement="my-custom-element" /><svelte:fragment>permalinkThe <svelte:fragment> element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact.
<!-- Widget.svelte -->
<div>
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<!-- App.svelte -->
<Widget>
<h1 slot="header">Hello</h1>
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>
</Widget> previous Component directives next svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: November 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: November 2021 Over 5000 stars to light up the showcase  Dani Sandoval Nov 1 2021 On this page   On this page  With SvelteKit crossing the 80% complete mark, over 5000 stars on GitHub, and now having more usage than Sapper, there's never been a better time to try it out! Many in the community have, making for quite a large showcase this month...
Also, don't miss out on Svelte Summit on November 20th - featuring speakers from around the world. Keep an eye out for a watch party in your area 👀
Now onto what's new!
New in Svelte and SvelteKitpermalink
svelte.dev now runs on SvelteKit alongside sveltesociety.dev. svelte.dev is a relatively complicated site with live code editing, authentication, and a markdown-based blog - making it a great way for us to really test out SvelteKit
A new compiler option, enableSourcemap, provides more control over the compiler output for JS and CSS sourcemaps (3.44.0). With this new feature, SvelteKit and the Vite Svelte plugin can now properly handle environment variables in .svelte templates (See sveltejs/kit#720 and sveltejs/vite-plugin-svelte#201)
The Svelte Language Tools now support reading the configuration of the VS Code CSS settings (#1219)
vite-plugin-svelte added a new experimental.prebundleSvelteLibraries option that makes it much faster to load Svelte libraries with many components like icon libraries and UI frameworks. The option can be set in the root of svelte.config.js. Please test it out and give us feedback!
SvelteKit will only route endpoints on the client, unless marked as rel="external" - reducing the size of the client JS and making it easier to refactor the router in the future (2656)
SvelteKit no longer supports Node 12 (2604)
SvelteKit was upgraded from Vite 2.6.0 to Vite 2.6.12 fixing an issue where Vite would corrupt the Svelte runtime (https://github.com/vitejs/vite/issues/4306). It also included two fixes from the SvelteKit team to avoid or make diagnosing Vite issues in SvelteKit templates easier (https://github.com/vitejs/vite/pull/5192 and https://github.com/vitejs/vite/pull/5193). Vite 2.7 is currently available in beta with additional fixes for SSR
To see all updates to Svelte and SvelteKit, check out the Svelte and SvelteKit changelog, respectively.
Community ShowcasepermalinkApps & Sites
Tangent is a clean and powerful notes app for Mac & Windows
The Pudding is a digital publication that explains ideas debated in culture with visual essays - rebuilt in SvelteKit
Power Switcher is an interactive overview of the development of the power supply in Switzerland, as energy sources migrate to cleaner sources
Sublive is a new way of making music by connecting musicians all over the world with a low-latency and high-quality audio network
Vibify helps you find hidden playlists within your music using your Spotify listening history
Browse Marvel Unlimited by Year is a SvelteKit site to see what issues are available on Marvel Unlimited for a given year
Files, a modern file explorer for Windows, has a new site rebuilt with SvelteKit
lil-hash is a simple URL shortener that produces easily rememberable and speakable shortened URLs
PWA Haven is a collection of small, fast, simple PWAs to replace native OS apps
DottoBit is a multi-color 16-bit drawing program with URL sharing built-in
Former Fast Document for Print is an invoice generator with beautiful designs, abilities for international languages and auto calculation
Helvetikon is a community maintained dictionary for the Swiss German language
Palitra App is a search-based color palette generator
Podcasts Featuring Svelte
Svelte Radio dives into the tech behind the recently released Svelte Summit website and a bunch of other fun stuff!
PodRocket, LogRocket's podcast, talks Svelte with Rich Harris
PodRocket also dove deep into Elder.js with Nick Reese
Web Rush and Rich Harris talk about the differences between a SPA and MPA, what role the server rendering plays, what client side hydration is, and the state of modern tooling for developing an SPA or MPA
devtools.fm talks with Rich Harris about developing engaging data visualizations and building the tools of tomorrow
Educational Content
Have Single-Page Apps Ruined the Web? Rich Harris answers the controversial question at this year's Jamstack Conf
Svelte vs SvelteKit - What's The Difference? LevelUpTuts provides a quick guide to explaining the relationship between the two projects. You can check out the rest of Scott Tolinski's guides to Svelte in his new series, "Weekly Svelte"
WebJeda's SvelteKit Hooks series continues this month with Part 3 - Cookie Session Authentication
Writing Context Aware Styles in a Svelte App is a guide to writing self-contained components that are able to dynamically adapt to their parents
A Beginner’s Guide to SvelteKit takes a beginner-friendly look at both Svelte and SvelteKit and build out a simple web app showing profile pages of imaginary users
Svelte vs React: Ending the Debate is a historical take on the age-old argument
Svelte Snacks | Custom Events for Modal Actions walks through a solid implementation of Svelte's handy custom event system
What Svelte's accessibility warnings won't tell you explains how Svelte's a11y warnings work and why you shouldn't count on them to make your app accessible
Libraries, Tools & Components
svelte-adapter-azure-swa is an adapter for Svelte apps that creates an Azure Static Web App, using an Azure function for dynamic server rendering
Inlang is a localization and internationalization toolkit that now supports SvelteKit
svelte-translate-tools extract/generate/compile translation files for your Svelte App at build time
@egjs/svelte-infinitegrid lets you implement various grids composed of different card elements whose sizes vary
svelte-reactive-css-preprocess makes it easier to update css variable values whenever your component state changes
Sveltegen is a CLI for simple and easy creation of actions, components, and routes
svelte-advanced-multistep-form helps to wrap form elements passing down styles to the component to be rendered, also it presents each form step in a ordered and stylish way
gQuery is a GraphQL Fetcher & Cache for SvelteKit
date-picker-svelte is a date and time picker for Svelte
TwelveUI is a Svelte component library with accessibility built-in
svelte-outclick is a Svelte component that allows you to listen for clicks outside of an element, by providing you an outclick event
svelte-zero-api lets you use SvelteKit APIs like client functions - with support for TypeScript
svelte-recaptcha-v2 is a Google reCAPTCHA v2 implementation for Svelte SPA, SSR and sveltekit static sites.
Svelte Body lets you apply styles to the body in routes - designed to work with SvelteKit and Routify.
svelte-debug-console is a debug.js implementation for Svelte SPA, SSR and sveltekit static sites that lets you see your debug statements in the browser.
SVEO is a dependency-free approach to declare metadata on SvelteKit pages
@svelte-drama/suspense is a Svelte component that implements the core idea of React's <Suspense>. Also check out SWR for Svelte to make refetching even easier.
sveltekit-adapter-browser-extension is an adapter for SvelteKit which turns your app into a cross-platform browser extension
Check out the community site sveltesociety.dev for more tools, templates, adders and adapters from across the Svelte ecosystem.
Looking for more Svelte goodness? Join us on Reddit or Discord!
Hacktoberfest 2023 with SvelteKit
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Hacktoberfest 2023 with SvelteKit SvelteKit joins in the Hacktoberfest event in 2023  Willow (GHOST) & Braden Wiggins Oct 1 2023 On this page   On this page  Sveltekit 🧡 HacktoberfestpermalinkWe're excited to announce SvelteKit's participation in this year's Hacktoberfest! Hacktoberfest is a global event that takes place every October, during which developers are encouraged to contribute to open-source projects like SvelteKit. The goal is to foster a vibrant open-source community, celebrate shared knowledge, and make the world of coding more accessible to all. You can find other participating repositories by searching the hacktoberfest topic on github.
Getting StartedpermalinkThe first step is to register for Hacktoberfest. Once you've registered, any PRs submitted to Sveltekit will count towards your participation in the event!
ContributingpermalinkIf you need inspiration when looking for an issue to fix, check out the low hanging fruit, contributions-welcome, ready to implement, or documentation tags.
It's a good idea to communicate clearly and often about what you're trying to solve or take on. You can do this by commenting on the issues you intend to take on. This helps avoid duplicate work and ensures that your contribution is in line with the project's goals. Nobody likes to have their work rejected, so it's best to ask questions early and often!
Join our Discord and ask questions in the dedicated #hacktoberfest channel. We're happy to help you get started!
We're excited to see what you've got in store for SvelteKit! Happy hacking! 🎃
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
If blocks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks REPL  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Flight booker • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker REPL  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Ease Visualiser • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser REPL   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Announcing SvelteKit 1.0
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Announcing SvelteKit 1.0 Web development, streamlined  The Svelte team Dec 14 2022 On this page   On this page  After two years in development, SvelteKit has finally reached 1.0. As of today, it’s the recommended way to build Svelte apps of all shapes and sizes.
We’re so excited to share this release with you. It’s the culmination of thousands of hours of work, both from the Svelte core team and the wider community, and we think it’s the most enjoyable way to build production-grade websites, whether you’re a solo developer working on a small project or part of a large team.
To get started, run npm create svelte@latest, and visit the docs and (experimental!) interactive tutorial.
Svelte Radio Live: the Christmas special
What is SvelteKit?permalinkSvelteKit is a framework for building web applications on top of Svelte, a UI component framework that developers love for its performance and ease of use.
If you’ve used component frameworks like Svelte, you’ll know that they make it much easier to build user interfaces than working with the DOM directly. But they leave a lot of questions unanswered:
How do I structure my source code?
How do I add server-side rendering?
How do I add routing that works on the server and in the browser?
How do I make client-side routing accessible?
How do I fetch data?
How do I mutate data?
How do I handle errors?
How do I optimise my production build?
How do I handle environment variables sensibly and securely?
How do I add CSP headers and CSRF protection?
How do I add a service worker that knows what to cache?
How do I prepare my application for deployment?
An application framework is designed to answer these questions. SvelteKit does so with a design informed by the real world needs of an army of beta testers (many of whom have been running SvelteKit in production for some time — we salute your courage and thank you for the invaluable feedback) and the best ideas from other application frameworks including Next.js and Remix.
How is it different?permalinkWeb developers today are spoiled for choice. Aside from the aforementioned frameworks, there are options like Astro, battle-tested server frameworks like Rails and Laravel, and a million static site generators. These are all wonderful tools, and you should feel good about choosing them.
SvelteKit does things a little differently, however:
Unlike traditional ‘multi-page app’ or MPA frameworks, it defaults to client-side navigation after the initial server-rendered page load. This enables faster page transitions, state that persists between pages (such as a sidebar’s scroll position), and less data usage. It also avoids re-running third party scripts like analytics on every single page load.
Unlike traditional server frameworks, it allows you to use one language, instead of effectively having two tightly-coupled apps (one to generate HTML, one to handle client-side interaction). Because SvelteKit runs wherever JavaScript runs, you can deploy your app as a traditional Node server, or using serverless functions — including at the edge.
Unlike static site generators, you can build apps with personalised or dynamic data — without the performance-killing, layout-shifting effects of fetching it from the browser after the page loads.
With SvelteKit, you have flexibility. Many frameworks assume there’s one correct way to build an app, but reality is more nuanced. It’s not true, for example, that prerendering static pages is just a poor man’s cache-control — it also lets you do build-time validation or render data from the filesystem that your edge functions can’t access, and acts as a hedge against flaky databases. It’s not true that everything needs server-side rendering — it’s the right default if you want robust, performant apps with good SEO, but there are countless exceptions.
In a SvelteKit app, you can make these choices with as much granularity as you need — for example the page you’re looking at is prerendered, but the REPL is rendered with dynamic data. Switching between the two is a single line of code. We call apps built with this approach ‘transitional apps’.
What can I use with SvelteKit?permalinkBecause SvelteKit uses Vite, the lightning-fast build tool, it has out-of-the-box support for hot module reloading, TypeScript, and many other things that developers rely on. You can install plugins from the vast Vite and Rollup ecosystems to add support for other tools.
When creating a SvelteKit project you’ll be asked if you want to add TypeScript, ESLint, Prettier, Playwright (for end-to-end browser tests) and Vitest (for unit tests). Integration guides already exist for many popular projects — Tailwind and Supabase, for example. You can use Storybook and Histoire for your component stories. The community-maintained svelte-add lets you add a growing list of other integrations with a single command.
And of course you have access to everything npm has to offer. (Note that some packages require Node.js, and so can only be used when deployed to Node-based platforms.)
Where can I deploy my apps?permalinkAnywhere! The SvelteKit CLI needs Node.js installed locally, but the framework itself has no dependencies on any platform. This means you can deploy it wherever JavaScript runs.
This is made possible by adapters. The default adapter, adapter-auto, provides zero-config support for Vercel, Netlify, Cloudflare Pages and Azure Static Web Apps, with more platforms coming in the future. Community-provided adapters add support for Deno, Bun, Firebase, App Engine, AWS Lambda and many others.
You can also deploy your app as a Node.js server using adapter-node.
If your entire app is suitable for prerendering, or is a single-page app (SPA), you can use adapter-static — which turns SvelteKit into a static site generator — with any web server including GitHub Pages.
AcknowledgementspermalinkThis release was made possible by the hard work of a great many people. First and foremost, we’d like to thank the Svelte community, whose insightful feedback and myriad contributions large and small have shaped this project into something we’re truly proud to share with the wider community of web developers.
We’re also indebted to Svelte Society and the community ambassadors, who, through initiatives like Svelte Summit and Svelte Sirens, have created a lively and welcoming space for Svelte developers, both online and IRL.
There are too many content creators to name without leaving people left out, but to everyone who has released courses and produced educational content around SvelteKit: thank you.
Back in early 2021, when we adopted Vite, we were the first major application framework to do so. At the time it was a risky bet, but we’re thrilled with how that bet paid off. Vite has grown to be an unstoppable force in the JavaScript world, and the Vite team have been brilliant and gracious partners.
We’ve had terrific support from teams at Vercel, Netlify and Cloudflare to make zero-config deployments for those platforms possible.
Our friends at StackBlitz worked feverishly to make learn.svelte.dev, our first-of-its-kind WebContainer-powered interactive tutorial, a reality.
Finally, none of this could have happened without the project’s financial supporters. This includes hundreds of backers on Open Collective, and Vercel, which employs two core developers (Rich and Simon) to work on Svelte full time and supports the project in many other ways, such as Steph’s Beginner SvelteKit course.
MigratingpermalinkIf you have an app built with pre-release versions of SvelteKit, we recommend upgrading to the final pre-release version — @sveltejs/kit@1.0.0-next.588 — before upgrading to 1.0, as the stable release removes errors and warnings that were used for migrating between pre-release versions. We also recommend consulting this migration guide, especially if you’re currently on an older version than 1.0.0-next-406.
What’s next?permalinkSvelteKit 1.0 is the beginning, not the end. It’s ready for production use today, but we’re just getting started. Our roadmap includes built-in i18n support, incremental static regeneration, granular control over deployment region and runtime, image optimisation, and many other improvements. Next year we’ll also start work on Svelte 4 — more on that later.
But don’t let us have the final word. Svelte is a community project, and many of our best ideas aren’t really ours at all — they’re yours. Subscribe to Svelte Society on Twitter and YouTube to stay up to date, and join us in our Discord server and on GitHub to contribute back.
We can’t wait to see what you build.
What's new in Svelte: May 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: May 2023 New Ambassadors, a new ESLint plugin and a whole bunch of SvelteHack submissions  Dani Sandoval May 1 2023 On this page   On this page  Before we dive into the updates, there's a few announcements worth mentioning at the top:
New Svelte AmbassadorspermalinkRegular features of this newsletter and all-around great content creators for Svelte JoyOfCode and HuntaByte have been appointed as Svelte Ambassadors. Ambassadors are people who are well known for their helpfulness and contributions and for upholding Svelte’s reputation as a friendly, welcoming community, and we’re deeply grateful for their involvement!
SvelteHack winners will be announced May 6thpermalinkIn a just a few days, we'll find out who won SvelteHack - the Svelte Hackathon that took place between February 17th and April 17th. Tune in to Svelte Summit on May 6th to see if your favorite project was chosen 👀
Lots of submissions to the hackathon are featured in this month's showcase... but first, let's see what's new!
What's new in Sveltepermalink
style blocks now support CSS @container queries (3.58.0)
bind:innerText is now available for contenteditable elements (3.58.0)
A new accessability warning, a11y-interactive-supports-focus will now warn when interactive elements are not focusable (3.58.0)
For all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
What's new in SvelteKitpermalink
When hot module reloading (HMR) is enabled, the page will reload after an error is fixed (1.14.0, #9497)
Two apps loaded into the same html page can now be loaded simultaneously in "embedded" mode (1.15.7, #9610)
Vite's compilation will now log warnings for packages that use the svelte field to resolve Svelte files differently than standard Vite resolve (vite-plugin-svelte@2.1.0, kit@1.15.8)
What's new in Language Toolspermalink
Support for <svelte:document> (#1958) and intellisense report for new bindings (#1957) (107.3.0)
The new fix-all menu option for the "Quick fix..." makes it easy to "Add all missing imports" and other detected errors (107.3.0, #1939)
We have a new and better official ESLint plugin! Previous support for Svelte in ESLint did not handle the template AST well, resulting in false positive/negatives and a high barrier to custom ESLint rules. This new official version is based on ota-meshi's svelte-eslint-parser and is ready for prime time. Try it out and share your feedback!
Community ShowcasepermalinkApps & Sites built with Svelte
Sound of War is a storytelling data visualization project to help understand the scale of destruction in Ukraine
Syntax FM's swag shop is now built with SvelteKit, PlanetScale and Prisma
Appreciation Jar is your own private space where you can send encouraging and appreciative messages to your partner
Japanese Jouzu is a Japanese sound and symbol learning app
MarkMyImages is a tool to bulk watermark, image resize, rename, effects, and more - all on-device for speed and privacy
Immich is a self-hosted photo and video backup solution directly from your mobile phone
Earbetter is an ear training game and tools for playing and programming music and audio
Tune Twisters is a guessing game for songs... in reverse
ResponseHunt is a mystery game based on browser requests - use your programming skills to get to the “golden” response
Wolfensvelte 3D is a Svelte "port" of Wolfenstein 3D
Code Solving teaches how to solve problems with code
Make Bookmarklets is a quick way to create JavaScript bookmarklets with linting, intellisense and auto-minification
GeniePM is an AI tool to help Product Managers write user stories and requirements
Bitesized News is an AI that delivers news digests and responds to questions via chat
Open Tunings is a place to explore alternative guitar tunings without having to retune your guitar
BlinkSMS is a text alert tool for Stockholm Student Housing to help with booking laundry times
Dev Links helps dev showcase multiple links in a single place - similar to Linktree and Kofi
Audiogest is a tool to convert speech to text & summarize any audio
MineSweep is a rendition of Minesweeper built with Svelte and JavaScript
Biolytics lets you import your lab tests to see all your lab tests in one place
Zero share is a secure P2P file sharing using WebRTC
Svelte lab is a sandbox for creating and sharing SvelteKit projects
Learning Resources
Featuring Svelte Contributors and Ambassadors
Dev Vlog: April 2023 - TypeScript vs JSDoc, Transitions API, Dominic Gannaway joins Svelte team
Rich Harris on frameworks, the web, and the edge. from Vercel's Svelte Meetup in NYC
Svelte & SvelteKit taught by Rich Harris on Frontend Masters
This Week in Svelte:
2023 March 31 - SvelteKit, Svelte; static sites and headless CMS demos
2023 April 22 - SvelteKit 1.15.7, skip links, error handling, static assets
2023 April 14 - SvelteKit 1.15.5, accessible buttons, advanced toggle state 🧪🔥
2023 April 21 - SvelteKit 1.15.7, skip links, error handling, static assets
Svelte Radio
Using Svelte in React with Puru Vijay
Eric Brehault and Nuclia
Svelte at AppWrite with Alex Patterson
Svelte in Research at Dartmouth with Wasita and Eshin
To Watch
The Complete SvelteKit Course For Building Modern Web Apps and Simple SvelteKit Page Transitions by Joy of Code
Svelte For React Developers | Your Next JavaScript Framework? by Cretezy
Svelte & SvelteKit: The Complete Guide by Ali Alaa on Udemy
ChatGPT-4 with SvelteKit 🤖 Generative AI on the EDGE 🌍 by Johnny Magrippis
To Read
Headless WordPress with GraphQL and SvelteKit and How to fix the duplicate meta tags issue in SvelteKit by Justin Ahinon
How to setup tRPC in a SvelteKit project by Raqueebuddin Aziz
Better Data Visualizations with Svelte by newline
Offline App with SvelteKit + SQLite Part 1: Setup WebAssembly SQLite by hartenfellerdev
Libraries, Tools & Components
Sveltris lets you intermix UI primitives like components, and state primitives like hooks between frameworks, without even noticing
SwiftMarket is an E-Commerce solution built with SvelteKit, Pocketbase as a database and Stripe for payments
Svelegante is a Classy writable store for Svelte
Table Generator lets you create, design and customize your own tables tables online using a graphical editor
Svelte Animated Headline is an animated headline component that can grab attention in an informative way
SvelteKit Music App Example demonstrates how to connect and process data as well as some practical examples of how to develop frontend components with TailwindCSS
Socio is a WebSocket Real-Time Communication (RTC) API framework to connect your front-end logic to a back-end database reactively
Flowbite Svelte is an official Flowbite component library for Svelte
Wundergraph, a backend for frontend framework, just released their Svelte Query client
Lucia just reached 1.0 for their simple and flexible auth library for SvelteKit
svelte-stepper is a simple library for building animated stepper flows with Svelte
As always, feel free to let us know if we missed anything on Reddit or Discord.
See ya next time!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Element directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Element directives   Edit this page on GitHub On this page   On this page  As well as attributes, elements can have directives, which control the element's behaviour in some way.
on:eventnamepermalinkon:eventname={handler}on:eventname|modifiers={handler}Use the on: directive to listen to DOM events.
App.svelte<script>
let count = 0;
/** @param {MouseEvent} event */
function handleClick(event) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>App.svelte<script lang="ts">
let count = 0;
function handleClick(event: MouseEvent) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.
<button on:click={() => (count += 1)}>
count: {count}
</button>Add modifiers to DOM events with the | character.
<form on:submit|preventDefault={handleSubmit}>
<!-- the `submit` event's default is prevented,
so the page won't reload -->
</form>The following modifiers are available:
preventDefault — calls event.preventDefault() before running the handler
stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element
stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.
passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)
nonpassive — explicitly set passive: false
capture — fires the handler during the capture phase instead of the bubbling phase
once — remove the handler after the first time it runs
self — only trigger handler if event.target is the element itself
trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.
Modifiers can be chained together, e.g. on:click|once|capture={...}.
If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.
<button on:click> The component itself will emit the click event </button>It's possible to have multiple event listeners for the same event:
<script>
let counter = 0;
function increment() {
counter = counter + 1;
}
/** @param {MouseEvent} event */
function track(event) {
trackEvent(event);
}
</script>
<button on:click={increment} on:click={track}>Click me!</button>bind:propertypermalinkbind:property={variable}Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.
The simplest bindings reflect the value of a property, such as input.value.
<input bind:value={name} />
<textarea bind:value={text} />
<input type="checkbox" bind:checked={yes} />If the name matches the value, you can use a shorthand.
<input bind:value />
<!-- equivalent to
<input bind:value={value} />
-->Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type="number"), the value is undefined.
<input type="number" bind:value={num} />
<input type="range" bind:value={num} />On <input> elements with type="file", you can use bind:files to get the FileList of selected files. It is readonly.
<label for="avatar">Upload a picture:</label>
<input accept="image/png, image/jpeg" bind:files id="avatar" name="avatar" type="file" />If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.
<script>
let value = 'Hello World';
</script>
<input
on:input={() => console.log('Old value:', value)}
bind:value
on:input={() => console.log('New value:', value)}
/>Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.
Binding <select> valuepermalinkA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).
<select bind:value={selected}>
<option value={a}>a</option>
<option value={b}>b</option>
<option value={c}>c</option>
</select>A <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.
<select multiple bind:value={fillings}>
<option value="Rice">Rice</option>
<option value="Beans">Beans</option>
<option value="Cheese">Cheese</option>
<option value="Guac (extra)">Guac (extra)</option>
</select>When the value of an <option> matches its text content, the attribute can be omitted.
<select multiple bind:value={fillings}>
<option>Rice</option>
<option>Beans</option>
<option>Cheese</option>
<option>Guac (extra)</option>
</select>Elements with the contenteditable attribute support the following bindings:
innerHTML
innerText
textContent
There are slight differences between each of these, read more about them here.
<div contenteditable="true" bind:innerHTML={html} /><details> elements support binding to the open property.
<details bind:open={isOpen}>
<summary>Details</summary>
<p>Something small enough to escape casual notice.</p>
</details>Media element bindingspermalinkMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...
duration (readonly) — the total duration of the video, in seconds
buffered (readonly) — an array of {start, end} objects
played (readonly) — ditto
seekable (readonly) — ditto
seeking (readonly) — boolean
ended (readonly) — boolean
readyState (readonly) — number between (and including) 0 and 4
...and five two-way bindings:
currentTime — the current playback time in the video, in seconds
playbackRate — how fast or slow to play the video, where 1 is 'normal'
paused — this one should be self-explanatory
volume — a value between 0 and 1
muted — a boolean value indicating whether the player is muted
Videos additionally have readonly videoWidth and videoHeight bindings.
<video
src={clip}
bind:duration
bind:buffered
bind:played
bind:seekable
bind:seeking
bind:ended
bind:readyState
bind:currentTime
bind:playbackRate
bind:paused
bind:volume
bind:muted
bind:videoWidth
bind:videoHeight
/>Image element bindingspermalinkImage elements (<img>) have two readonly bindings:
naturalWidth (readonly) — the original width of the image, available after the image has loaded
naturalHeight (readonly) — the original height of the image, available after the image has loaded
<img
bind:naturalWidth
bind:naturalHeight
></img>Block-level element bindingspermalinkBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:
clientWidth
clientHeight
offsetWidth
offsetHeight
<div bind:offsetWidth={width} bind:offsetHeight={height}>
<Chart {width} {height} />
</div>bind:grouppermalinkbind:group={variable}Inputs that work together can use bind:group.
<script>
let tortilla = 'Plain';
/** @type {Array<string>} */
let fillings = [];
</script>
<!-- grouped radio inputs are mutually exclusive -->
<input type="radio" bind:group={tortilla} value="Plain" />
<input type="radio" bind:group={tortilla} value="Whole wheat" />
<input type="radio" bind:group={tortilla} value="Spinach" />
<!-- grouped checkbox inputs populate an array -->
<input type="checkbox" bind:group={fillings} value="Rice" />
<input type="checkbox" bind:group={fillings} value="Beans" />
<input type="checkbox" bind:group={fillings} value="Cheese" />
<input type="checkbox" bind:group={fillings} value="Guac (extra)" />
bind:group only works if the inputs are in the same Svelte component.
bind:thispermalinkbind:this={dom_node}To get a reference to a DOM node, use bind:this.
<script>
import { onMount } from 'svelte';
/** @type {HTMLCanvasElement} */
let canvasElement;
onMount(() => {
const ctx = canvasElement.getContext('2d');
drawStuff(ctx);
});
</script>
<canvas bind:this={canvasElement} />class:namepermalinkclass:name={value}class:nameA class: directive provides a shorter way of toggling a class on an element.
<!-- These are equivalent -->
<div class={isActive ? 'active' : ''}>...</div>
<div class:active={isActive}>...</div>
<!-- Shorthand, for when name and value match -->
<div class:active>...</div>
<!-- Multiple class toggles can be included -->
<div class:active class:inactive={!active} class:isAdmin>...</div>style:propertypermalinkstyle:property={value}style:property="value"style:propertyThe style: directive provides a shorthand for setting multiple styles on an element.
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
<!-- Variables can be used -->
<div style:color={myColor}>...</div>
<!-- Shorthand, for when property and variable name match -->
<div style:color>...</div>
<!-- Multiple styles can be included -->
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
<!-- Styles can be marked as important -->
<div style:color|important="red">...</div>When style: directives are combined with style attributes, the directives will take precedence:
<div style="color: blue;" style:color="red">This will be red</div>use:actionpermalinkuse:actionuse:action={parameters}tsaction = (node: HTMLElement, parameters: any) => {	update?: (parameters: any) => void,	destroy?: () => void}Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.
Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
export let bar;
/** @type {import('svelte/action').Action}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />Read more in the svelte/action page.
transition:fnpermalinktransition:fntransition:fn={params}transition:fn|globaltransition:fn|global={params}transition:fn|localtransition:fn|local={params}tstransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}A transition is triggered by an element entering or leaving the DOM as a result of a state change.
When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.
The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.
{#if visible}
<div transition:fade>fades in and out</div>
{/if}Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.
{#if x}
{#if y}
<!-- Svelte 3: <p transition:fade|local> -->
<p transition:fade>fades in and out only when y changes</p>
<!-- Svelte 3: <p transition:fade> -->
<p transition:fade|global>fades in and out when x or y change</p>
{/if}
{/if}
By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.
Transition parameterspermalinkLike actions, transitions can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#if visible}
<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}Custom transition functionspermalinkTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the transition begins, with different t and u arguments.
<script>
import { elasticOut } from 'svelte/easing';
/** @type {boolean} */
export let visible;
/**
* @param {HTMLElement} node
* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
*/
function whoosh(node, params) {
const existingTransform = getComputedStyle(node).transform.replace('none', '');
return {
delay: params.delay || 0,
duration: params.duration || 400,
easing: params.easing || elasticOut,
css: (t, u) => `transform: ${existingTransform} scale(${t})`
};
}
</script>
{#if visible}
<div in:whoosh>whooshes in</div>
{/if}A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
App.svelte<script>
export let visible = false;
/**
* @param {HTMLElement} node
* @param {{ speed?: number }} params
*/
function typewriter(node, { speed = 1 }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
}
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}App.svelte<script lang="ts">
export let visible = false;
function typewriter(node: HTMLElement, { speed = 1 }: { speed?: number }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
},
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.
Transition functions also receive a third argument, options, which contains information about the transition.
Available values in the options object are:
direction - one of in, out, or both depending on the type of transition
Transition eventspermalinkAn element with transitions will dispatch the following events in addition to any standard DOM events:
introstart
introend
outrostart
outroend
{#if visible}
<p
transition:fly={{ y: 200, duration: 2000 }}
on:introstart={() => (status = 'intro started')}
on:outrostart={() => (status = 'outro started')}
on:introend={() => (status = 'intro ended')}
on:outroend={() => (status = 'outro ended')}
>
Flies in and out
</p>
{/if}in:fn/out:fnpermalinkin:fnin:fn={params}in:fn|globalin:fn|global={params}in:fn|localin:fn|local={params}out:fnout:fn={params}out:fn|globalout:fn|global={params}out:fn|localout:fn|local={params}Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.
Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.
{#if visible}
<div in:fly out:fade>flies in, fades out</div>
{/if}animate:fnpermalinkanimate:nameanimate:name={params}tsanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}tsDOMRect {	bottom: number,	height: number,	​​left: number,	right: number,	​top: number,	width: number,	x: number,	y: number}An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.
Animations can be used with Svelte's built-in animation functions or custom animation functions.
<!-- When `list` is reordered the animation will run-->
{#each list as item, index (item)}
<li animate:flip>{item}</li>
{/each}Animation ParameterspermalinkAs with actions and transitions, animations can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#each list as item, index (item)}
<li animate:flip={{ delay: 500 }}>{item}</li>
{/each}Custom animation functionspermalinkAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.
If the returned object has a css method, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the animation begins, with different t and u arguments.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
css: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each}A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each} previous Special tags next Component directives
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Clock • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock REPL  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Style props break svg elements • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Virtual DOM is pure overhead
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Virtual DOM is pure overhead Let's retire the 'virtual DOM is fast' myth once and for all  Rich Harris Dec 27 2018 On this page   On this page  If you've used JavaScript frameworks in the last few years, you've probably heard the phrase 'the virtual DOM is fast', often said to mean that it's faster than the real DOM. It's a surprisingly resilient meme — for example people have asked how Svelte can be fast when it doesn't use a virtual DOM.
It's time to take a closer look.
What is the virtual DOM?permalinkIn many frameworks, you build an app by creating render() functions, like this simple React component:
tsfunction HelloMessage(props) {	return <div className="greeting">Hello {props.name}</div>;}You can do the same thing without JSX...
tsfunction HelloMessage(props) {	return React.createElement('div', { className: 'greeting' }, 'Hello ', props.name);}...but the result is the same — an object representing how the page should now look. That object is the virtual DOM. Every time your app's state updates (for example when the name prop changes), you create a new one. The framework's job is to reconcile the new one against the old one, to figure out what changes are necessary and apply them to the real DOM.
How did the meme start?permalinkMisunderstood claims about virtual DOM performance date back to the launch of React. In Rethinking Best Practices, a seminal 2013 talk by former React core team member Pete Hunt, we learned the following:
This is actually extremely fast, primarily because most DOM operations tend to be slow. There's been a lot of performance work on the DOM, but most DOM operations tend to drop frames.
Screenshot from Rethinking Best Practices at JSConfEU 2013
But hang on a minute! The virtual DOM operations are in addition to the eventual operations on the real DOM. The only way it could be faster is if we were comparing it to a less efficient framework (there were plenty to go around back in 2013!), or arguing against a straw man — that the alternative is to do something no-one actually does:
tsonEveryStateChange(() => {	document.body.innerHTML = renderMyApp();});Pete clarifies soon after...
React is not magic. Just like you can drop into assembler with C and beat the C compiler, you can drop into raw DOM operations and DOM API calls and beat React if you wanted to. However, using C or Java or JavaScript is an order of magnitude performance improvement because you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.
...but that's not the part that stuck.
So... is the virtual DOM slow?permalinkNot exactly. It's more like 'the virtual DOM is usually fast enough', but with certain caveats.
The original promise of React was that you could re-render your entire app on every single state change without worrying about performance. In practice, I don't think that's turned out to be accurate. If it was, there'd be no need for optimisations like shouldComponentUpdate (which is a way of telling React when it can safely skip a component).
Even with shouldComponentUpdate, updating your entire app's virtual DOM in one go is a lot of work. A while back, the React team introduced something called React Fiber which allows the update to be broken into smaller chunks. This means (among other things) that updates don't block the main thread for long periods of time, though it doesn't reduce the total amount of work or the time an update takes.
Where does the overhead come from?permalinkMost obviously, diffing isn't free. You can't apply changes to the real DOM without first comparing the new virtual DOM with the previous snapshot. To take the earlier HelloMessage example, suppose the name prop changed from 'world' to 'everybody'.
Both snapshots contain a single element. In both cases it's a <div>, which means we can keep the same DOM node
We enumerate all the attributes on the old <div> and the new one to see if any need to be changed, added or removed. In both cases we have a single attribute — a className with a value of "greeting"
Descending into the element, we see that the text has changed, so we'll need to update the real DOM
Of these three steps, only the third has value in this case, since — as is the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip straight to step 3:
tsif (changed.name) {	text.data = name;}(This is almost exactly the update code that Svelte generates. Unlike traditional UI frameworks, Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.)
It's not just the diffing thoughpermalinkThe diffing algorithms used by React and other virtual DOM frameworks are fast. Arguably, the greater overhead is in the components themselves. You wouldn't write code like this...
tsfunction StrawManComponent(props) {	const value = expensivelyCalculateValue(props.foo);
return <p>the value is {value}</p>;}...because you'd be carelessly recalculating value on every update, regardless of whether props.foo had changed. But it's extremely common to do unnecessary computation and allocation in ways that seem much more benign:
tsfunction MoreRealisticComponent(props) {	const [selected, setSelected] = useState(null);
return (		<div>			<p>Selected {selected ? selected.name : 'nothing'}</p>
<ul>				{props.items.map((item) => (					<li>						<button onClick={() => setSelected(item)}>{item.name}</button>					</li>				))}			</ul>		</div>	);}Here, we're generating a new array of virtual <li> elements — each with their own inline event handler — on every state change, regardless of whether props.items has changed. Unless you're unhealthily obsessed with performance, you're not going to optimise that. There's no point. It's plenty fast enough. But you know what would be even faster? Not doing that.
React Hooks doubles down on defaulting to doing unnecessary work, with predictable results.
The danger of defaulting to doing unnecessary work, even if that work is trivial, is that your app will eventually succumb to 'death by a thousand cuts' with no clear bottleneck to aim at once it's time to optimise.
Svelte is explicitly designed to prevent you from ending up in that situation.
Why do frameworks use the virtual DOM then?permalinkIt's important to understand that virtual DOM isn't a feature. It's a means to an end, the end being declarative, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is generally good enough. That means less buggy code, and more time spent on creative tasks instead of tedious ones.
But it turns out that we can achieve a similar programming model without using virtual DOM — and that's where Svelte comes in.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: April 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: April 2023 Loads of new Svelte compiler features, plus Svelte Summit and SvelteHack  Dani Sandoval Apr 1 2023 On this page   On this page  Happy April, everyone! This month, we're covering all the new features in the Svelte compiler, some quality-of-life improvements in SvelteKit and a huge showcase (like always).
In core team news, Dominic Gannaway has joined Vercel to work on Svelte full-time! Dominic is a world-class expert on wringing performance out of javascript engines, on the DOM, on reactivity, on accessibility, and more! You might know him as the creator of the Inferno UI framework or Lexical, Meta's WYSIWYG editor. It'll be great to see his talents at work across the Svelte ecosystem 🌱
Don't forget! Svelte Summit Spring, Svelte's 6th virtual conference, will be happening on May 6th. Also, there's just two weeks left until the end of SvelteHack... It's a great opportunity to share your creations with the community and maybe even earn a prize!
Now let's jump into this month's changes...
What's new in Sveltepermalink
A bunch of new features are now available as of 3.56.0!
Add |stopImmediatePropagation event modifier for on:eventname (#5085, Docs)
Add axis parameter to slide transition (#6182, Docs)
Add readonly utility to convert writable store to readonly (#6518, Docs)
Add readyState binding for media elements (#6666, Docs)
Add naturalWidth and naturalHeight bindings to images (#7771, Docs)
Support <!-- svelte-ignore ... --> on components (#8082)
Inputs in a bind:group will clear when their value is set to undefined (3.56.0, #8214)
<input> values will now persist when swapping elements with spread attributes in an {#each} block (3.56.0, #7578)
Better warnings across the board - from noreferrer to aria rules (3.56.0)
Add svelte:document (3.57.0, #3310)
The style: directive will now take precedence over a style= attribute (3.57.0, #7475)
CSS units are now supported in the fly and blur transitions (3.57.0, #7623, Docs)
For all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
What's new in SvelteKitpermalink
You can now get all cookies for a request with cookies.getAll (1.10.0, #9287, Docs)
Easily manage the submission status of (multiple) forms with the new exposed submitter parameter in use:enhance (1.12.0, #9425, Docs)
The default error page now has dark mode styles (1.13.0, #9460)
You can now omit types on all methods and variables with special meaning to SvelteKit and still benefit from full type safety! Read more about it in the announcement blog post
Community ShowcasepermalinkApps & Sites built with Svelte
Peerbeer lets you share files peer-to-peer (p2p) without any third parties or data limits
unplaneted is an interface for exploring very large space images
PokeBook is a digital notebook for writing poetry that provides a beautiful distraction-free environment and autosave
papi lets you create prompts for AI models and share them with others with a unique link
Mathesar is a straightforward open source tool that provides a spreadsheet-like interface to a PostgreSQL database
SQLite Playground lets you learn how SQLite runs and stores data in the browser
svgl is a beautiful library with SVG logos
Swehl is an eCommerce store, community and tutorial site for breastfeeding mothers
Codeverter is a GPT-powered code converter, allowing you to convert between different languages and frameworks
Game On Or Not is a free web app that helps you organize sports with your friends
Sveltia CMS is a Git-based lightweight headless CMS
Learning Resources
Featuring Svelte Contributors and Ambassadors
Streaming, snapshots, and other new features since SvelteKit 1.0 by Geoff Rich on the svelte.dev Blog
Dev Vlog: Rich Harris shows us what's new in Svelte and Kit, March 2023 from Svelte Society
If you missed this one live, check out the next one - scheduled for April 5th
Svelte Society - London February 2023
Svelte Radio episodes from this month:
We all live in a Svelte Submarine
Building furniture using Svelte with Bert Bengtson
Svelte Hackathon Announcement
LevelUpTuts 6 months later with Scott Tolinski
I got a cold and had fever dreams about React 😱
This Week In Svelte videos:
2023 March 10 - New prompts! Underline your links!
2023 March 17 - More a11y warnings! How to: Dynamic Form Actions!
2023 March 23 - SvelteKit 1.13.0, Vitest and Playwright overview
To Watch or Hear
Full Stack SvelteKit App Deployment Using Vercel And Supabase For $0 by Joy of Code
Why Is Svelte.js so Popular? by Prismic
Interactive Tables in SvelteKit with TanStack Table by hartenfellerdev
SvelteKit + GraphQL with Houdini by Aftab Alam
To Read
Thoughts on Svelte by Ty Hopp
Storybook on why (and how) it supports SvelteKit
Svelte Authentication Tutorial with Authorizer by The Thinks
Use Zod to Validate Forms on the Server with SvelteKit by Ross Robino
Do I need a sitemap for my SvelteKit app, and how do I create it? and Complement zero-effort type safety in SvelteKit with Zod for even more type safety and Configuring Turborepo for a SvelteKit monorepo by Thilo Maier
Adding page transitions in SvelteKit by Josh Collinsworth
E2E testing with SvelteKit and Playwright and Why you should use TypeScript in your next SvelteKit projects by Justin Ahinon
Understanding the structure of a SvelteKit project by Igor Nowosad
Secure Authentication in Svelte using Hooks by Brewhouse Digital
Libraries, Tools & Components
@vavite/node-loader is a Node ESM loader that uses Vite to transpile modules to enable sourcemap and breakpoints support in SvelteKit (or any Vite) project
Inlang is building i18n for SvelteKit and is looking for feedback
Skeleton - the UI toolkit for Svelte and Tailwind - is now 1.0 🎉
SvelteKit-integrated-WebSocket provides first-class support for WebSockets within SvelteKit by attaching a WebSocket server to the global state
Svelte Legos is a collection of essential Svelte Composition Utilities
svelte-stored-writable is a drop-in extension of Svelte's writable that additionally stores and restores its contents using localStorage.
svelte-virtual provides Svelte components for efficiently rendering large lists.
ChatGPT Clones and Starters
chatwithme.chat is an open source ChatGPT UI
SlickGPT is a light-weight "use-your-own-API-key" web client for the OpenAI API written in Svelte
AI Chat Bestie is an unofficial ChatGPT app
chatgpt-svelte is a simple UI for the ChatGPT Open AI API
Thanks for reading! And don't forget to try your hand at the Svelte Hackathon 🧑‍💻
As always, feel free to let us know if we missed anything on Reddit or Discord.
See ya next time!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: August 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: August 2023 Extending Custom Element Classes and new +server exports  Dani Sandoval Aug 1 2023 On this page   On this page  Some sweet new features have dropped in both Svelte and SvelteKit, this month. It's also great to see how many products and side projects have launched using Svelte as their core technology!
More on all that down below...
What's new in Svelte & Language ToolspermalinkThere's been a bunch of minor bugfixes since the Svelte 4 release. You can find them in the CHANGELOG.
The 4.1.0 release added the ability to further customize the custom element class that wraps the underlying Svelte component. Check out the Custom Elements API docs or the PR for more info!
In addition to supporting SvelteKit's new HEAD server method, Svelte's language tools now support Prettier v3 (extensions-107.9.0) and workspace trust settings are now used to support all settings in workspace (extensions-107.8.0).
What's new in SvelteKitpermalink
The HEAD server method is now available in API routes (1.22.0, Docs, #9753)
Responses with Vary headers are now cached, too (except for Vary: *) (1.22.0, Docs, #9993)
There's now a more helpful error for preview if SvelteKit's build output doesn't exist (1.22.2, #10337)
For all the patches and performance updates from this month, check out the SvelteKit CHANGELOG. You can also find adapter-specific CHANGELOGs in each of the adapter directories.
Community ShowcasepermalinkApps & Sites built with Svelte
GitLight brings GitHub & GitLab notifications to your desktop
Days is paprikka's life in days, inspired by Buster Benson's Life in Weeks
Mofi is a content-aware fill and trim for music
JSON Bucket stores your JSON data so you can access it anywhere through generated API routes
Soggy Planet is an interactive map of Earth where sea levels rise and fall and the lights of civilization shine through the night (Source)
PaperClip is a Chrome extension that makes it easy to memorize details from papers in machine learning, computer vision, and natural language processing.
Maktaba is a bookmark manager that "you will actually use"
Whispering is a Chrome extension that lets you access OpenAI's Whisper API for fast transcription in the browser (including ChatGPT)
DocuTalk is an AI Customer Support chatbot for your website
Krello is a Trello clone built with Svelte, Appwrite and Flowbite
Been is a map builder with travel stats like visited countries, extreme visited points, etc.
image-to-social-media-thumbnail lets you convert any image to a social media thumbnail
Svelte Capacitor Store is a persistent store that uses capacitor (preferences) storage on native devices, and localStorage otherwise, making it ideal for multi-platform projects
Learning Resources
Featuring Svelte Contributors and Ambassadors
Exploring Svelte 4 w/ Kevin AK: Performance, Compatibility, & Web Component Support | Modern Web Pod by This Dot Media
Svelte Sirens Stream Design Systems: Lessons Learned featuring Eric Liu, creator of Carbon Components Svelte and the sveld docgen library
This Week in Svelte:
2023 June 30 - Svelte 4.0.1, SK 1.21, lists, screen readers, loading
2023 July 7 - Svelte 4.0.5, Kit 1.22.1, Svelte 5, local storage and markdown
2023 July 21 - Svelte 4.1.1, SvelteKit 1.22.3, Progressive enhancement
To Watch/Hear
What is The Transitional Web? with Chris Ferdinandi by Smashing Podcast
SvelteKit in 100 seconds by Fireship
Primo V2 Introduction by Primo (a visual CMS based on Svelte)
Understanding Svelte (vs React) by Kodaps Academy
Is it thàt simple? - Mastering SvelteKit by Threeveloper
Markdown in SvelteKit with custom Components: mdsvex by hartenfellerdev
How To Add Confetti for Svelte and Sveltekit 🎉 and Make Your SvelteKit Code 10x Faster With Rust and WebAssembly by SvelteRust
To Read
SvelteJS: My ecosystem is bigger than yours by roguegpu
Avoid shared state on the server in SvelteKit by Aakash Goplani
SvelteKit Fontaine: Reduce Custom Font CLS by Rodney Lab
A Simple Guide to Redirects in Svelte Kit by Justin Golden
React vs Svelte (Q3 2023) by Gee
SvelteKit Page Reaction Component with Upstash Redis by Scott Spence
Building a privacy-friendly, self-hosted application architecture with SvelteKit and Building a privacy-friendly, self-hosted application architecture with SvelteKit by Stanislav Khromov
Deploying Sveltekit on IIS by Nutchapon Makelai
Streamlined Authentication and Secrets Management by Eman
Libraries, Tools & Components
Melt UI is a set of headless, accessible component builders for Svelte
MDsveX has been updated to work with Svelte 4
Svelte Sonner is an opinionated toast component for Svelte
WebExtensionTemplate lets you skip the boilerplate and write a Web Extension with TypeScript and Svelte or React
svelte-rust lets you run Rust code in your Svelte app
SvelteKit SSE provides an easy way to produce and consume server sent events
better-svelte-writable provides a type-safe writable which gives you more control over the container
Svetch.ts is a client/types/schema/docs generator for your API endpoints
sveltekit-localize-url handles URL localization and routing
elegua is a small, reactive PWA router for Svelte
Molly is a bash script and npm module that helps you clean up unused Svelte components in your project
sveltekit-bot is a Telegram bot made with SvelteKit and Vercel
Thanks for reading! As always, feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:body> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
The @debug tag • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag REPL   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Event modifiers • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: May 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: May 2021 Working toward SvelteKit 1.0 and a showcase full of SvelteKit sites!  Dani Sandoval May 1 2021 On this page   On this page  Last week, Svelte Summit blew us away with a mountain of content! Check out the full recording or an audio-only (p)review on Svelte Radio. Now let's get into this month's news...
New features in the Svelte Compilerpermalink
:global() is now supported as part of compound CSS selectors (3.38.0, Example)
CSS custom properties can now be passed to components for use cases such as theming (3.38.0, Docs coming soon)
New in SvelteKitpermalink
kit.svelte.dev has a fresh new look and the SvelteKit Demo Site got a fresh set of paint. Check it out by running npm init svelte@next
You can now use @sveltejs/adapter-static to create a single-page app or SPA by specifying a fallback page (PR, Docs)
Disable Server-side Rendering (SSR) app-wide or on a page-by-page basis (PR)
Error messages thrown during pre-rendering are now much more informative and readable (PR, Docs)
Layouts can now be reset to prevent pages from inheriting the root layout. This is useful if you have a specific layout for a page or i18n variation (PR, Docs)
fetch in SvelteKit code will now use the environment-provided implementation, whenever possible. If fetch is unavailable, it will be polyfilled by adapters (PR, Docs)
New in Svelte & Language Toolspermalink
svelte-preprocess now supports the "extends" field of the tsconfig.json (4.7.2)
HTML style attributes now have hover & auto-complete. Foreign namespaces and ESM configs are now supported in the Svelte language server & extensions
The Svelte language tools can now infer slot/event types from their props if a generic relationship between them was defined
Community ShowcasepermalinkApps & Sites
gitpod.io recently rewrote its site with SvelteKit
highlight eel is a web-based editor to mark your favorite parts of any YouTube video to clip and share with anyone
The Far Star Mission is an interactive audiobook companion to the album, The Far Star by Apotheus
JavaScript quiz is a small quiz application that saves your answers locally
ExtensionPay lets developers accept secure payments in browser extensions with no backend server code.
mk48.io is a naval warship game made with SvelteKit
Frog Safety is a guide for African Dwarf Frogs and the API freshwater master kit
Stardew Valley Character Preview loads your character's attributes from your Stardew Valley savefile and lets you play around with different outfits, colours, and accessories.
Demos, Libraries, Tools & Components
svelte-parallax is a spring-based parallax component for Svelte
@svelte-plugins/viewable is a simple rule-based approach to tracking element viewability.
Sveltekit-JUI is a kit of UI components to be used in conjunction with Svelte and Svelte Kit.
EZGesture makes it easy to add gestures functionality with simple native DOM events
Want to contribute your own component? Submit a Component to the Svelte Society site by making a PR to this file.
Starters
How to use Vercel Analytics with SvelteKit teaches how to track Web Vitals across your users' devices
Asp.NETCore + Svelte + Vite connects the three frameworks with SpaCliMiddleware (VS2019)
Add CoffeeScript to Svelte is an experimental command to run to add CoffeeScript to your SvelteKit project or Vite-powered Svelte app
Adds Supabase to Svelte is an experimental command to run to add Supabase to your SvelteKit project
svelte-babylon lets you use BabylonJS like A-Frame through reactive Svelte Components
Looking for a starter or integration? Check out svelte-adders and a number of other template examples at the community site sveltesociety.dev
Learning Resources
Amazing macOS Dock animation in Svelte demonstrates how nice Svelte and popmotion look together
Solving the Tower of Hanoi with recursive Svelte templates incorporates the <svelte:self> element into a common computer science problem
DIY SvelteKit CDK adapter puts together SvelteKit and AWS CDK
Fireship's Svelte in 100 Seconds is a quick and easy introduction to Svelte's core concepts
Tech Downtime has been diving into SvelteKit in this playlist - from getting up and running to debugging.
lihautan's latest video updates in the Svelte 101 and Svelte Store playlists cover slots, stores and context - and when to use which
DavidParkerW has been exploring Svelte, Sapper and SvelteKit in some real-world scenarios, like displaying a blog post list from an API
See you next month!permalinkGot something to add? Join us on Svelte Society, Reddit and Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte 3: Rethinking reactivity
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte 3: Rethinking reactivity It's finally here  Rich Harris Apr 22 2019 On this page   On this page  After several months of being just days away, we are over the moon to announce the stable release of Svelte 3. This is a huge release representing hundreds of hours of work by many people in the Svelte community, including invaluable feedback from beta testers who have helped shape the design every step of the way.
We think you're going to love it.
What is Svelte?permalinkSvelte is a component framework — like React or Vue — but with an important difference. Traditional frameworks allow you to write declarative state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like virtual DOM diffing that eat into your frame budget and tax the garbage collector.
Instead, Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.
The first version of Svelte was all about testing a hypothesis — that a purpose-built compiler could generate rock-solid code that delivered a great user experience. The second was a small upgrade that tidied things up a bit.
Version 3 is a significant overhaul. Our focus for the last five or six months has been on delivering an outstanding developer experience. It's now possible to write components with significantly less boilerplate than you'll find elsewhere. Try the brand new tutorial and see what we mean — if you're familiar with other frameworks we think you'll be pleasantly surprised.
To make that possible we first needed to rethink the concept at the heart of modern UI frameworks: reactivity.
'Rethinking Reactivity' from You Gotta Love Frontend Code Camp
Moving reactivity into the languagepermalinkIn old Svelte, you would tell the computer that some state had changed by calling the this.set method:
tsconst { count } = this.get();this.set({	count: count + 1});That would cause the component to react. Speaking of which, this.set is almost identical to the this.setState method used in classical (pre-hooks) React:
tsconst { count } = this.state;this.setState({	count: count + 1});There are some important technical differences (as I explain in the video above, React is not reactive) but conceptually it's the same thing.
In fact, Svelte 3 is basically Sunil's fault.
That all changed with the advent of hooks, which handle state in a very different fashion. Many frameworks started experimenting with their own implementations of hooks, but we quickly concluded it wasn't a direction we wanted to go in. Hooks have some intriguing properties, but they also involve some unnatural code and create unnecessary work for the garbage collector. For a framework that's used in embedded devices as well as animation-heavy interactives, that's no good.
So we took a step back and asked ourselves what kind of API would work for us... and realised that the best API is no API at all. We can just use the language. Updating some count value — and all the things that depend on it — should be as simple as this:
tscount += 1;Since we're a compiler, we can do that by instrumenting assignments behind the scenes:
tscount += 1;$$invalidate('count', count);Importantly, we can do all this without the overhead and complexity of using proxies or accessors. It's just a variable.
New lookpermalinkYour components aren't the only thing that's getting a facelift. Svelte itself has a completely new look and feel, thanks to the amazing design work of Achim Vedam who created our new logo and website, which has moved from svelte.technology to svelte.dev.
We've also changed our tagline, from 'The magical disappearing UI framework' to 'Cybernetically enhanced web apps'. Svelte has many aspects — outstanding performance, small bundles, accessibility, built-in style encapsulation, declarative transitions, ease of use, the fact that it's a compiler, etc — that focusing on any one of them feels like an injustice to the others. 'Cybernetically enhanced' is designed to instead evoke Svelte's overarching philosophy that our tools should work as intelligent extensions of ourselves — hopefully with a retro, William Gibson-esque twist.
Upgrading from version 2permalinkIf you're an existing Svelte 2 user, I'm afraid there is going to be some manual upgrading involved. In the coming days we'll release a migration guide and an updated version of svelte-upgrade which will do the best it can to automate the process, but this is a significant change and not everything can be handled automatically.
We don't take this lightly: hopefully once you've experienced Svelte 3 you'll understand why we felt it was necessary to break with the past.
Still to comepermalinkAs grueling as this release has been, we're nowhere near finished. We have a ton of ideas for generating smarter, more compact code, and a long feature wish-list. Sapper, our Next.js-style app framework, is still in the middle of being updated to use Svelte 3. The Svelte Native community project, which allows you to write Android and iOS apps in Svelte, is making solid progress but deserves more complete support from core. We don't yet have the bounty of editor extensions, syntax highlighters, component kits, devtools and so on that other frameworks have, and we should fix that. We really want to add first-class TypeScript support.
But in the meantime we think Svelte 3 is the best way to build web apps yet. Take an hour to go through the tutorial and we hope to convince you of the same. Either way, we'd love to see you in our Discord chatroom and on GitHub — everyone is welcome, especially you.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: November 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: November 2022 Better forms, routes and inline styles across SvelteKit and Svelte  Dani Sandoval Nov 1 2022 On this page   On this page  It's been a busy October for the Svelte community. use:enhance and Advanced Routes got some great improvements in SvelteKit while the Svelte compiler released a minor version to improve the day-to-day dev experience.
There's also a huge showcase to cover... so let's jump in!
What's new in SvelteKitpermalink
The new update method for use:enhance lets you easily get back the default form behavior while augmenting it with your own logic (docs, #7083 and #7326)
[[optional]] parameters are now available for routing (docs, #7051)
goto now has invalidateAll to (re-)run all load functions belonging to the new active page (docs, #7407)
config.kit.paths.base is now used in adapters looking for static assets - fixing 404 issues across adapter-netlify, adapter-vercel, adapter-cloudflare, and adapter-cloudflare-workers (#4448)
Breaking changes:
Errors will now be thrown when routes conflict (#7051)
The global fetch override has been removed when prerendering (#7318)
Route IDs have been prefixed with / (#7338)
Svelte changespermalink
New accessibility warnings, a11y-click-events-have-key-events and a11y-no-noninteractive-tabindex, will now warn when your components lack required key events or tabindex. While a11y-role-has-required-aria-props will no longer warn when elements match their semantic role (3.51.0)
--style-props are now supported on <svelte:component> and <svg> (3.51.0, Component Example: Before and After, SVG Example: Before and After)
"nullish" values for component event handlers are now supported (3.51.0, Example)
Scoped styles can now be applied to <svelte:element> (3.51.0, Example)
You can now use important in inline style tags: style:foo|important (3.52.0, #7365)
A warning will now be thrown when using <a target="_blank"> without rel="noreferrer" (3.52.0, #6188)
Tom Smykowski also released a great summary of all the changes in 3.52.0! For all the changes to the Svelte compiler, including upcoming changes, check out the CHANGELOG.
Community ShowcasepermalinkApps & Sites built with Svelte
AttendZen is an event management and marketing platform for in-person, virtual or hybrid events
Gram Jam is a challenging daily word game using SvelteKit
Collabwriting is an actionable knowledge base for your team
Dazzle is a Puzzle Game made with Svelte & DallE
Figma Autoname plugin automatically names your Figma layers in one click
DECK is powerful and high performant local web development studio for MacOS, Ubuntu and Windows
Asm editor is a webapp to write and run m68k assembly code
Nucleus is a text editor featuring a clean and easy to use user interface inspired by Visual Studio Code, Atom, Fleet, and others
Observer is a frontend for Arth Panel, an open-source & self-hosted minecraft server panel
.PLAN is a cloud-based notetaking app with markdown and section support
Stablecog is a simple, free & open source AI image generator
FreeSpeech AAC is a free and open-source assistive communication app written in TypeScript
sqrdoff is a dots and boxes to enjoy playing with friends
itty is a fresh take on the traditional link-shortener
splits lets you track your splits, calculate your race pace, become a better athlete
Weaver is an application for creating weave drafts
Learning Resources
To Watch
Starting With Svelte - Brittney Postma by fitcevents
Learn Svelte from scratch with Geoff Rich: A Svelte tutorial by Kelvin Omereshone
How To Connect to MongoDB in Svelte Kit by LevelUpTuts
SvelteKit Authentication Using Cookies, Make A Typing Game With Svelte and SvelteKit Tailwind CSS Setup With Automatic Class Sorting by Joy of Code
Authentication with SvelteKit & PocketBase and Form Actions in SvelteKit (+page) by Huntabyte
Sybil - Episode 1 - Rust knowledge management with SurrealDB by Raphael Darley
To Read
4 things I miss from Svelte after working in React and Create dynamic social card images with Svelte components by Geoff Rich
First-class Vite support in Storybook 7.0 (Svelte and SvelteKit included) by Ian VanSchooten
Better Svelte support is coming to WebStorm from JetBrains
Dark Mode Toggle by pyronaur
HeadlessUI Components with Svelte by Captain Codeman
Using Sequelize with SvelteKit by MetaZebre
Implementing Maintenance mode on a SvelteKit site by Andreas Söderlund
ActionStore: Real-time Svelte stores for Rails by Stefan Buhrmester
Svelte CSS Image Slider: with Bouncy Overscroll and SvelteKit Local Edge Functions: Edge on Localhost by Rodney Lab
Creating a Svelte Tabs component with Slot props by Shinichi Okada
Sky Cart: An Open Source, cloud-agnostic shopping cart using Stripe Checkout by Mike Bifulco for Stripe
Libraries, Tools & Components
Threlte is a component library for Svelte to build and render three.js scenes declaratively and state-driven in Svelte apps. It's being featured again to highlight the new "Playground" button in its examples
Svelte Turnstile is a library to integrate Cloudflare's Turnstile (a new CAPTCHA alternative) into a Svelte app
ActionStore allows you to push data directly into Svelte stores via ActionCable
SvelteKit + <is-land> is an experiment with partial hydration in SvelteKit using @11ty/is-land
Svelte Color Select is an Okhsv Color Selection component for Svelte using OKLab perceptual colorspace
svelte-awesome-color-picker is a highly customizable color picker component library
rx-svelte-forms creates reactive Svelte forms inspired by Angular reactive forms
svelte-wc-bind enables two way data binding in Svelte web components
svelte-preprocess-style-child-component allows you to style elements inside a child component using similar syntax as CSS Shadow Parts
unplugin-svelte-components allows for on-demand components auto importing for Svelte
sveltekit-search-params aims to be the fastest way to read AND WRITE from query search params in SvelteKit
svelte-crop-window is a crop window component for images and videos that supports touch gestures (pinch zoom, rotate, pan), as well as mousewheel zoom, mouse-dragging the image, and rotating on right mouse button
Open Graph Image Generation lets you generate open graph images dynamically from HTML/CSS without a browser in SvelteKit
Svelte Tap Hold is a minimalistic tap and hold component for Svelte/SvelteKit
svelte-copy's new version lets you customize the events that cause text to be copied to the clipboard
UI Kits, Integrations and Starters
SvelteKit Statiko is a multi-featured assistant for SvelteKit static projects
Svelte-TailwindCSS UI (STWUI) is a Tailwind-based UI that is currently in pre-release beta
KitBase is a starter template for SvelteKit and PocketBase
UnoCSS Vite Plugin (svelte-scoped) is a scoped-CSS utility for Vite/SvelteKit
SvelteKit Auth App is an example of how we can create an authentication system with SvelteKit using JsonWebToken and Prisma
SvelteKit Supabase Dashboard is a simple dashboard inspired by Supabase UI made with SvelteKit as frontend and Supabase as backend
Supakit is a Supabase auth helper for SvelteKit
@bun-community/sveltekit-adapter-bun is an adapter for SvelteKit apps that generates a standalone Bun server
hooks-as-store lets you use React custom hooks in Svelte Apps
Fun ones
svelte-typewriter-store is the simplest way to get a rotating typewriter effect in Svelte
Aksel is the seagull you needed on your site
Svelte-Dodge makes components dodge the pointer
That's it for this month! Let us know if we missed anything on Reddit or Discord
See ya next month 👋
Textarea inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte/compiler • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API svelte/compiler   Edit this page on GitHub On this page   On this page  Typically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is vite-plugin-svelte. The SvelteKit framework provides a setup leveraging vite-plugin-svelte to build applications as well as a tool for packaging Svelte component libraries. Svelte Society maintains a list of other bundler plugins for additional tools like Rollup and Webpack.
Nonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.
compilepermalink
tsfunction compile(	source: string,	options?: CompileOptions): any;
This is where the magic happens. svelte.compile takes your component source code, and turns it into a JavaScript module that exports a class.
tsimport { compile } from 'svelte/compiler';
const result = compile(source, {	// options});Refer to CompileOptions for all the available options.
The returned result object contains the code for your component, along with useful bits of metadata.
tsconst { js, css, ast, warnings, vars, stats } = compile(source);Refer to CompileResult for a full description of the compile result.
parsepermalink
tsfunction parse(	template: string,	options?: ParserOptions): Ast;
The parse function parses a component, returning only its abstract syntax tree. Unlike compiling with the generate: false option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time.
tsimport { parse } from 'svelte/compiler';
const ast = parse(source, { filename: 'App.svelte' });preprocesspermalink
tsfunction preprocess(	source: string,	preprocessor: PreprocessorGroup | PreprocessorGroup[],	options?:		| {				filename?: string | undefined;		  }		| undefined): Promise<Processed>;
A number of official and community-maintained preprocessing plugins are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.
You can write your own preprocessor using the svelte.preprocess API.
The preprocess function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a <style lang="sass"> block into vanilla CSS.
The first argument is the component source code. The second is an array of preprocessors (or a single preprocessor, if you only have one), where a preprocessor is an object with a name which is required, and markup, script and style functions, each of which is optional.
The markup function receives the entire component source text, along with the component's filename if it was specified in the third argument.
The script and style functions receive the contents of <script> and <style> elements respectively (content) as well as the entire component source text (markup). In addition to filename, they get an object of the element's attributes.
Each markup, script or style function must return an object (or a Promise that resolves to an object) with a code property, representing the transformed source code. Optionally they can return an array of dependencies which represents files to watch for changes, and a map object which is a sourcemap mapping back the transformation to the original code. script and style preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag.
Preprocessor functions should return a map object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly.
tsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';
const { code } = await preprocess(	source,	{		markup: ({ content, filename }) => {			const pos = content.indexOf('foo');			if (pos < 0) {				return { code: content };			}			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });			return {				code: s.toString(),				map: s.generateMap()			};		}	},	{		filename: 'App.svelte'	});If a dependencies array is returned, it will be included in the result object. This is used by packages like vite-plugin-svelte and rollup-plugin-svelte to watch additional files for changes, in the case where your <style> tag has an @import (for example).
preprocess-sass.jstsimport { preprocess } from 'svelte/compiler';import MagicString from 'magic-string';Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.2322Type 'string | undefined' is not assignable to type 'string'.
Type 'undefined' is not assignable to type 'string'.import sass from 'sass';import { dirname } from 'path';Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.2345Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
Type 'undefined' is not assignable to type 'string'.
const { code } = await preprocess(	source,	{		name: 'my-fancy-preprocessor',		markup: ({ content, filename }) => {			// Return code as is when no foo string present			const pos = content.indexOf('foo');			if (pos < 0) {				return;			}
// Replace foo with bar using MagicString which provides			// a source map along with the changed code			const s = new MagicString(content, { filename });			s.overwrite(pos, pos + 3, 'bar', { storeName: true });
return {				code: s.toString(),				map: s.generateMap({ hires: true, file: filename })			};		},		style: async ({ content, attributes, filename }) => {			// only process <style lang="sass">			if (attributes.lang !== 'sass') return;
const { css, stats } = await new Promise((resolve, reject) =>				sass.render(					{						file: filename,						data: content,						includePaths: [dirname(filename)]					},					(err, result) => {						if (err) reject(err);						else resolve(result);					}				)			);
// remove lang attribute from style tag			delete attributes.lang;
return {				code: css.toString(),				dependencies: stats.includedFiles,				attributes			};		}	},	{		filename: 'App.svelte'	});Multiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, markup runs first, then script and style.
In Svelte 3, all markup functions ran first, then all script and then all style preprocessors. This order was changed in Svelte 4.
multiple-preprocessor.jstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(source, [	{		name: 'first preprocessor',		markup: () => {			console.log('this runs first');		},		script: () => {			console.log('this runs second');		},		style: () => {			console.log('this runs third');		}	},	{		name: 'second preprocessor',		markup: () => {			console.log('this runs fourth');		},		script: () => {			console.log('this runs fifth');		},		style: () => {			console.log('this runs sixth');		}	}], {	filename: 'App.svelte'});multiple-preprocessor.tstsimport { preprocess } from 'svelte/compiler';
const { code } = await preprocess(	source,	[		{			name: 'first preprocessor',			markup: () => {				console.log('this runs first');			},			script: () => {				console.log('this runs second');			},			style: () => {				console.log('this runs third');			},		},		{			name: 'second preprocessor',			markup: () => {				console.log('this runs fourth');			},			script: () => {				console.log('this runs fifth');			},			style: () => {				console.log('this runs sixth');			},		},	],	{		filename: 'App.svelte',	},);walkpermalinkThe walk function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of estree-walker.
The walker takes an abstract syntax tree to walk and an object with two optional methods: enter and leave. For each node, enter is called (if present). Then, unless this.skip() is called during enter, each of the children are traversed, and then leave is called on the node.
compiler-walk.jstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	}});compiler-walk.tstsimport { walk } from 'svelte/compiler';
walk(ast, {	enter(node, parent, prop, index) {		do_something(node);		if (should_skip_children(node)) {			this.skip();		}	},	leave(node, parent, prop, index) {		do_something_else(node);	},});VERSIONpermalink
tsconst VERSION: string;
The current version, as set in package.json.
tsimport { VERSION } from 'svelte/compiler';console.log(`running svelte version ${VERSION}`);TypespermalinkCompileOptionspermalink
tsinterface CompileOptions {…}
tsname?: string;
default 'Component'
Sets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope).
It will normally be inferred from filename
tsfilename?: string;
default null
Used for debugging hints and sourcemaps. Your bundler plugin will set it automatically.
tsgenerate?: 'dom' | 'ssr' | false;
default 'dom'
If "dom", Svelte emits a JavaScript class for mounting to the DOM.
If "ssr", Svelte emits an object with a render method suitable for server-side rendering.
If false, no JavaScript or CSS is returned; just metadata.
tserrorMode?: 'throw' | 'warn';
default 'throw'
If "throw", Svelte throws when a compilation error occurred.
If "warn", Svelte will treat errors as warnings and add them to the warning report.
tsvarsReport?: 'full' | 'strict' | false;
default 'strict'
If "strict", Svelte returns a variables report with only variables that are not globals nor internals.
If "full", Svelte returns a variables report with all detected variables.
If false, no variables report is returned.
tssourcemap?: object | string;
default null
An initial sourcemap that will be merged into the final output sourcemap.
This is usually the preprocessor sourcemap.
tsenableSourcemap?: EnableSourcemap;
default true
If true, Svelte generate sourcemaps for components.
Use an object with js or css for more granular control of sourcemap generation.
tsoutputFilename?: string;
default null
Used for your JavaScript sourcemap.
tscssOutputFilename?: string;
default null
Used for your CSS sourcemap.
tssveltePath?: string;
default 'svelte'
The location of the svelte package.
Any imports from svelte or svelte/[module] will be modified accordingly.
tsdev?: boolean;
default false
If true, causes extra code to be added to components that will perform runtime checks and provide debugging information during development.
tsaccessors?: boolean;
default false
If true, getters and setters will be created for the component's props. If false, they will only be created for readonly exported values (i.e. those declared with const, class and function). If compiling with customElement: true this option defaults to true.
tsimmutable?: boolean;
default false
If true, tells the compiler that you promise not to mutate any objects.
This allows it to be less conservative about checking whether values have changed.
tshydratable?: boolean;
default false
If true when generating DOM code, enables the hydrate: true runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch.
When generating SSR code, this adds markers to <head> elements so that hydration knows which to replace.
tslegacy?: boolean;
default false
If true, generates code that will work in IE9 and IE10, which don't support things like element.dataset.
tscustomElement?: boolean;
default false
If true, tells the compiler to generate a custom element constructor instead of a regular Svelte component.
tstag?: string;
default null
A string that tells Svelte what tag name to register the custom element with.
It must be a lowercase alphanumeric string with at least one hyphen, e.g. "my-element".
tscss?: 'injected' | 'external' | 'none' | boolean;
'injected' (formerly true), styles will be included in the JavaScript class and injected at runtime for the components actually rendered.
'external' (formerly false), the CSS will be returned in the css field of the compilation result. Most Svelte bundler plugins will set this to 'external' and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable .css files.
'none', styles are completely avoided and no CSS output is generated.
tsloopGuardTimeout?: number;
default 0
A number that tells Svelte to break the loop if it blocks the thread for more than loopGuardTimeout ms.
This is useful to prevent infinite loops.
Only available when dev: true.
tsnamespace?: string;
default 'html'
The namespace of the element; e.g., "mathml", "svg", "foreign".
tscssHash?: CssHashGetter;
default undefined
A function that takes a { hash, css, name, filename } argument and returns the string that is used as a classname for scoped CSS.
It defaults to returning svelte-${hash(css)}.
tspreserveComments?: boolean;
default false
If true, your HTML comments will be preserved during server-side rendering. By default, they are stripped out.
tspreserveWhitespace?: boolean;
default false
If true, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.
tsdiscloseVersion?: boolean;
default true
If true, exposes the Svelte major version on the global window object in the browser.
CompileResultpermalinkThe returned shape of compile from svelte/compiler
tsinterface CompileResult {…}
tsjs: {…}
The resulting JavaScript code from compling the component
tscode: string;
Code as a string
tsmap: any;
A source map
tscss: CssResult;
The resulting CSS code from compling the component
tsast: Ast;
The abstract syntax tree representing the structure of the component
tswarnings: Warning[];
An array of warning objects that were generated during compilation. Each warning has several properties:
code is a string identifying the category of warning
message describes the issue in human-readable terms
start and end, if the warning relates to a specific location, are objects with line, column and character properties
frame, if applicable, is a string highlighting the offending code with line numbers
tsvars: Var[];
An array of the component's declarations used by tooling in the ecosystem (like our ESLint plugin) to infer more information
tsstats: {	timings: {		total: number;	};};
An object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same!
CssHashGetterpermalink
tstype CssHashGetter = (args: {	name: string;	filename: string | undefined;	css: string;	hash: (input: string) => string;}) => string;
EnableSourcemappermalink
tstype EnableSourcemap =	| boolean	| { js: boolean; css: boolean };
MarkupPreprocessorpermalinkA markup preprocessor that takes a string of code and returns a processed version.
tstype MarkupPreprocessor = (options: {	/**	 * The whole Svelte file content	 */	content: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorpermalinkA script/style preprocessor that takes a string of code and returns a processed version.
tstype Preprocessor = (options: {	/**	 * The script/style tag content	 */	content: string;	/**	 * The attributes on the script/style tag	 */	attributes: Record<string, string | boolean>;	/**	 * The whole Svelte file content	 */	markup: string;	/**	 * The filename of the Svelte file	 */	filename?: string;}) => Processed | void | Promise<Processed | void>;
PreprocessorGrouppermalinkA preprocessor group is a set of preprocessors that are applied to a Svelte file.
tsinterface PreprocessorGroup {…}
tsname?: string;
Name of the preprocessor. Will be a required option in the next major version
tsmarkup?: MarkupPreprocessor;
tsstyle?: Preprocessor;
tsscript?: Preprocessor;
ProcessedpermalinkThe result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged.
tsinterface Processed {…}
tscode: string;
The new code
tsmap?: string | object;
A source map mapping back to the original code
tsdependencies?: string[];
A list of additional files to watch for changes
tsattributes?: Record<string, string | boolean>;
Only for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged.
tstoString?: () => string;
SveltePreprocessorpermalinkUtility type to extract the type of a preprocessor from a preprocessor group
tsinterface SveltePreprocessor<	PreprocessorType extends keyof PreprocessorGroup,	Options = any> {…}
ts(options?: Options): Required<Pick<PreprocessorGroup, PreprocessorType>>;
previous svelte/action next Client-side component API
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: April 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: April 2022 Goodbye fallthrough routes, hello param validators!  Dani Sandoval Apr 1 2022 On this page   On this page  This month, we felt a shift in the way SvelteKit handles page properties. The last holdout of the use-cases that required fallthrough routes, validating parameter properties, has been replaced by a more specific solution.
More on that, and what else is new in Svelte, as we dive in...
What's new in SvelteKitpermalink
Param matchers allow you to check if a url parameter matches before rendering a page - replacing the need for fallthrough routes for this purpose (Docs, #4334)
Explicit redirects can now be handled directly from endpoints (#4260)
svelte-kit sync (#4182), TypeScript 4.6 (#4190) and Vite 2.9 were released - adding non-blocking dependency optimization and experimental CSS source maps in dev mode as well as a number of bug fixes contributed by the SvelteKit team (#4468)
New Config Options
outDir fixes path issues in monorepos and other situations where the desired output directory is outside the project directory (Docs, #4176)
endpointExtensions prevents files other than .js and .ts files from being treated as endpoints, unless you specify endpointExtensions (Docs, #4197)
prerender.default lets you prerender every page without having to write export const prerender = true in every page file (Docs, #4192)
Breaking Changes
Fallthrough routes have been removed. For migration tips, check out the PR (#4330)
tabindex="-1" is only added to <body> during navigation (#4140 and #4184)
Adapters are now required to supply a getClientAddress function (#4289)
InputProps and OutputProps can now be typed separately in generated Load (#4305)
The \$ character is no longer allowed in dynamic parameters (#4334)
svelte-kit package has been marked as experimental so changes to it after Kit 1.0 will not be considered breaking (#4164)
New across the Svelte ecosystempermalink
Svelte: Lots of new types for TypeScript and Svelte plugin users - including style: directives and Svelte Actions (3.46.4 and 3.46.5)
Language Tools: Svelte project files are now importable/findable through references without having them imported in a TS file (105.13.0)
Language Tools: Region folding is now supported in html with <!--#region-->/<!--#endregion--> (105.13.0)
Community ShowcasepermalinkApps & Sites built with Svelte
Launcher is an open-source app launcher powered by SvelteKit, Prisma, and Tailwind
Paaster is a secure by default end to end encrypted pastebin built with Svelte, Vite, TypeScript, Python, Starlette, rclone & Docker.
Simple AF Video Converter is an Electron wrapper around ffmpeg.wasm to make converting videos between formats easier
Streamchaser seeks to simplify movie, series and documentary search through a centralized entertainment technology platform
Svelte Color Picker is a simple color picker made with Svelte
ConcertMash is a small website that interacts with the Spotify API and generates new playlists based on the upcoming concerts you're attending
Modulus is a Design+Code Think Tank conceived with the main mission to evolve design and technology
Multiply is an integrated PR and Social agency moving at the speed of culture
yia! is a Young Innovator Award competition in New Zealand
Write to Russia is a community email writing platform to communicate with public .ru email addresses
Markdown Playground is an online playground dedicated for your markdown experiments.
RatherMisty is a no frills weather app with weather data from Open-Meteo
Minecraft Profile Pic (MCPFP) is a site to generate Minecraft profile pictures with ease
WebGL Fluid Simulation is a configurable fluid simulation built with Svelte and WebGL
This @NobelPeaceOslo exhibition was built using printed graphics, projected motion graphics, particle animations and generative sound design
Itching to contribute to a modern SvelteKit website? Help build the Svelte Society site!
Learning Resources
To Attend
Svelte Summit: Spring will take place on April 30, 2022! Join us for the 5th virtual Svelte conference on YouTube and Discord 🍾
To Read
Svelte(Kit) TypeScript Showcase + general TypeScript tips by Hofer Ivan
Local constants in Svelte with the @const tag by Geoff Rich
Design Patterns for Building Reusable Svelte Components by Eric Liu
Svelte is better than React by Hamilton Greene
Making Visualizations Literally with Svelte and D3 by Connor Rothschild
Coordinating Multiple Elements with Svelte Deferred Transitions by Daniel Imfeld
Animate on scroll with Svelte Inview - Little Bits by Maciek Grzybek
Lazy-Loading Firebase with SvelteKit and HeadlessUI Components with Svelte by Captain Codeman
SvelteKit Accessibility Testing: Automated CI A11y Tests by Rodney Lab
Getting Started with KitQL and GraphCMS by Scott Spence
React ⇆ Svelte Cheatsheet lists the similarities and differences between the two libraries - by Joshua Nussbaum
To Watch
Svelte Extravaganza | Async by pngwn
6 Svelte Packages You Should Know and Basic React To Svelte Conversion by LevelUpTuts
Page/Shadow Endpoint in SvelteKit by WebJeda
Custom Svelte Store: Higher Order Store by lihautan
SvelteKit For Beginners (Playlist) by Joy of Code - follow along with the blog guide
Fullstack SvelteKit Auth 🔐 with Firebase & Magic Links! 🪄 by Johnny Magrippis
Firebase Authentication in SvelteKit! Full Stack App by Ryan Boddy
Libraries, Tools & Components
SvelTable is a feature rich, data table component built with Svelte
svelte-cyberComp is a powerful, lightweight component library written in Svelte and TypeScript
Flowbite Svelte is an unofficial Flowbite component library for Svelte
Svelte-Tide-Project is a starter template for Svelte frontend apps with Rust Tide backend server
Fetch Inject implements a performance optimization technique for managing asynchronous JavaScript dependencies - now with Svelte support
svelte-utterances is a lightweight comments widget built on GitHub issues
Liquivelte allows you to create your Shopify theme with Svelte-like components
@storyblok/svelte is the Svelte SDK you need to interact with Storyblok API and enable the Real-time Visual Editing Experience
@svelte-on-solana/wallet-adapter is a modular TypeScript wallet adapter and UI components for Solana/Anchor applications using SvelteJS as framework
svelte-lookat creates a div which makes all its children follow the mouse cursor or the user's face when using a mobile phone
Join us on Reddit or Discord to continue the conversation.
See y'all next month!
Generative grids • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Hello world • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world REPL  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Svelte • Cybernetically enhanced web apps
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte  Cybernetically enhanced  web apps tutorial   read the docs         compiled Svelte shifts as much work as possible out of the browser and into your build step. No more
manual optimisations — just faster, more efficient apps. compact Write breathtakingly concise components using languages you already know — HTML, CSS and
JavaScript. Oh, and your application bundles will be tiny as well. complete Built-in scoped styling, state management, motion primitives, form bindings and more — don't
waste time trawling npm for the bare essentials. It's all here.  see for yourself
Try it locally, on StackBlitz, or with
the interactive tutorial.
terminal npm create svelte@latest my-app
cd my-app
npm install
npm run dev -- --open    build with ease 1 Hello World 2 Scoped CSS 3 Reactivity 4 Transitions  more  examples →    Svelte components are built on top of HTML. Just add data.  loved by developers We're proud that Svelte was recently voted the most admired JS web framework
in one industry survey while drawing the most interest in learning it in
two others. We
think you'll love it too.                 Svelte is made possible by the work of hundreds of supporters. contributors Join us on GitHub Rich-Harris Conduitry tanhauhau dummdidumm benmccann PuruVJ baseballyama gtm-nayan trueadm Swatinem DreaminDani jacwright lukeed mindrones mrkishi pngwn geoffrich ekhaled EmilTholin antony ngtr6788 ignatiusmb tivac zxbodya  donors Support us on OpenCollective DatawrapperVercelCohereDabbleMonogramFrontend MastersHugging FacePQINARasterAvastINVISRMattLayer0MetafyThreema Open Source FundChangelogClancy DigitalCodesmithKenoxa GmbHLevel Up TutorialsThe PuddingJason HetheringtonJeff MoeZev Averbach   resources documentationtutorialexamplesblog connect githubopencollectivediscordtwitter
© 2023 Svelte contributors  Svelte is free and open source software released
under the MIT license
Group inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
svelte/motion • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/motion   Edit this page on GitHub On this page   On this page  The svelte/motion module exports two functions, tweened and spring, for creating writable stores whose values change over time after set and update, rather than immediately.
tweenedpermalink
tsfunction tweened<T>(	value?: T | undefined,	defaults?: TweenedOptions<T> | undefined): Tweened<T>;
Tweened stores update their values over a fixed duration. The following options are available:
delay (number, default 0) — milliseconds before starting
duration (number | function, default 400) — milliseconds the tween lasts
easing (function, default t => t) — an easing function
interpolate (function) — see below
store.set and store.update can accept a second options argument that will override the options passed in upon instantiation.
Both functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve.
Out of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same 'shape', and their 'leaf' properties are also numbers).
<script>
import { tweened } from 'svelte/motion';
import { cubicOut } from 'svelte/easing';
const size = tweened(1, {
duration: 300,
easing: cubicOut
});
function handleClick() {
// this is equivalent to size.update(n => n + 1)
$size += 1;
}
</script>
<button on:click={handleClick} style="transform: scale({$size}); transform-origin: 0 0">
embiggen
</button>If the initial value is undefined or null, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don't want any motion when the component first renders.
tsimport { tweened } from 'svelte/motion';import { cubicOut } from 'svelte/easing';
const size = tweened(undefined, {	duration: 300,	easing: cubicOut});
$: $size = big ? 100 : 10;The interpolate option allows you to tween between any arbitrary values. It must be an (a, b) => t => value function, where a is the starting value, b is the target value, t is a number between 0 and 1, and value is the result. For example, we can use the d3-interpolate package to smoothly interpolate between two colours.
<script>
import { interpolateLab } from 'd3-interpolate';
import { tweened } from 'svelte/motion';
const colors = ['rgb(255, 62, 0)', 'rgb(64, 179, 255)', 'rgb(103, 103, 120)'];
const color = tweened(colors[0], {
duration: 800,
interpolate: interpolateLab
});
</script>
{#each colors as c}
<button style="background-color: {c}; color: white; border: none;" on:click={(e) => color.set(c)}>
{c}
</button>
{/each}
<h1 style="color: {$color}">{$color}</h1>springpermalink
tsfunction spring<T = any>(	value?: T | undefined,	opts?: SpringOpts | undefined): Spring<T>;
A spring store gradually changes to its target value based on its stiffness and damping parameters. Whereas tweened stores change their values over a fixed duration, spring stores change over a duration that is determined by their existing velocity, allowing for more natural-seeming motion in many situations. The following options are available:
stiffness (number, default 0.15) — a value between 0 and 1 where higher means a 'tighter' spring
damping (number, default 0.8) — a value between 0 and 1 where lower means a 'springier' spring
precision (number, default 0.01) — determines the threshold at which the spring is considered to have 'settled', where lower means more precise
All of the options above can be changed while the spring is in motion, and will take immediate effect.
tsimport { spring } from 'svelte/motion';
const size = spring(100);size.stiffness = 0.3;size.damping = 0.4;size.precision = 0.005;As with tweened stores, set and update return a Promise that resolves if the spring settles.
Both set and update can take a second argument — an object with hard or soft properties. { hard: true } sets the target value immediately; { soft: n } preserves existing momentum for n seconds before settling. { soft: true } is equivalent to { soft: 0.5 }.
tsimport { spring } from 'svelte/motion';
const coords = spring({ x: 50, y: 50 });// updates the value immediatelycoords.set({ x: 100, y: 200 }, { hard: true });// preserves existing momentum for 1scoords.update(	(target_coords, coords) => {		return { x: target_coords.x, y: coords.y };	},	{ soft: 1 });See a full example on the spring tutorial.
<script>
import { spring } from 'svelte/motion';
const coords = spring(
{ x: 50, y: 50 },
{
stiffness: 0.1,
damping: 0.25
}
);
</script>If the initial value is undefined or null, the first value change will take effect immediately, just as with tweened values (see above).
tsimport { spring } from 'svelte/motion';
const size = spring();$: $size = big ? 100 : 10;TypespermalinkSpringpermalink
tsinterface Spring<T> extends Readable<T> {…}
tsset: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;
tsupdate: (fn: Updater<T>, opts?: SpringUpdateOpts) => Promise<void>;
tsprecision: number;
tsdamping: number;
tsstiffness: number;
Tweenedpermalink
tsinterface Tweened<T> extends Readable<T> {…}
tsset(value: T, opts?: TweenedOptions<T>): Promise<void>;
tsupdate(updater: Updater<T>, opts?: TweenedOptions<T>): Promise<void>;
previous svelte/store next svelte/transition
Event forwarding • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: October 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: October 2021 A whole year of "What's new in Svelte  Dani Sandoval Oct 1 2021 On this page   On this page  Hey y'all 👋 It's been 1 year since "What's new in Svelte" started being cross-posted to the Svelte blog. I wanted to take this moment at the top to thank all of you for reading and for all the contributors every month. From the maintainers to everyone who posts their work in the Discord and Reddit, it's amazing to witness all the effort that goes into making the Svelte community great.
Keep up the good work, everyone! Now, let's dive into this month's news...
New around Sveltepermalink
New additions to Svelte's export map now expose no-op versions of lifecycle functions for SSR (Svelte 3.43.0)
Custom components with a src attribute no longer break svelte-native builds (Svelte 3.42.4)
Svelte plugin users without the TypeScript plugin enabled will now be prompted to enable it. It enhances TypeScript and JavaScript files with additional intellisense to interact with Svelte files. Please leave feedback if you are using it (Svelte extensions 105.4.0)
Event modifiers have been added to intellisense as autocomplete and hover info (Svelte extensions 105.4.0)
TypeScript users no longer have to strictly separate type imports and value imports when using Svelte version 3.39 or higher and svelte-preprocess version 4.9.5 or higher. This means you can now write import { MyInterface, myValue } from './somewhere' instead of import type { MyInterface } from './somewhere'; import { myValue } from './somewhere'. Huge thanks to community member @SomaticIT who mainly implemented this!
For a full list of features and bug fixes, check out the Svelte changelog.
SvelteKit UpdatespermalinkNearly 100 PRs committed again this past month, but there's still lots to do and Svelte maintainers are looking for help getting SvelteKit to 1.0. Antony said it well in a recent comment on the issue:
If you think you are too n00b to contribute (you're not), then add tests, or write tests for the feature you want to add, before you add it! Start small, and learn the codebase that way.
If you'd like to help, please consider working on any of the 1.0 milestone issues labeled with "help wanted".
Notable SvelteKit improvements this month include...
Service workers are now allowed to access files using the $lib alias (#2326)
Svelte libraries should now work out-of-the-box without any Vite configuration (#2343)
Improvements to package exports field (#2345 and #2327)
[breaking] The prerender.pages config option has been renamed to prerender.entries (#2380)
A new generic argument has been added to allow typing Body from hooks (#2413)
The svelte field will be added to package.json when running the package command (#2431)
[breaking] The context parameter of the load function was renamed to stuff (#2439)
Added an entryPoint option for building a custom server with adapter-node (#2414)
vite-plugin-svelte improved support for useVitePreprocess, which uses Vite to automatically preprocess TypeScript, PostCSS, Scss, etc in Svelte components (#173)
To see all updates to SvelteKit, check out the SvelteKit changelog.
Community ShowcasepermalinkApps & Sites
radiofrance just migrated their website to SvelteKit
FLAYKS is the portfolio site for Félix Péault made with SvelteKit, Sanity, and Anime.js
hirehive is a candidate and job tracking site
Microsocial is an experimental Peer-to-Peer Social Platform
Dylan Ipsum is a random text generator to replace lorem ipsum with Bob Dylan lyrics
Chip8 Svelte is a CHIP-8 emulator frontend, built on top of CHIP8 TypeScript
Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better? Check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
Podcasts Featuring Svelte
Syntax Podcast: From React to SvelteKit Scott talks with Wes about moving Level Up Tutorials from React to SvelteKit — why he did it, how, benefits, things to watch out for, and more!
Web Rush Podcast: Svelte Tools and Svelte Society Kevin Åberg Kultalahti talks about what Svelte Society is, what he's excited about with Svelte, how important documentation is to any product, and much much more
Svelte: The Compiled Future of Front End details the history of component-based frontends and how a compiler changes everything
Svelte Radio: Contributing to Svelte with Martin 'Grygrflzr' Krisnanto Putra Grygrflzr shares his journey to becoming a maintainer and his views on React, Vite and a host of other things
Svelte Radio: Routify 3 with Jake and Willow the Svelte Radio crew sits down with the maintainers of Routify and discusses the just-released Routify 3
JS Party: 1Password mentioned on the latest episode of The Changelog's JS Party that they use Svelte to power their in-page suggestions
Educational Content
How I built a blog with Svelte and SvelteKit is an introduction to Svelte, SvelteKit and Progressive Enhancement with code examples
I built a decentralized chat dapp is a tutorial on how to use popular web3 technologies like GUN to build a decentralized web app (dapp)
Writing a Svelte Store with TypeScript is a deep dive into writing Svelte stores with TypeScript
How Svelte scopes component styles explains scoping using classes and more complex CSS specifiers
SvelteKit Hooks shows how to use hooks.js in Sveltekit.. When you're done, check out Part 2
An early look at SvelteKit is a post from Infoworld walking through the features and onboarding of SvelteKit
Libraries, Tools & Components
sveltekit-netlify-cms is a SvelteKit skeleton app configured for use with Netlify CMS
SvelteFireTS is a SvelteKit + TypeScript + Firebase library inspired by Fireship.io
stores-x lets you use Svelte stores just like vueX
sveltekit-snippets is a VSCode extension that provides snippets for common patterns in SvelteKit & Vanilla Svelte
svelte-xactor is a middleware that allows you to easily convert your xactor machines into a global store that implements the store contract
vite-plugin-pages-svelte is a vite plugin for automatic filesystem-based routing
sveltio is a Svelte wrapper for valtio - a proxy-state library
svelte-transition-classes is a custom Svelte transition for adding and swapping CSS classes
Svelte-Boring-Avatars is Svelte port of the popular Boring Avatars React project
Svelte DataTables brings DataTable, a popular JavaScript library allowing you to easily display your data in a user-friendly table, into your Svelte project.
focus-svelte is a focus trap for Svelte with zero dependencies
filedrop-svelte is a file dropzone action & component for Svelte
Check out the community site sveltesociety.dev for more templates, adders and adapters from across the Svelte ecosystem.
Before you go, answer the call for speakers!permalinkSvelte Summit Fall 2021 (happening 20 November 2021) is looking for speakers. Submit your talk proposal before 30 October... all are welcome to present and attend.
More info on the sessionize sitepermalinkCan't wait for the summit? Join us on Reddit or Discord!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Adding parameters • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters REPL  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Element directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Element directives   Edit this page on GitHub On this page   On this page  As well as attributes, elements can have directives, which control the element's behaviour in some way.
on:eventnamepermalinkon:eventname={handler}on:eventname|modifiers={handler}Use the on: directive to listen to DOM events.
App.svelte<script>
let count = 0;
/** @param {MouseEvent} event */
function handleClick(event) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>App.svelte<script lang="ts">
let count = 0;
function handleClick(event: MouseEvent) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.
<button on:click={() => (count += 1)}>
count: {count}
</button>Add modifiers to DOM events with the | character.
<form on:submit|preventDefault={handleSubmit}>
<!-- the `submit` event's default is prevented,
so the page won't reload -->
</form>The following modifiers are available:
preventDefault — calls event.preventDefault() before running the handler
stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element
stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.
passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)
nonpassive — explicitly set passive: false
capture — fires the handler during the capture phase instead of the bubbling phase
once — remove the handler after the first time it runs
self — only trigger handler if event.target is the element itself
trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.
Modifiers can be chained together, e.g. on:click|once|capture={...}.
If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.
<button on:click> The component itself will emit the click event </button>It's possible to have multiple event listeners for the same event:
<script>
let counter = 0;
function increment() {
counter = counter + 1;
}
/** @param {MouseEvent} event */
function track(event) {
trackEvent(event);
}
</script>
<button on:click={increment} on:click={track}>Click me!</button>bind:propertypermalinkbind:property={variable}Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.
The simplest bindings reflect the value of a property, such as input.value.
<input bind:value={name} />
<textarea bind:value={text} />
<input type="checkbox" bind:checked={yes} />If the name matches the value, you can use a shorthand.
<input bind:value />
<!-- equivalent to
<input bind:value={value} />
-->Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type="number"), the value is undefined.
<input type="number" bind:value={num} />
<input type="range" bind:value={num} />On <input> elements with type="file", you can use bind:files to get the FileList of selected files. It is readonly.
<label for="avatar">Upload a picture:</label>
<input accept="image/png, image/jpeg" bind:files id="avatar" name="avatar" type="file" />If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.
<script>
let value = 'Hello World';
</script>
<input
on:input={() => console.log('Old value:', value)}
bind:value
on:input={() => console.log('New value:', value)}
/>Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.
Binding <select> valuepermalinkA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).
<select bind:value={selected}>
<option value={a}>a</option>
<option value={b}>b</option>
<option value={c}>c</option>
</select>A <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.
<select multiple bind:value={fillings}>
<option value="Rice">Rice</option>
<option value="Beans">Beans</option>
<option value="Cheese">Cheese</option>
<option value="Guac (extra)">Guac (extra)</option>
</select>When the value of an <option> matches its text content, the attribute can be omitted.
<select multiple bind:value={fillings}>
<option>Rice</option>
<option>Beans</option>
<option>Cheese</option>
<option>Guac (extra)</option>
</select>Elements with the contenteditable attribute support the following bindings:
innerHTML
innerText
textContent
There are slight differences between each of these, read more about them here.
<div contenteditable="true" bind:innerHTML={html} /><details> elements support binding to the open property.
<details bind:open={isOpen}>
<summary>Details</summary>
<p>Something small enough to escape casual notice.</p>
</details>Media element bindingspermalinkMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...
duration (readonly) — the total duration of the video, in seconds
buffered (readonly) — an array of {start, end} objects
played (readonly) — ditto
seekable (readonly) — ditto
seeking (readonly) — boolean
ended (readonly) — boolean
readyState (readonly) — number between (and including) 0 and 4
...and five two-way bindings:
currentTime — the current playback time in the video, in seconds
playbackRate — how fast or slow to play the video, where 1 is 'normal'
paused — this one should be self-explanatory
volume — a value between 0 and 1
muted — a boolean value indicating whether the player is muted
Videos additionally have readonly videoWidth and videoHeight bindings.
<video
src={clip}
bind:duration
bind:buffered
bind:played
bind:seekable
bind:seeking
bind:ended
bind:readyState
bind:currentTime
bind:playbackRate
bind:paused
bind:volume
bind:muted
bind:videoWidth
bind:videoHeight
/>Image element bindingspermalinkImage elements (<img>) have two readonly bindings:
naturalWidth (readonly) — the original width of the image, available after the image has loaded
naturalHeight (readonly) — the original height of the image, available after the image has loaded
<img
bind:naturalWidth
bind:naturalHeight
></img>Block-level element bindingspermalinkBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:
clientWidth
clientHeight
offsetWidth
offsetHeight
<div bind:offsetWidth={width} bind:offsetHeight={height}>
<Chart {width} {height} />
</div>bind:grouppermalinkbind:group={variable}Inputs that work together can use bind:group.
<script>
let tortilla = 'Plain';
/** @type {Array<string>} */
let fillings = [];
</script>
<!-- grouped radio inputs are mutually exclusive -->
<input type="radio" bind:group={tortilla} value="Plain" />
<input type="radio" bind:group={tortilla} value="Whole wheat" />
<input type="radio" bind:group={tortilla} value="Spinach" />
<!-- grouped checkbox inputs populate an array -->
<input type="checkbox" bind:group={fillings} value="Rice" />
<input type="checkbox" bind:group={fillings} value="Beans" />
<input type="checkbox" bind:group={fillings} value="Cheese" />
<input type="checkbox" bind:group={fillings} value="Guac (extra)" />
bind:group only works if the inputs are in the same Svelte component.
bind:thispermalinkbind:this={dom_node}To get a reference to a DOM node, use bind:this.
<script>
import { onMount } from 'svelte';
/** @type {HTMLCanvasElement} */
let canvasElement;
onMount(() => {
const ctx = canvasElement.getContext('2d');
drawStuff(ctx);
});
</script>
<canvas bind:this={canvasElement} />class:namepermalinkclass:name={value}class:nameA class: directive provides a shorter way of toggling a class on an element.
<!-- These are equivalent -->
<div class={isActive ? 'active' : ''}>...</div>
<div class:active={isActive}>...</div>
<!-- Shorthand, for when name and value match -->
<div class:active>...</div>
<!-- Multiple class toggles can be included -->
<div class:active class:inactive={!active} class:isAdmin>...</div>style:propertypermalinkstyle:property={value}style:property="value"style:propertyThe style: directive provides a shorthand for setting multiple styles on an element.
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
<!-- Variables can be used -->
<div style:color={myColor}>...</div>
<!-- Shorthand, for when property and variable name match -->
<div style:color>...</div>
<!-- Multiple styles can be included -->
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
<!-- Styles can be marked as important -->
<div style:color|important="red">...</div>When style: directives are combined with style attributes, the directives will take precedence:
<div style="color: blue;" style:color="red">This will be red</div>use:actionpermalinkuse:actionuse:action={parameters}tsaction = (node: HTMLElement, parameters: any) => {	update?: (parameters: any) => void,	destroy?: () => void}Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.
Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
export let bar;
/** @type {import('svelte/action').Action}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />Read more in the svelte/action page.
transition:fnpermalinktransition:fntransition:fn={params}transition:fn|globaltransition:fn|global={params}transition:fn|localtransition:fn|local={params}tstransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}A transition is triggered by an element entering or leaving the DOM as a result of a state change.
When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.
The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.
{#if visible}
<div transition:fade>fades in and out</div>
{/if}Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.
{#if x}
{#if y}
<!-- Svelte 3: <p transition:fade|local> -->
<p transition:fade>fades in and out only when y changes</p>
<!-- Svelte 3: <p transition:fade> -->
<p transition:fade|global>fades in and out when x or y change</p>
{/if}
{/if}
By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.
Transition parameterspermalinkLike actions, transitions can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#if visible}
<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}Custom transition functionspermalinkTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the transition begins, with different t and u arguments.
<script>
import { elasticOut } from 'svelte/easing';
/** @type {boolean} */
export let visible;
/**
* @param {HTMLElement} node
* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
*/
function whoosh(node, params) {
const existingTransform = getComputedStyle(node).transform.replace('none', '');
return {
delay: params.delay || 0,
duration: params.duration || 400,
easing: params.easing || elasticOut,
css: (t, u) => `transform: ${existingTransform} scale(${t})`
};
}
</script>
{#if visible}
<div in:whoosh>whooshes in</div>
{/if}A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
App.svelte<script>
export let visible = false;
/**
* @param {HTMLElement} node
* @param {{ speed?: number }} params
*/
function typewriter(node, { speed = 1 }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
}
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}App.svelte<script lang="ts">
export let visible = false;
function typewriter(node: HTMLElement, { speed = 1 }: { speed?: number }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
},
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.
Transition functions also receive a third argument, options, which contains information about the transition.
Available values in the options object are:
direction - one of in, out, or both depending on the type of transition
Transition eventspermalinkAn element with transitions will dispatch the following events in addition to any standard DOM events:
introstart
introend
outrostart
outroend
{#if visible}
<p
transition:fly={{ y: 200, duration: 2000 }}
on:introstart={() => (status = 'intro started')}
on:outrostart={() => (status = 'outro started')}
on:introend={() => (status = 'intro ended')}
on:outroend={() => (status = 'outro ended')}
>
Flies in and out
</p>
{/if}in:fn/out:fnpermalinkin:fnin:fn={params}in:fn|globalin:fn|global={params}in:fn|localin:fn|local={params}out:fnout:fn={params}out:fn|globalout:fn|global={params}out:fn|localout:fn|local={params}Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.
Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.
{#if visible}
<div in:fly out:fade>flies in, fades out</div>
{/if}animate:fnpermalinkanimate:nameanimate:name={params}tsanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}tsDOMRect {	bottom: number,	height: number,	​​left: number,	right: number,	​top: number,	width: number,	x: number,	y: number}An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.
Animations can be used with Svelte's built-in animation functions or custom animation functions.
<!-- When `list` is reordered the animation will run-->
{#each list as item, index (item)}
<li animate:flip>{item}</li>
{/each}Animation ParameterspermalinkAs with actions and transitions, animations can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#each list as item, index (item)}
<li animate:flip={{ delay: 500 }}>{item}</li>
{/each}Custom animation functionspermalinkAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.
If the returned object has a css method, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the animation begins, with different t and u arguments.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
css: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each}A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each} previous Special tags next Component directives
svelte • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte   Edit this page on GitHub On this page   On this page  The svelte package exposes lifecycle functions and the context API.
onMountpermalink
tsfunction onMount<T>(	fn: () =>		| NotFunction<T>		| Promise<NotFunction<T>>		| (() => any)): void;
The onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).
onMount does not run inside a server-side component.
<script>
import { onMount } from 'svelte';
onMount(() => {
console.log('the component has mounted');
});
</script>If a function is returned from onMount, it will be called when the component is unmounted.
<script>
import { onMount } from 'svelte';
onMount(() => {
const interval = setInterval(() => {
console.log('beep');
}, 1000);
return () => clearInterval(interval);
});
</script>
This behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.
beforeUpdatepermalink
tsfunction beforeUpdate(fn: () => any): void;
Schedules a callback to run immediately before the component is updated after any state change.
The first time the callback runs will be before the initial onMount
<script>
import { beforeUpdate } from 'svelte';
beforeUpdate(() => {
console.log('the component is about to update');
});
</script>afterUpdatepermalink
tsfunction afterUpdate(fn: () => any): void;
Schedules a callback to run immediately after the component has been updated.
The first time the callback runs will be after the initial onMount
<script>
import { afterUpdate } from 'svelte';
afterUpdate(() => {
console.log('the component just updated');
});
</script>onDestroypermalink
tsfunction onDestroy(fn: () => any): void;
Schedules a callback to run immediately before the component is unmounted.
Out of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.
<script>
import { onDestroy } from 'svelte';
onDestroy(() => {
console.log('the component is being destroyed');
});
</script>tickpermalink
tsfunction tick(): Promise<void>;
Returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.
<script>
import { beforeUpdate, tick } from 'svelte';
beforeUpdate(async () => {
console.log('the component is about to update');
await tick();
console.log('the component just updated');
});
</script>setContextpermalink
tsfunction setContext<T>(key: any, context: T): T;
Associates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.
Like lifecycle functions, this must be called during component initialisation.
<script>
import { setContext } from 'svelte';
setContext('answer', 42);
</script>
Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.
getContextpermalink
tsfunction getContext<T>(key: any): T;
Retrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.
<script>
import { getContext } from 'svelte';
const answer = getContext('answer');
</script>hasContextpermalink
tsfunction hasContext(key: any): boolean;
Checks whether a given key has been set in the context of a parent component. Must be called during component initialisation.
<script>
import { hasContext } from 'svelte';
if (hasContext('answer')) {
// do something
}
</script>getAllContextspermalink
tsfunction getAllContexts<	T extends Map<any, any> = Map<any, any>>(): T;
Retrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.
<script>
import { getAllContexts } from 'svelte';
const contexts = getAllContexts();
</script>createEventDispatcherpermalink
tsfunction createEventDispatcher<	EventMap extends Record<string, any> = any>(): EventDispatcher<EventMap>;
Creates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.
Component events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>Events dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.
<script>
function callbackFunction(event) {
console.log(`Notify fired! Detail: ${event.detail}`);
}
</script>
<Child on:notify={callbackFunction} />Events can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
function notify() {
const shouldContinue = dispatch('notify', 'detail value', { cancelable: true });
if (shouldContinue) {
// no one called preventDefault
} else {
// a listener called preventDefault
}
}
</script>You can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.
TypespermalinkComponentConstructorOptionspermalink
tsinterface ComponentConstructorOptions<	Props extends Record<string, any> = Record<string, any>> {…}
tstarget: Element | Document | ShadowRoot;
tsanchor?: Element;
tsprops?: Props;
tscontext?: Map<any, any>;
tshydrate?: boolean;
tsintro?: boolean;
ts$$inline?: boolean;
ComponentEventspermalinkConvenience type to get the events the given component expects. Example:
<script lang="ts">
import type { ComponentEvents } from 'svelte';
import Component from './Component.svelte';
function handleCloseEvent(event: ComponentEvents<Component>['close']) {
console.log(event.detail);
}
</script>
<Component on:close={handleCloseEvent} />
tstype ComponentEvents<Component extends SvelteComponent> =	Component extends SvelteComponent<any, infer Events>		? Events		: never;
ComponentPropspermalinkConvenience type to get the props the given component expects. Example:
<script lang="ts">
import type { ComponentProps } from 'svelte';
import Component from './Component.svelte';
const props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props
</script>
tstype ComponentProps<Component extends SvelteComponent> =	Component extends SvelteComponent<infer Props>		? Props		: never;
ComponentTypepermalinkConvenience type to get the type of a Svelte component. Useful for example in combination with
dynamic components using <svelte:component>.
Example:
<script lang="ts">
import type { ComponentType, SvelteComponent } from 'svelte';
import Component1 from './Component1.svelte';
import Component2 from './Component2.svelte';
const component: ComponentType = someLogic() ? Component1 : Component2;
const componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;
</script>
<svelte:component this={component} />
<svelte:component this={componentOfCertainSubType} needsThisProp="hello" />
tstype ComponentType<	Component extends SvelteComponent = SvelteComponent> = (new (	options: ComponentConstructorOptions<		Component extends SvelteComponent<infer Props>			? Props			: Record<string, any>	>) => Component) & {	/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */	element?: typeof HTMLElement;};
SvelteComponentpermalinkBase class for Svelte components with some minor dev-enhancements. Used when dev=true.
Can be used to create strongly typed Svelte components.
Example:permalinkYou have component library on npm called component-library, from which
you export a component called MyComponent. For Svelte+TypeScript users,
you want to provide typings. Therefore you create a index.d.ts:
tsimport { SvelteComponent } from "svelte";export class MyComponent extends SvelteComponent<{foo: string}> {}Typing this makes it possible for IDEs like VS Code with the Svelte extension
to provide intellisense and to use the component like this in a Svelte file
with TypeScript:
<script lang="ts">
import { MyComponent } from "component-library";
</script>
<MyComponent foo={'bar'} />
tsclass SvelteComponent<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> {…}
ts[prop: string]: any;
tsconstructor(options: ComponentConstructorOptions<Props>);
ts$destroy(): void;
ts$capture_state(): void;
ts$inject_state(): void;
SvelteComponentTypedpermalink Use SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512
tsclass SvelteComponentTyped<	Props extends Record<string, any> = any,	Events extends Record<string, any> = any,	Slots extends Record<string, any> = any> extends SvelteComponent<Props, Events, Slots> {}
previous Special elements next svelte/store
Auto-subscriptions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Dimensions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions REPL  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Svelte Ripple • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Slots • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Default values • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values REPL  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Custom elements API • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Compiler and API Custom elements API   Edit this page on GitHub On this page   On this page  Svelte components can also be compiled to custom elements (aka web components) using the customElement: true compiler option. You should specify a tag name for the component using the <svelte:options> element.
<svelte:options customElement="my-element" />
<!-- in Svelte 3, do this instead:
<svelte:options tag="my-element" />
-->
<script>
export let name = 'world';
</script>
<h1>Hello {name}!</h1>
<slot />You can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static element property which contains the custom element constructor and which is available when the customElement compiler option is true.
tsimport MyElement from './MyElement.svelte';
customElements.define('my-element', MyElement.element);// In Svelte 3, do this instead:// customElements.define('my-element', MyElement);Once a custom element has been defined, it can be used as a regular DOM element:
tsdocument.body.innerHTML = `	<my-element>		<p>This is some slotted content</p>	</my-element>`;By default, custom elements are compiled with accessors: true, which means that any props are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).
To prevent this, add accessors={false} to <svelte:options>.
tsconst el = document.querySelector('my-element');
// get the current value of the 'name' propconsole.log(el.name);
// set a new value, updating the shadow DOMel.name = 'everybody';Component lifecyclepermalinkCustom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately.
When a custom element is created, the Svelte component it wraps is not created right away. It is only created in the next tick after the connectedCallback is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the extend option.
When a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.
The inner Svelte component is destroyed in the next tick after the disconnectedCallback is invoked.
Component optionspermalinkWhen constructing a custom element, you can tailor several aspects by defining customElement as an object within <svelte:options> since Svelte 4. This object may contain the following properties:
tag: the mandatory tag property for the custom element's name
shadow: an optional property that can be set to "none" to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots
props: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:
attribute: string: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning attribute: "<desired name>".
reflect: boolean: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set reflect: true.
type: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object': While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a String by default. This may not always be accurate. For instance, for a number type, define it using type: "Number"
You don't need to list all properties, those not listed will use the default settings.
extend: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use ElementInternals for better HTML form integration.
<svelte:options
customElement={{
tag: 'custom-element',
shadow: 'none',
props: {
name: { reflect: true, type: 'Number', attribute: 'element-index' }
},
extend: (customElementConstructor) => {
// Extend the class so we can let it participate in HTML forms
return class extends customElementConstructor {
static formAssociated = true;
constructor() {
super();
this.attachedInternals = this.attachInternals();
}
// Add the function here, not below in the component so that
// it's always available, not just when the inner Svelte component
// is mounted
randomIndex() {
this.elementIndex = Math.random();
}
};
}
}}
/>
<script>
export let elementIndex;
export let attachedInternals;
// ...
function check() {
attachedInternals.checkValidity();
}
</script>
...Caveats and limitationspermalinkCustom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as most frameworks. There are, however, some important differences to be aware of:
Styles are encapsulated, rather than merely scoped (unless you set shadow: "none"). This means that any non-component styles (such as you might have in a global.css file) will not apply to the custom element, including styles with the :global(...) modifier
Instead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string
Custom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads
In Svelte, slotted content renders lazily. In the DOM, it renders eagerly. In other words, it will always be created even if the component's <slot> element is inside an {#if ...} block. Similarly, including a <slot> in an {#each ...} block will not cause the slotted content to be rendered multiple times
The let: directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot
Polyfills are required to support older browsers
You can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use setContext on a parent custom element and read that with getContext in a child custom element.
previous Server-side component API next Frequently asked questions
What's new in Svelte: August 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: August 2021 Shadow DOM, export and await - oh my!  Dani Sandoval Aug 1 2021 On this page   On this page  From The Changelog (JS Party Ep. 182) to Svelte Radio (Episodes 29 and 30), it seems that folks couldn't help but talk about Svelte, this month! Also, shadow DOM support and new export and await functionality are new in Svelte.
New in SveltepermalinkJuly was the most active month for the Svelte core repo since late 2019 as we really worked to reduce the number of outstanding PRs and saw the release of Svelte 3.39.0, 3.40.0, and 3.41.0. Tons of bug fixes were added as well as the following new features:
The |trusted event modifier allows you to check if an event is trusted before it's called (#6137)
The new svelte/ssr package to support work on improving SvelteKit SSR (#6416)
A new errorMode compiler option to support improved preprocessing of TypeScript files (#6194)
You can now specify a ShadowRoot as the target when creating a component - making it possible to render Svelte components inside the shadow DOM (#5869)
The export { ... } from (#2214), export let { ... } = (#5612) and {#await ... then/catch} (#6270) syntaxes are all now supported in Svelte components
For a full list of features and bug fixes, check out the Svelte changelog.
SvelteKit Updatespermalink
prerender.force is now prerender.onError which lets you fine-tune which errors fail the build and which do not (#2007)
esbuild's configuration is now exposed for use with SvelteKit adapters (#1914)
Error messages are friendlier now for common config errors (#1910) and compiler errors (#1827)
Cookies will only be passed through if the target host is the same as the SvelteKit application or a more specific subdomain of it (#1847)
index.js exports will now be changed to directory exports when packaging - making for nicer imports (#1905)
Vite.js's mode is now exposed from $app/env (#1789)
Better types across the board (#1778, #1791, #1646)
To see all updates to SvelteKit, check out the SvelteKit changelog.
Features & bug fixes from around svelte/*permalink
Language Tools now better support the "Workplace Trust" functionality (used in VS Code)
In svelte2tsx, ambient type declarations are now renamed to avoid conflicting declarations in the future. Users are now expected to provide the ambient type definitions themselves - fixing JS output
Sapper released v0.29.2 which fixes regex routes, status codes when requesting a directory, and exports when a user has not provided a base tag (changelog)
Community ShowcasepermalinkApps & Sites
Parsnip is a mobile-first, progressive-web-app that helps you to learn to cook at home. Check out the conversation on Reddit for all the geeky details.
Central Bank Digital Currency (CBDC) tracker is a site that keeps track of how countries around the world are adopting digital currencies.
Svelte Commerce is an advanced frontend platform for eCommerce based on Sveltekit.
neovimcraft is a SvelteKit site dedicated to neovim plugins
Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better? Check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
Educational Content
How I Built a Cross-Platform Desktop Application with Svelte, Redis, and Rust is a blog post by Luke Edwards, Svelte maintainer and Developer Advocate from Cloudflare.
How to Create a Blog with SvelteKit and Strapi is a step-by-step tutorial by Aarnav Pai from Strapi
Sveltekit Markdown Blog is a YouTube tutorial series by WebJeda.
Using Custom Elements in Svelte is a deep dive into custom elements by Geoff Rich.
learn / graphql / svelte is a free 2-hour GraphQL course from Hasura.
How to add Magic Link to a SvelteKit application is a guide to the popular password-less login pattern.
Libraries, Tools & Components
Svelte-Capacitor just released v2.0.0 - making it even easier to build hybrid mobile apps for iOS and Android using Svelte and Capacitor with near native performance.
svelte-remixicon is an icon library for Svelte based on Remix Icon, consisting of more than 2000 icons.
SveltePress is a documentation tool built on top of SvelteKit.
Svelte Starter Kit is a boilerplate to quickly get up and running with Svelte, with Auth and User Profiles powered by Supabase.
Kahi UI is a Svelte-first UI kit with Dark Mode built-in.
typesafe-i18n is an opinionated, fully type-safe, lightweight localization library for TypeScript and JavaScript projects with no external dependencies.
Check out the community site sveltesociety.dev for more templates, adders and adapters from across the Svelte ecosystem.
See you next month!permalinkWant more updates? Join us on Reddit or Discord!
<svelte:window> bindings • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Clock • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
DOM events • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: December 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: December 2022 Rounding the corner to SvelteKit 1.0  Dani Sandoval Dec 1 2022 On this page   On this page  SvelteKit 1.0 is just around the corner! With 99% of the milestone issues completed, there's a lot of new changes from the last month to cover...
Let's get to it!
What's new in SvelteKitpermalink
Use the willUnload property to find out if the navigation will result the app being unloaded (full page reload/closing/leaving to another page). (#6813)
__data.json requests now allows for caching while ensuring we cache matching responses for all invalidation scenarios (#7532)
Linking to <a name="hash"> tags is now supported (#7596)
Throwing redirects in the handle hook is now supported (#7612)
A fallback component will now be added automatically for layouts without one (#7619)
The new preload function within the resolve hook determines what files should be added to the  tag to preload it (Docs, #4963, #7704)
version is now available via $app/environment (#7689, #7694)
handleError can now return a promise (#7780)
Breaking changes:
routeId is now route.id (#7450)
'load' has been renamed to 'enter' and 'unload' to 'leave' in the beforeNavigate and afterNavigate methods. beforeNavigate is now called once with type 'unload' on external navigation and will no longer run during redirects (#7502, #7529, #7588)
The redirect helper will now only allow status codes between 300-308 for redirects and only error status codes between 400-599 are allowed (#7767) (#7615, #7767)
Special characters will now be encoded with hex/unicode escape sequences in route directory names (#7644)
devalue is now used to (de)serialize action data - this is only a breaking change for everyone who fetches the actions directly and doesn't go through use:enhance (#7494)
trailingSlash is now a page option, rather than configuration (#7719)
The client-side router now ignores links outside %sveltekit.body% (#7766)
prerendering is now named building, and config.kit.prerender.enabled has been removed (#7762)
getStaticDirectory() has been removed from the builder API (#7809)
The format option has been removed from generateManifest(...) (#7820)
data-sveltekit-prefetch has been replaced with -preload-code and -preload-data, prefetch is now preloadData and prefetchRoutes is now preloadCode (#7776, #7776)
SubmitFunction has been moved from $app/forms into @sveltejs/kit (#7003)
New in Sveltepermalink
The css compiler options of css: false and css: true have been replaced with 'external' | 'injected' | 'none' settings to speed up compilation for ssr builds and improve clarity (3.53.0)
For all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
Community ShowcasepermalinkApps & Sites built with Svelte
Appwrite's new console makes its secure backend server for web, mobile & Flutter developers available in the browser
RepoMagic is a search and analytics tool for GitHub
Podman Desktop is a graphical tool for developing on containers and Kubernetes
Ballerine is a Know Your Customer (KYC) UX for any vertical or geography using modular building blocks, components, and 3rd party integrations
Budget Pen is a Codepen-like browser code editor with Tailwind included
doTogether helps you keep track of stuff you have get done via a List of recurring Tasks
Webscraped College Results is a collection of visualizations for data from r/collegeresults
Let's premortem helps avoid lengthy, frustrating post-mortems after a project fails
BLKMARKET.COM is an illustration library for commercial and personal use
Sigil is a canvas for anything with spaces organized by the most-voted content
corpus-activity-streams is an unofficial ActivityStreams 2.0 vocabulary data set and alternative docs
nodeMyAdmin is an alternative to phpMyAdmin written with SvelteKit
Image to Pattern Conversion is a cross-stitch pattern conversion tool with a list of pre-made patterns to start with
Verbums is an English vocabulary trainer to improve language comprehension
SVGPS removes the burden of working with a cluster of SVG files by converting your icons into a single JSON file
This 3D retro-themed asteroid shooter was made with threlte
Learning Resources
To Hear
Catching up after Svelte Summit and 3D, WebGL and AI by Svelte Radio
To Watch
Domenik Reitzner - The easy way, an introduction to Sveltekit from Svelte Society Vienna
Sirens: Form Actions - Kev joins the Sirens again to chat about Form actions in SvelteKit and create a new form for speaker submissions on SvelteSirens.dev
Introduction To 3D With Svelte (Threlte), How To Use Global Styles In SvelteKit and Progressive Form Enhancement With SvelteKit by Joy of Code
To Read
Building tic-tac-toe with Svelte by Geoff Rich
Speed up SvelteKit Pages With a Redis Cache by Captain Codeman
Understanding environment variables in SvelteKit, Form validation with SvelteKit and Zod and Build a SvelteKit application with Docker by Justin Ahinon
Why I failed to create the "Solid.js's store" for Svelte, and announcing svelte-store-tree v0.3.1 by YAMAMOTO Yuji
Create an offline-first and installable PWA with SvelteKit and workbox-precaching by Antonio Sarcevic
Libraries, Tools & Components
Skeleton is a UI toolkit to build fast and reactive web interfaces using Svelte + Tailwind CSS
svelte-svg-spinners is a collection of SVG Spinners components
Svelte Floating UI enables floating UIs with actions - no wrapper components or component bindings required
at-html lets you use {@html } tags with slots in Svelte apps
html-svelte-parser is a HTML to Svelte parser that works on both the server (Node.js) and the client (browser)
svelte-switcher is a fully customisable, touch-friendly, accessible and tiny toggle component
sveltkit-hook-html-minifier is a hook that wrapps html-minifier
sveltekit-hook-redirect is a hook that makes redirects easy
sveltekit-video-meet is a video calling web app built with SvelteKit and SocketIO
svelte-colourpicker is a lightweight opinionated colour picker component for Svelte
Svelte-HeadlessUI is an unofficial implementation of Tailwind HeadlessUI for Svelte
svelte-lazyimage-cache is a Lazy Image component with IntersectionObserver and cache action
threlte v5.0 is a completely new developer experience that is faster, more powerful, and incredibly flexible
That's it for this month! Let us know if we missed anything on Reddit or Discord
See ya next near 🎆
SVG transitions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Slot fallbacks • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks REPL  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Scatterplot • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
CRUD • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Introduction • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Getting Started Introduction   Edit this page on GitHub On this page   On this page  Welcome to the Svelte reference documentation! This is intended as a resource for people who already have some familiarity with Svelte and want to learn more about using it.
If that's not you (yet), you may prefer to visit the interactive tutorial or the examples before consulting this reference. You can try Svelte online using the REPL. Alternatively, if you'd like a more fully-featured environment, you can try Svelte on StackBlitz.
Start a new projectpermalinkWe recommend using SvelteKit, the official application framework from the Svelte team:
npm create svelte@latest myapp
cd myapp
npm install
npm run devSvelteKit will handle calling the Svelte compiler to convert your .svelte files into .js files that create the DOM and .css files that style it. It also provides all the other pieces you need to build a web application such as a development server, routing, deployment, and SSR support. SvelteKit uses Vite to build your code.
Alternatives to SvelteKitpermalinkIf you don't want to use SvelteKit for some reason, you can also use Svelte with Vite (but without SvelteKit) by running npm create vite@latest and selecting the svelte option. With this, npm run build will generate HTML, JS and CSS files inside the dist directory. In most cases, you will probably need to choose a routing library as well.
Alternatively, there are plugins for all the major web bundlers to handle Svelte compilation — which will output .js and .css that you can insert into your HTML — but most others won't handle SSR.
Editor toolingpermalinkThe Svelte team maintains a VS Code extension and there are integrations with various other editors and tools as well.
Getting helppermalinkDon't be shy about asking for help in the Discord chatroom! You can also find answers on Stack Overflow.
previous  next Svelte components
Media elements • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements REPL  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Text inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs REPL  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:document> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document> REPL  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
What's new in Svelte: October 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: October 2022 Svelte Summit, `use:enhance`, and a SvelteKit Release Candidate!  Dani Sandoval Oct 1 2022 On this page   On this page  There's a bunch of updates this month... from new features in Svelte and SvelteKit to a whole 2-day summit! Plus, the Svelte extension gets some helpful new tools, new accessibility (a11y) warnings, and Tan Li Hau teaches us how to build our own Svelte and a Svelte spreadsheet 😎
What happened at Svelte Summit?permalinkA lot! Below you can find all the talks, by timestamp, from each livestream. Bite-size videos of the event will be coming soon to the Svelte Society channel, so be sure to Subscribe, if you haven't already!
Day One
12:31 - How to get Svelte adopted at work
33:21 - Animating Data Visualization in Svelte
2:20:36 - Red flags & code smells
2:53:42 - Enhance your DX
4:42:41 - Svelte in UBS’ knowledge graph
5:06:42 - How to migrate react libraries to svelte
5:45:27 - DX magic in the world of Svelte
7:25:39 - Data visualizations powered by Svelte
7:59:38 - Partial Hydration in Svelte for Increased Performance
8:20:49 - Building the future, faster
Day Two
24:09 - Scrollytell me why: Ain't nothing but a piece of cake
2:02:40 - I told you my dog wouldn’t run
2:29:43 - 10Xing Svelte
3:04:56 - Svemix? Re-svmix? Re-svelte?: Bringing Svelte to Remix Router
5:09:39 - Having fun with stores: an interactive demo of Svelte’s built in state management library
5:37:06 - When Keeping it Svelte Goes Wrong. An Analysis of Some of the Worst Svelte I Have Ever Coded
7:22:05 - Getting started with Hooks
7:38:14 - Special Announcement*
*In the final talk of the summit, Rich Harris announces the first Release Candidate of SvelteKit! With no planned breaking changes left, the team is hard at work squashing bugs and adding the remaining features for 1.0...
More SvelteKit Updatespermalink
use:enhance is the easiest way to progressively enhance a form (Docs, #6633, #6828, #7012)
The demo app has been updated to add the Sverdle game, which Rich demoed at Svelte Summit and demonstrates use:enhance (#6979)
Cloudflare Pages _routes.json specification is now supported by adapter-cloudflare (#6530)
Improved build performance by running asset and page compression in parallel (#6710)
Breaking changes:
Node 16.14 is now the minimum version to run SvelteKit (#6388)
App.PrivateEnv and App.PublicEnv have been removed in favour of generated types (#6413)
%sveltekit.message% has been replaced with %sveltekit.error.message% (6659)
App.PageError is now App.Error - check for it in your hooks (Docs, #6963)
externalFetch is now handleFetch and will run for all fetch calls in load that run on the server (#6565)
For a full list of changes, check out SvelteKit's CHANGELOG.
Svelte Updatespermalink
New a11y warnings for incorrect-aria-attribute-type, no-abstract-role, interactive-element-to-noninteractive-role and role-has-required-aria-props.no-noninteractive-tabindex and click-events-have-key-events coming soon! (3.50.0)
New types for ComponentEvents and SveltePreprocessor (3.50.0)
Improved parsing speed when encountering large blocks of whitespace (3.50.0)
All global JavaScript objects and functions are now recognized as known globals (3.50.1)
For all the changes to the Svelte compiler, including upcoming changes, check out the CHANGELOG.
New in Language Toolspermalink
Better code formatting for editor suggestion (106.0.0, #1598)
Easily create SvelteKit route files from the context menu or command palette (106.1.0, #1620)
Ask Questions in the Svelte DiscordpermalinkIn case you missed the announcement, the Svelte Discord has an exciting new update... a forum! The new questions channel utilizes Discord's new forums feature to help the community better ask, find and answer questions!
It can be used for anything you may be trying to accomplish using Svelte including using SvelteKit, community libraries, tools, etc. So ask away!
Community ShowcasepermalinkApps & Sites built with Svelte
Timeflow is a smart calendar & task manager that dynamically schedules your tasks between your events
GeoQuest is an open source geography game
Houses Of is a project showcasing charismatic houses around the world
Greenfield Brewery is a tool for quickly installing a lot of homebrew casks
Gram Jam is a word puzzle game inspired by match three games and Scrabble
Beatbump is a privacy-respecting alternative frontend for YouTube Music
RoomOS Device Widgets is an app for demoing RoomOS device capabilities in Kiosk/PWA mode
World Seed is a full blown online multiplayer game
Lirify is a song lyrics writing web app tool made in Latvia
Splet Tech Konferencija is a tech conference in Serbia with a very fancy website
Unbounded is an open-source variable font - funded by blockchain (and an awesome-looking website)
Porter's Paints is an eCommerce site for (you guessed it) paints built with Svelte
CRAN/E is a search engine for modern R-packages
Learning Resources
Starring the Svelte team
Upgrading SvelteKit by Svelte Sirens (with Brittney, Kev, and GHOST!)
Build your own Svelte by lihautan
Native Page Transitions in SvelteKit: Part 1 by Geoff Rich
Build a cross platform app with Tauri by GHOST
To Watch
How To Use Future CSS In Svelte and Master Animation With Svelte by Joy of Code
Svelte Kit Form Actions 101 - New Svelte Kit API and Svelte Kit Form Actions - Real World Examples - Q&A by LevelUpTuts
To Read
What's new in svelte-kit, 1.0.0-next.445: (group) layout by Parables
Handling breaking changes in SvelteKit pre-1.0 by Thilo Maier
Svelte Custom Stores Demystified by Raqueebuddin Aziz
Sveltekit Changes: Advanced Layouts, Form Actions and Progressive Enhancement and Cookies and Authentication by Shivam Meena
How to add an Emoji Picker to Sveltekit by Xavier Coiffard
Get Started with SvelteKit Headless WordPress by Rodney Lab
Speed up SvelteKit Pages With a Redis Cache and How to await Firebase Auth with SvelteKit by Captain Codeman
Deploying SvelteKit with NodeJS to a Server Using GitLab and PM2 by A Byte of Coding
Quality of Life Tips when using SvelteKit in VS Code by doa-doa
Libraries, Tools & Components
Svelte Fit is an extremely simple, no dependency fit text library
svelte-switch-case is a switch case syntax for your Svelte components
svelte-canvas-confetti uses a single canvas to render full-screen confetti
@slidy/svelte is a simple, configurable & reusable carousel component built with Svelte - based on @slidy/core
svelte-currency-input is a form input that converts numbers to localized currency formats as you type
Adria is a super simple form validation library, with autocomplete and value/type checking
Canopy is a Svelte debugging app for the Chrome devtools panel
MenuFramework is a menu framework written for alt:V
whyframe gives iframes superpowers, making it easy to render anything in isolation
@svelte-put/modal is a solution to async, declarative, type-safe modals in Svelte
Kitty is a collection of libraries and handlers for developing secure frontend apps
svelte-turnstile is a component for Cloudflare Turnstile, the privacy focused CAPTCHA replacement
UI Kits and Starters
QWER is a blog starter built with SvelteKit
SvelteKit Zero API provides type-safety between the frontend and backend - creating a structure for easy APIs
sveltekit-monorepo is monorepo starter with 2022 tech
svelte-component-test-recipes uses vitest, @testing-library/svelte, and svelte-htm to test Svelte components that seemed to be hard to test
Whew! That's a lot of updates. Let us know if we missed anything on Reddit or Discord!
See ya next month 👋
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
If/Else with transition:slide - doesn't work • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
404
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Default values • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
setContext and getContext • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext REPL   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
What's new in Svelte: January 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: January 2023 SvelteKit 1.0, learn.svelte.dev, and type definitions for Svelte elements.  Dani Sandoval Jan 1 2023 On this page   On this page  It's been just two weeks since the release of SvelteKit 1.0! If you haven't yet, check out the livestream, new website and learn.svelte.dev to learn all the features of SvelteKit step-by-step.
Let's dive into the details...
What's new in SvelteKitpermalink
@sveltejs/kit 1.0 is out! All future releases will follow semver and changes will be listed as major/minor/patch in the CHANGELOG.
Improved support for Storybook and Histoire (#7990). Work is ongoing to fully support those tools (storybook#20239).
vitePreprocess is now the default preprocessor. Please see the docs for differences between vitePreprocess and svelte-preprocess (#8036).
Breaking changes:
Unknown exports (except when starting with an underscore) are no longer allowed from +(layout|page)(.server)?.js and +server.js files (#7878)
__data.json is now stripped from URL (#7979)
sveltekit() will now return a promise for an array of Vite plugins (#7994)
A new embedded option, turned off by default, helps with link clicks when embedding SvelteKit (docs, #7969)
Automatic fallback generation has been replaced with builder.generateFallback(fallback) (#8013)
invalid() is now fail() and ValidationError is now ActionFailure (#8012)
SvelteKit will now throw an error on invalid load response (#8003)
SvelteKit is now using Vite 4 and requires a Svelte peerDependency of ^3.54.0 (#7543)
Shells are now prerendered when ssr is false and prerender is not false - ensure prerender is false when ssr is also false (#8131)
Warnings and errors about removed/changed APIs have been removed (#8019)
What's new in Sveltepermalink
The options.direction argument can now be passed to custom transition functions (3.54.0, #3918)
Variables can now be updated from a @const declared function (3.54.0, #7843)
svelte/elements has been added for Svelte/HTML type definitions (3.55.0, #7649)
What's new in Language ToolspermalinkThe Svelte extension and language tools now have a few new minimum version requirements:
Node version is now 16
TypeScript version is now 4.9
Svelte version is now 3.55
The following features have also been released:
missing handler quick fix (#1731)
add Svelte anchor missing attribute code action (#1730)
better commit characters handling (#1742)
add --preserveWatchOutput option (#1715)
enhance Quickfixes to include Svelte Stores (#1789)
only show SvelteKit files context menu in SvelteKit projects (#1771)
use the satisfies operator if possible (#1770)
For all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
Community ShowcasepermalinkApps & Sites built with Svelte
Svelte Recipes 🧑‍🍳 provides code snippets for common data visualization problems
Everything Svelte is a new course teaching everything you need to know to build a modern web application
CSS Timeline is a Timeline of the history and evolution of CSS
GitBar is a system tray app for showing your pull requested reviews
Texture Lab generates instant textures for games from any text
Totems is a studio creating custom-made stands and supports
PeopletoNotion is a Chrome Extension that adds LinkedIn profiles to Notion in one click
DeckDev is a deck builder for Magic: The Gathering
Default Shortcuts is a tool for searching keyboard shortcuts across browsers.
Learning Resources
From Svelte Society
Svelte Society - London December 2022 featuring two talks by Antony and Rich, respectively. Rich's talk, "Mistakes were made" is a SvelteKit 1.0 retrospective.
SvelteKit with Netlify Edge Functions by Brittney Postma
Sirens Stream: Skeleton - A fully featured UI Toolkit with Chris Simmons and Brittney Postma
Sirens: SvelteKit for Enterprise - Lacey Pevey joins the Sirens to talk through using SvelteKit at the Enterprise level
Sirens: Form Actions - Kev joins the Sirens again to chat about Form actions in SvelteKit and create a new form for speaker submissions on SvelteSirens.dev
To Watch
SvelteKit is my mistress by Fireship
Sveltekit 1.0 in under 3 minutes by Gui Bibeau
What Svelte UI Library Should You Use? and The Best Icon Library For Svelte (Iconify) by Joy of Code
To Read
Rendering emails with Svelte by Gautier Ben Aïm
Now That React is Dead, What’s the Next Big Thing? by Somnath Singh
What is SvelteKit? And Why Should You Care? by Tila
Sveltekit API endpoints by Jef Meijvis
Chart.js 4.0 has been released, with updated Svelte support
Creating A Custom Svelte Media Query Store by Rik Schennink
Libraries, Tools & Components
Konsta UI is a library of pixel perfect mobile UI components built with Tailwind CSS for React, Vue & Svelte
probablykasper/modal-svelte is a modal component for Svelte
deepcrayon/scrolltron is a news ticker overlay for OBS Studio
JetBrains WebStorm 2022.3 now has built-in support for Svelte
NextAuth.js is now available for SvelteKit
SvelteKit CAS authentication is a set of functions to ease usage of a CAS/SSO in SvelteKit
@macfja/sveltekit-session is an easy way to do session management for SvelteKit
@svelte-plugins/tooltips is a basic tooltip component written in Svelte
tRPC-SvelteKit provides end-to-end typesafe APIs for your SvelteKit applications
SvelteKit Tailwind Blog Starter is an easily configurable and customizable blog starter for SvelteKit + Tailwind CSS
Free Svelte Accelerators is a list of Svelte and Sveltekit open source code to jump start your project
Happy new year 🎆 Let us know if we missed anything on Reddit or Discord
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Neon Flicker • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Each block bindings • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Shorthand class directive • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive REPL   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Svelte components • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Svelte components   Edit this page on GitHub On this page   On this page  Components are the building blocks of Svelte applications. They are written into .svelte files, using a superset of HTML.
All three sections — script, styles and markup — are optional.
<script>
// logic goes here
</script>
<!-- markup (zero or more items) goes here -->
<style>
/* styles go here */
</style><script>permalinkA <script> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules:
1. export creates a component proppermalinkSvelte uses the export keyword to mark a variable declaration as a property or prop, which means it becomes accessible to consumers of the component (see the section on attributes and props for more information).
<script>
export let foo;
// Values that are passed in as props
// are immediately available
console.log({ foo });
</script>You can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is undefined) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to undefined (rather than its initial value).
In development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined.
<script>
export let bar = 'optional default initial value';
export let baz = undefined;
</script>If you export a const, class or function, it is readonly from outside the component. Functions are valid prop values, however, as shown below.
App.svelte<script>
// these are readonly
export const thisIs = 'readonly';
/** @param {string} name */
export function greet(name) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>App.svelte<script lang="ts">
// these are readonly
export const thisIs = 'readonly';
export function greet(name: string) {
alert(`hello ${name}!`);
}
// this is a prop
export let format = (n) => n.toFixed(2);
</script>Readonly props can be accessed as properties on the element, tied to the component using bind:this syntax.
You can use reserved words as prop names.
App.svelte<script>
/** @type {string} */
let className;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>App.svelte<script lang="ts">
let className: string;
// creates a `class` property, even
// though it is a reserved word
export { className as class };
</script>2. Assignments are 'reactive'permalinkTo change component state and trigger a re-render, just assign to a locally declared variable.
Update expressions (count += 1) and property assignments (obj.x = y) have the same effect.
<script>
let count = 0;
function handleClick() {
// calling this function will trigger an
// update if the markup references `count`
count = count + 1;
}
</script>Because Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the tutorial.
<script>
let arr = [0, 1];
function handleClick() {
// this method call does not trigger an update
arr.push(2);
// this assignment will trigger an update
// if the markup references `arr`
arr = arr;
}
</script>Svelte's <script> blocks are run only when the component is created, so assignments within a <script> block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section.
<script>
export let person;
// this will only set `name` on component creation
// it will not update when `person` does
let { name } = person;
</script>3. $: marks a statement as reactivepermalinkAny top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the $: JS label syntax. Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed.
<script>
export let title;
export let person;
// this will update `document.title` whenever
// the `title` prop changes
$: document.title = title;
$: {
console.log(`multiple statements can be combined`);
console.log(`the current title is ${title}`);
}
// this will update `name` when 'person' changes
$: ({ name } = person);
// don't do this. it will run before the previous line
let name2 = name;
</script>Only values which directly appear within the $: block will become dependencies of the reactive statement. For example, in the code below total will only update when x changes, but not y.
App.svelte<script>
let x = 0;
let y = 0;
/** @param {number} value */
function yPlusAValue(value) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>App.svelte<script lang="ts">
let x = 0;
let y = 0;
function yPlusAValue(value: number) {
return value + y;
}
$: total = yPlusAValue(x);
</script>
Total: {total}
<button on:click={() => x++}> Increment X </button>
<button on:click={() => y++}> Increment Y </button>It is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that yDependent will not be updated when x is updated in the following example:
<script>
let x = 0;
let y = 0;
/** @param {number} value */
function setY(value) {
y = value;
}
$: yDependent = y;
$: setY(x);
</script>Moving the line $: yDependent = y below $: setY(x) will cause yDependent to be updated when x is updated.
If a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a let declaration on your behalf.
App.svelte<script>
/** @type {number} */
export let num;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>App.svelte<script lang="ts">
export let num: number;
// we don't need to declare `squared` and `cubed`
// — Svelte does it for us
$: squared = num * num;
$: cubed = squared * num;
</script>4. Prefix stores with $ to access their valuespermalinkA store is an object that allows reactive access to a value via a simple store contract. The svelte/store module contains minimal store implementations which fulfil this contract.
Any time you have a reference to a store, you can access its value inside a component by prefixing it with the $ character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate.
Assignments to $-prefixed variables require that the variable be a writable store, and will result in a call to the store's .set method.
Note that the store must be declared at the top level of the component — not inside an if block or a function, for example.
Local variables (that do not represent store values) must not have a $ prefix.
<script>
import { writable } from 'svelte/store';
const count = writable(0);
console.log($count); // logs 0
count.set(1);
console.log($count); // logs 1
$count = 2;
console.log($count); // logs 2
</script>Store contractpermalinktsstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }You can create your own stores without relying on svelte/store, by implementing the store contract:
A store must contain a .subscribe method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling .subscribe. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.
The .subscribe method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.
A store may optionally contain a .set method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a writable store.
For interoperability with RxJS Observables, the .subscribe method is also allowed to return an object with an .unsubscribe method, rather than return the unsubscription function directly. Note however that unless .subscribe synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as undefined until it does.
<script context="module">permalinkA <script> tag with a context="module" attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <script> (and the component markup) but not vice versa.
You can export bindings from this block, and they will become exports of the compiled module.
You cannot export default, since the default export is the component itself.
Variables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a store.
<script context="module">
let totalComponents = 0;
// the export keyword allows this function to imported with e.g.
// `import Example, { alertTotal } from './Example.svelte'`
export function alertTotal() {
alert(totalComponents);
}
</script>
<script>
totalComponents += 1;
console.log(`total number of times this component has been created: ${totalComponents}`);
</script><style>permalinkCSS inside a <style> block will be scoped to that component.
This works by adding a class to affected elements, which is based on a hash of the component styles (e.g. svelte-123xyz).
<style>
p {
/* this will only affect <p> elements in this component */
color: burlywood;
}
</style>To apply styles to a selector globally, use the :global(...) modifier.
<style>
:global(body) {
/* this will apply to <body> */
margin: 0;
}
div :global(strong) {
/* this will apply to all <strong> elements, in any
component, that are inside <div> elements belonging
to this component */
color: goldenrod;
}
p:global(.red) {
/* this will apply to all <p> elements belonging to this
component with a class of red, even if class="red" does
not initially appear in the markup, and is instead
added at runtime. This is useful when the class
of the element is dynamically applied, for instance
when updating the element's classList property directly. */
}
</style>If you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with -global-.
The -global- part will be removed when compiled, and the keyframe then be referenced using just my-animation-name elsewhere in your code.
<style>
@keyframes -global-my-animation-name {
/* code goes here */
}
</style>There should only be 1 top-level <style> tag per component.
However, it is possible to have <style> tag nested inside other elements or logic blocks.
In that case, the <style> tag will be inserted as-is into the DOM, no scoping or processing will be done on the <style> tag.
<div>
<style>
/* this style tag will be inserted as-is */
div {
/* this will apply to all `<div>` elements in the DOM */
color: red;
}
</style>
</div> previous Introduction next Basic markup
Circle Drawer • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Reactive declarations • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations REPL  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
{#each} destructuring doesn't update references to destructured params for defaults • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
<svelte:document> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Await blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
css grid gallery • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Styling • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling REPL  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
onDestroy • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy REPL  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
lobotomized owl selector • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Svelte Accordion • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Bar chart • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Style props break svg elements • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
404
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
svelte/store • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/store   Edit this page on GitHub On this page   On this page  The svelte/store module exports functions for creating readable, writable and derived stores.
Keep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.
This makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.
writablepermalink
tsfunction writable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Writable<T>;
Function that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.
set is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.
update is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'store.tstsimport { writable } from 'svelte/store';
const count = writable(0);
count.subscribe((value) => {	console.log(value);}); // logs '0'
count.set(1); // logs '1'
count.update((n) => n + 1); // logs '2'If a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.
store.jstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'store.tstsimport { writable } from 'svelte/store';
const count = writable(0, () => {	console.log('got a subscriber');	return () => console.log('no more subscribers');});
count.set(1); // does nothing
const unsubscribe = count.subscribe((value) => {	console.log(value);}); // logs 'got a subscriber', then '1'
unsubscribe(); // logs 'no more subscribers'Note that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.
readablepermalink
tsfunction readable<T>(	value?: T | undefined,	start?: StartStopNotifier<T> | undefined): Readable<T>;
Creates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.
tsimport { readable } from 'svelte/store';
const time = readable(new Date(), (set) => {	set(new Date());
const interval = setInterval(() => {		set(new Date());	}, 1000);
return () => clearInterval(interval);});
const ticktock = readable('tick', (set, update) => {	const interval = setInterval(() => {		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));	}, 1000);
return () => clearInterval(interval);});derivedpermalink
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (		values: StoresValues<S>,		set: (value: T) => void,		update: (fn: Updater<T>) => void	) => Unsubscriber | void,	initial_value?: T | undefined): Readable<T>;
tsfunction derived<S extends Stores, T>(	stores: S,	fn: (values: StoresValues<S>) => T,	initial_value?: T | undefined): Readable<T>;
Derives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.
In the simplest version, derived takes a single store, and the callback returns a derived value.
tsimport { derived } from 'svelte/store';
const doubled = derived(a, ($a) => $a * 2);The callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.
In this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.
tsimport { derived } from 'svelte/store';
const delayed = derived(	a,	($a, set) => {		setTimeout(() => set($a), 1000);	},	2000);
const delayedIncrement = derived(a, ($a, set, update) => {	set($a);	setTimeout(() => update((x) => x + 1), 1000);	// every time $a produces a value, this produces two	// values, $a immediately and then $a + 1 a second later});If you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.
tsimport { derived } from 'svelte/store';
const tick = derived(	frequency,	($frequency, set) => {		const interval = setInterval(() => {			set(Date.now());		}, 1000 / $frequency);
return () => {			clearInterval(interval);		};	},	2000);In both cases, an array of arguments can be passed as the first argument instead of a single store.
tsimport { derived } from 'svelte/store';
const summed = derived([a, b], ([$a, $b]) => $a + $b);
const delayed = derived([a, b], ([$a, $b], set) => {	setTimeout(() => set($a + $b), 1000);});readonlypermalink
tsfunction readonly<T>(store: Readable<T>): Readable<T>;
This simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.
tsimport { readonly, writable } from 'svelte/store';
const writableStore = writable(1);const readableStore = readonly(writableStore);
Property 'set' does not exist on type 'Readable<number>'.2339Property 'set' does not exist on type 'Readable<number>'.readableStore.subscribe(console.log);
writableStore.set(2); // console: 2readableStore.set(2); // ERRORgetpermalink
tsfunction get<T>(store: Readable<T>): T;
Generally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.
This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.
tsimport { get } from 'svelte/store';
const value = get(store);TypespermalinkReadablepermalinkReadable interface for subscribing.
tsinterface Readable<T> {…}
tssubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;
run subscription callback
invalidate cleanup callback
Subscribe on value changes.
StartStopNotifierpermalinkStart and stop notification callbacks.
This function is called when the first subscriber subscribes.
tstype StartStopNotifier<T> = (	set: (value: T) => void,	update: (fn: Updater<T>) => void) => void | (() => void);
SubscriberpermalinkCallback to inform of a value updates.
tstype Subscriber<T> = (value: T) => void;
UnsubscriberpermalinkUnsubscribes from value updates.
tstype Unsubscriber = () => void;
UpdaterpermalinkCallback to update a value.
tstype Updater<T> = (value: T) => T;
WritablepermalinkWritable interface for both updating and subscribing.
tsinterface Writable<T> extends Readable<T> {…}
tsset(this: void, value: T): void;
value to set
Set value and inform subscribers.
tsupdate(this: void, updater: Updater<T>): void;
updater callback
Update value using callback and inform subscribers.
previous svelte next svelte/motion
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Shorthand class directive • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
404
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Not found! If you were expecting to find something here, please drop by the
Discord chatroom
and let us know, or raise an issue on
GitHub. Thanks!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte:component --style-props issue • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
HTML tags • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags REPL   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Ease Visualiser • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Sapper: Towards the ideal web app framework
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Sapper: Towards the ideal web app framework Taking the next-plus-one step  Rich Harris Dec 31 2017 On this page   On this page
Quickstart for the impatient: the Sapper docs, and the starter template
If you had to list the characteristics of the perfect Node.js web application framework, you'd probably come up with something like this:
It should do server-side rendering, for fast initial loads and no caveats around SEO
As a corollary, your app's codebase should be universal — write once for server and client
The client-side app should hydrate the server-rendered HTML, attaching event listeners (and so on) to existing elements rather than re-rendering them
Navigating to subsequent pages should be instantaneous
Offline, and other Progressive Web App characteristics, must be supported out of the box
Only the JavaScript and CSS required for the first page should load initially. That means the framework should do automatic code-splitting at the route level, and support dynamic import(...) for more granular manual control
No compromise on performance
First-rate developer experience, with hot module reloading and all the trimmings
The resulting codebase should be easy to grok and maintain
It should be possible to understand and customise every aspect of the system — no webpack configs locked up in the framework, and as little hidden 'plumbing' as possible
Learning the entire framework in under an hour should be easy, and not just for experienced developers
Next.js is close to this ideal. If you haven't encountered it yet, I strongly recommend going through the tutorials at learnnextjs.com. Next introduced a brilliant idea: all the pages of your app are files in a your-project/pages directory, and each of those files is just a React component.
Everything else flows from that breakthrough design decision. Finding the code responsible for a given page is easy, because you can just look at the filesystem rather than playing 'guess the component name'. Project structure bikeshedding is a thing of the past. And the combination of SSR (server-side rendering) and code-splitting — something the React Router team gave up on, declaring 'Godspeed those who attempt the server-rendered, code-split apps' — is trivial.
But it's not perfect. As churlish as it might be to list the flaws in something so, so good, there are some:
Next uses something called 'route masking' to create nice URLs (e.g. /blog/hello-world instead of /post?slug=hello-world). This undermines the guarantee about directory structure corresponding to app structure, and forces you to maintain configuration that translates between the two forms
All your routes are assumed to be universal 'pages'. But it's very common to need routes that only render on the server, such as a 301 redirect or an API endpoint that serves the data for your pages, and Next doesn't have a great solution for this. You can add logic to your server.js file to handle these cases, but it feels at odds with the declarative approach taken for pages
To use the client-side router, links can't be standard <a> tags. Instead, you have to use framework-specific <Link> components, which is impossible in the markdown content for a blog post such as this one, for example
The real problem, though, is that all that goodness comes for a price. The simplest possible Next app — a single 'hello world' page that renders some static text — involves 66kb of gzipped JavaScript. Unzipped, it's 204kb, which is a non-trivial amount of code for a mobile device to parse at a time when performance is a critical factor determining whether or not your users will stick around. And that's the baseline.
We can do better!
The compiler-as-framework paradigm shiftpermalinkSvelte introduced a radical idea: what if your UI framework wasn't a framework at all, but a compiler that turned your components into standalone JavaScript modules? Instead of using a library like React or Vue, which knows nothing about your app and must therefore be a one-size-fits-all solution, we can ship highly-optimised vanilla JavaScript. Just the code your app needs, and without the memory and performance overhead of solutions based on a virtual DOM.
The JavaScript world is moving towards this model. Stencil, a Svelte-inspired framework from the Ionic team, compiles to web components. Glimmer doesn't compile to standalone JavaScript (the pros and cons of which deserve a separate blog post), but the team is doing some fascinating research around compiling templates to bytecode. (React is getting in on the action, though their current research focuses on optimising your JSX app code, which is arguably more similar to the ahead-of-time optimisations that Angular, Ractive and Vue have been doing for a few years.)
What happens if we use the new model as a starting point?
Introducing SapperpermalinkThe name comes from the term for combat engineers, and is also short for Svelte app maker
Sapper is the answer to that question. Sapper is a Next.js-style framework that aims to meet the eleven criteria at the top of this article while dramatically reducing the amount of code that gets sent to the browser. It's implemented as Express-compatible middleware, meaning it's easy to understand and customise.
The same 'hello world' app that took 204kb with React and Next weighs just 7kb with Sapper. That number is likely to fall further in the future as we explore the space of optimisation possibilities, such as not shipping any JavaScript at all for pages that aren't interactive, beyond the tiny Sapper runtime that handles client-side routing.
What about a more 'real world' example? Conveniently, the RealWorld project, which challenges frameworks to develop an implementation of a Medium clone, gives us a way to find out. The Sapper implementation takes 39.6kb (11.8kb zipped) to render an interactive homepage.
Code-splitting isn't free — if the reference implementation used code-splitting, it would be larger still
The entire app costs 132.7kb (39.9kb zipped), which is significantly smaller than the reference React/Redux implementation at 327kb (85.7kb), but even if it was as large it would feel faster because of code-splitting. And that's a crucial point. We're told we need to code-split our apps, but if your app uses a traditional framework like React or Vue then there's a hard lower bound on the size of your initial code-split chunk — the framework itself, which is likely to be a significant portion of your total app size. With the Svelte approach, that's no longer the case.
But size is only part of the story. Svelte apps are also extremely performant and memory-efficient, and the framework includes powerful features that you would sacrifice if you chose a 'minimal' or 'simple' UI library.
Trade-offspermalinkThe biggest drawback for many developers evaluating Sapper would be 'but I like React, and I already know how to use it', which is fair.
If you're in that camp, I'd invite you to at least try alternative frameworks. You might be pleasantly surprised! The Sapper RealWorld implementation totals 1,201 lines of source code, compared to 2,377 for the reference implementation, because you're able to express concepts very concisely using Svelte's template syntax (which takes all of five minutes to master). You get scoped CSS, with unused style removal and minification built-in, and you can use preprocessors like LESS if you want. You no longer need to use Babel. SSR is ridiculously fast, because it's just string concatenation. And we recently introduced svelte/store, a tiny global store that synchronises state across your component hierarchy with zero boilerplate. The worst that can happen is that you'll end up feeling vindicated!
But there are trade-offs nonetheless. Some people have a pathological aversion to any form of 'template language', and maybe that applies to you. JSX proponents will clobber you with the 'it's just JavaScript' mantra, and therein lies React's greatest strength, which is that it is infinitely flexible. That flexibility comes with its own set of trade-offs, but we're not here to discuss those.
And then there's ecosystem. The universe around React in particular — the devtools, editor integrations, ancillary libraries, tutorials, StackOverflow answers, hell, even job opportunities — is unrivalled. While it's true that citing 'ecosystem' as the main reason to choose a tool is a sign that you're stuck on a local maximum, apt to be marooned by the rising waters of progress, it's still a major point in favour of incumbents.
RoadmappermalinkWe're not at version 1.0.0 yet, and a few things may change before we get there. Once we do (soon!), there are a lot of exciting possibilities.
I believe the next frontier of web performance is 'whole-app optimisation'. Currently, Svelte's compiler operates at the component level, but a compiler that understood the boundaries between those components could generate even more efficient code. The React team's Prepack research is predicated on a similar idea, and the Glimmer team is doing some interesting work in this space. Svelte and Sapper are well positioned to take advantage of these ideas.
Speaking of Glimmer, the idea of compiling components to bytecode is one that we'll probably steal in 2018. A framework like Sapper could conceivably determine which compilation mode to use based on the characteristics of your app. It could even serve JavaScript for the initial route for the fastest possible startup time, then lazily serve a bytecode interpreter for subsequent routes, resulting in the optimal combination of startup size and total app size.
Mostly, though, we want the direction of Sapper to be determined by its users. If you're the kind of developer who enjoys life on the bleeding edge and would like to help shape the future of how we build web apps, please join us on GitHub and Discord.
Component bindings • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings REPL   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Counter • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter REPL  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
The animate directive • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive REPL   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Textarea inputs • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs REPL  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Conditional Slots • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
The animate directive • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:component> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component> REPL  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
svelte.dev: A complete overhaul
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           svelte.dev: A complete overhaul The new site comes with accessibility fixes, new features and bottom navbar  Puru Vijay Jun 29 2023 On this page   On this page  When the initial version of Svelte v3 was released four years ago, it included the single-page documentation that folks have been familiar with. That documentation structure had stayed the same as Svelte's API surface increased steadily and more details were added. As a result, the single page got larger and larger to the point where it was becoming difficult to find things. The community had been asking for a revamp, and now it's here!
Meet the new svelte.dev — a complete overhaul of the old website.
Multi-page docspermalinkThe table of contents had grown to be quite large and you had to scroll across half a dozen screens to see the whole thing. We heard you! The docs are all split up into multiple pages now and all pages list their sections in the righthand sidebar.
All modules exposed by Svelte are also listed in the sidebar under the Runtime section:
svelte
svelte/store
svelte/motion
svelte/transition
svelte/animate
svelte/easing
svelte/action
svelte/compiler is under Compiler and API section
We've also taken extra care to ensure that all the links from the old website will be redirected to the correct new page.
SearchpermalinkThe lack of search functionality could make finding stuff a nuisance as Ctrl+F only returns results in order of occurrence and not order of importance. While Ctrl+F did have its benefits such as not requiring JS, now that the site has multiple pages, it's not an option anymore.
And for that, the new website comes with a search bar, which searches through the docs and the API surface. Hit Ctrl+K (or CMD+K for Mac users) and start searching — it even works without JavaScript!
Lights, TypeScript, Action!permalinkThe new website comes with a JavaScript / TypeScript toggle, so you can view the docs in your preferred flavour. Every module's exported types are listed at the bottom of the page for easy reference. The types are automatically generated from Svelte's source code, so they're always up to date.
All the JavaScript and TypeScript code snippets have type hints available. Just hover over the variable to see its type. This allows the docs to be type checked at build time, which ensures they're never out of date.
We also (finally!) added documentation for Actions. Svelte Actions are a way to interact with the DOM, and are a great way to add interactivity to your app. The docs for Actions are also available in TypeScript.
<script lang="ts">
import type { Action } from 'svelte/action';
const foo: Action = (node) => {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
};
</script>
<div use:foo />Dark modepermalinkAfter many years of users asking for dark mode on the website so they can read the docs for their night-time coding sessions, we finally added it! The website now has a dark mode toggle, which is also synced with your OS's dark mode settings. It can be toggled from the top navbar (bottom navbar on mobile).
Updated REPLpermalinkThe REPL has been rewritten from scratch to be fully typesafe and comes with features like dark mode. It was reimplemented to upgrade to CodeMirror 6 which comes with many accessibility improvements, multi-select mode, performance improvements, tree-shaking, and many more features.
Redesigned homepagepermalinkIs it a website redesign if the homepage doesn't get the same amount of love? 🙃
The homepage has also been updated to align with kit.svelte.dev and features the beautiful Svelte Machine by @vedam.
Bottom navigation!permalinkWe sent out a tweet about experimenting with bottom navigation bar on mobile rather than the conventional top navbar. The response was overwhelmingly positive, so we went ahead and added it! This makes it easier to navigate the website on mobile with just one hand. We also made sure that you'll get to where you want with as few interactions as possible. If you're in the docs section of the site, you'll likely want to browse other documentation pages, which is why the navbar will show these by default when opening it with the option to go one level up to the general site navigation.
If you're on mobile, you can already see it at the bottom. If you're on desktop, you can see it by resizing your browser window to a smaller size.
Unification of Svelte websitespermalinkNow svelte.dev, kit.svelte.dev, and learn.svelte.dev all use the same design system and are more consistent with each other. This makes it easier to navigate between the websites and also makes it easier to maintain them. We have a package shared across the sites called @sveltejs/site-kit, which went through rigorous changes over last 4 months as we have been moving all common code into this package.
For example, we implemented the dark mode toggle in @sveltejs/site-kit. We then simply updated the package on learn.svelte.dev and kit.svelte.dev and those sites got the dark mode toggle automatically (this is also the reason why those sites got the dark mode toggle before the svelte.dev relaunch).
What's nextpermalinkWe have many more things planned to do post-launch. Some of them are:
Redesigned blog page
Improved search
Playground: a unified REPL and Examples page
Unify the infrastructure of the Svelte REPL and learn.svelte.dev by creating a webcontainer-based REPL with rollup as a fallback
Address any feedback
Element directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Element directives   Edit this page on GitHub On this page   On this page  As well as attributes, elements can have directives, which control the element's behaviour in some way.
on:eventnamepermalinkon:eventname={handler}on:eventname|modifiers={handler}Use the on: directive to listen to DOM events.
App.svelte<script>
let count = 0;
/** @param {MouseEvent} event */
function handleClick(event) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>App.svelte<script lang="ts">
let count = 0;
function handleClick(event: MouseEvent) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.
<button on:click={() => (count += 1)}>
count: {count}
</button>Add modifiers to DOM events with the | character.
<form on:submit|preventDefault={handleSubmit}>
<!-- the `submit` event's default is prevented,
so the page won't reload -->
</form>The following modifiers are available:
preventDefault — calls event.preventDefault() before running the handler
stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element
stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.
passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)
nonpassive — explicitly set passive: false
capture — fires the handler during the capture phase instead of the bubbling phase
once — remove the handler after the first time it runs
self — only trigger handler if event.target is the element itself
trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.
Modifiers can be chained together, e.g. on:click|once|capture={...}.
If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.
<button on:click> The component itself will emit the click event </button>It's possible to have multiple event listeners for the same event:
<script>
let counter = 0;
function increment() {
counter = counter + 1;
}
/** @param {MouseEvent} event */
function track(event) {
trackEvent(event);
}
</script>
<button on:click={increment} on:click={track}>Click me!</button>bind:propertypermalinkbind:property={variable}Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.
The simplest bindings reflect the value of a property, such as input.value.
<input bind:value={name} />
<textarea bind:value={text} />
<input type="checkbox" bind:checked={yes} />If the name matches the value, you can use a shorthand.
<input bind:value />
<!-- equivalent to
<input bind:value={value} />
-->Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type="number"), the value is undefined.
<input type="number" bind:value={num} />
<input type="range" bind:value={num} />On <input> elements with type="file", you can use bind:files to get the FileList of selected files. It is readonly.
<label for="avatar">Upload a picture:</label>
<input accept="image/png, image/jpeg" bind:files id="avatar" name="avatar" type="file" />If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.
<script>
let value = 'Hello World';
</script>
<input
on:input={() => console.log('Old value:', value)}
bind:value
on:input={() => console.log('New value:', value)}
/>Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.
Binding <select> valuepermalinkA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).
<select bind:value={selected}>
<option value={a}>a</option>
<option value={b}>b</option>
<option value={c}>c</option>
</select>A <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.
<select multiple bind:value={fillings}>
<option value="Rice">Rice</option>
<option value="Beans">Beans</option>
<option value="Cheese">Cheese</option>
<option value="Guac (extra)">Guac (extra)</option>
</select>When the value of an <option> matches its text content, the attribute can be omitted.
<select multiple bind:value={fillings}>
<option>Rice</option>
<option>Beans</option>
<option>Cheese</option>
<option>Guac (extra)</option>
</select>Elements with the contenteditable attribute support the following bindings:
innerHTML
innerText
textContent
There are slight differences between each of these, read more about them here.
<div contenteditable="true" bind:innerHTML={html} /><details> elements support binding to the open property.
<details bind:open={isOpen}>
<summary>Details</summary>
<p>Something small enough to escape casual notice.</p>
</details>Media element bindingspermalinkMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...
duration (readonly) — the total duration of the video, in seconds
buffered (readonly) — an array of {start, end} objects
played (readonly) — ditto
seekable (readonly) — ditto
seeking (readonly) — boolean
ended (readonly) — boolean
readyState (readonly) — number between (and including) 0 and 4
...and five two-way bindings:
currentTime — the current playback time in the video, in seconds
playbackRate — how fast or slow to play the video, where 1 is 'normal'
paused — this one should be self-explanatory
volume — a value between 0 and 1
muted — a boolean value indicating whether the player is muted
Videos additionally have readonly videoWidth and videoHeight bindings.
<video
src={clip}
bind:duration
bind:buffered
bind:played
bind:seekable
bind:seeking
bind:ended
bind:readyState
bind:currentTime
bind:playbackRate
bind:paused
bind:volume
bind:muted
bind:videoWidth
bind:videoHeight
/>Image element bindingspermalinkImage elements (<img>) have two readonly bindings:
naturalWidth (readonly) — the original width of the image, available after the image has loaded
naturalHeight (readonly) — the original height of the image, available after the image has loaded
<img
bind:naturalWidth
bind:naturalHeight
></img>Block-level element bindingspermalinkBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:
clientWidth
clientHeight
offsetWidth
offsetHeight
<div bind:offsetWidth={width} bind:offsetHeight={height}>
<Chart {width} {height} />
</div>bind:grouppermalinkbind:group={variable}Inputs that work together can use bind:group.
<script>
let tortilla = 'Plain';
/** @type {Array<string>} */
let fillings = [];
</script>
<!-- grouped radio inputs are mutually exclusive -->
<input type="radio" bind:group={tortilla} value="Plain" />
<input type="radio" bind:group={tortilla} value="Whole wheat" />
<input type="radio" bind:group={tortilla} value="Spinach" />
<!-- grouped checkbox inputs populate an array -->
<input type="checkbox" bind:group={fillings} value="Rice" />
<input type="checkbox" bind:group={fillings} value="Beans" />
<input type="checkbox" bind:group={fillings} value="Cheese" />
<input type="checkbox" bind:group={fillings} value="Guac (extra)" />
bind:group only works if the inputs are in the same Svelte component.
bind:thispermalinkbind:this={dom_node}To get a reference to a DOM node, use bind:this.
<script>
import { onMount } from 'svelte';
/** @type {HTMLCanvasElement} */
let canvasElement;
onMount(() => {
const ctx = canvasElement.getContext('2d');
drawStuff(ctx);
});
</script>
<canvas bind:this={canvasElement} />class:namepermalinkclass:name={value}class:nameA class: directive provides a shorter way of toggling a class on an element.
<!-- These are equivalent -->
<div class={isActive ? 'active' : ''}>...</div>
<div class:active={isActive}>...</div>
<!-- Shorthand, for when name and value match -->
<div class:active>...</div>
<!-- Multiple class toggles can be included -->
<div class:active class:inactive={!active} class:isAdmin>...</div>style:propertypermalinkstyle:property={value}style:property="value"style:propertyThe style: directive provides a shorthand for setting multiple styles on an element.
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
<!-- Variables can be used -->
<div style:color={myColor}>...</div>
<!-- Shorthand, for when property and variable name match -->
<div style:color>...</div>
<!-- Multiple styles can be included -->
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
<!-- Styles can be marked as important -->
<div style:color|important="red">...</div>When style: directives are combined with style attributes, the directives will take precedence:
<div style="color: blue;" style:color="red">This will be red</div>use:actionpermalinkuse:actionuse:action={parameters}tsaction = (node: HTMLElement, parameters: any) => {	update?: (parameters: any) => void,	destroy?: () => void}Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.
Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
export let bar;
/** @type {import('svelte/action').Action}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />Read more in the svelte/action page.
transition:fnpermalinktransition:fntransition:fn={params}transition:fn|globaltransition:fn|global={params}transition:fn|localtransition:fn|local={params}tstransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}A transition is triggered by an element entering or leaving the DOM as a result of a state change.
When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.
The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.
{#if visible}
<div transition:fade>fades in and out</div>
{/if}Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.
{#if x}
{#if y}
<!-- Svelte 3: <p transition:fade|local> -->
<p transition:fade>fades in and out only when y changes</p>
<!-- Svelte 3: <p transition:fade> -->
<p transition:fade|global>fades in and out when x or y change</p>
{/if}
{/if}
By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.
Transition parameterspermalinkLike actions, transitions can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#if visible}
<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}Custom transition functionspermalinkTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the transition begins, with different t and u arguments.
<script>
import { elasticOut } from 'svelte/easing';
/** @type {boolean} */
export let visible;
/**
* @param {HTMLElement} node
* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
*/
function whoosh(node, params) {
const existingTransform = getComputedStyle(node).transform.replace('none', '');
return {
delay: params.delay || 0,
duration: params.duration || 400,
easing: params.easing || elasticOut,
css: (t, u) => `transform: ${existingTransform} scale(${t})`
};
}
</script>
{#if visible}
<div in:whoosh>whooshes in</div>
{/if}A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
App.svelte<script>
export let visible = false;
/**
* @param {HTMLElement} node
* @param {{ speed?: number }} params
*/
function typewriter(node, { speed = 1 }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
}
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}App.svelte<script lang="ts">
export let visible = false;
function typewriter(node: HTMLElement, { speed = 1 }: { speed?: number }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
},
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.
Transition functions also receive a third argument, options, which contains information about the transition.
Available values in the options object are:
direction - one of in, out, or both depending on the type of transition
Transition eventspermalinkAn element with transitions will dispatch the following events in addition to any standard DOM events:
introstart
introend
outrostart
outroend
{#if visible}
<p
transition:fly={{ y: 200, duration: 2000 }}
on:introstart={() => (status = 'intro started')}
on:outrostart={() => (status = 'outro started')}
on:introend={() => (status = 'intro ended')}
on:outroend={() => (status = 'outro ended')}
>
Flies in and out
</p>
{/if}in:fn/out:fnpermalinkin:fnin:fn={params}in:fn|globalin:fn|global={params}in:fn|localin:fn|local={params}out:fnout:fn={params}out:fn|globalout:fn|global={params}out:fn|localout:fn|local={params}Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.
Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.
{#if visible}
<div in:fly out:fade>flies in, fades out</div>
{/if}animate:fnpermalinkanimate:nameanimate:name={params}tsanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}tsDOMRect {	bottom: number,	height: number,	​​left: number,	right: number,	​top: number,	width: number,	x: number,	y: number}An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.
Animations can be used with Svelte's built-in animation functions or custom animation functions.
<!-- When `list` is reordered the animation will run-->
{#each list as item, index (item)}
<li animate:flip>{item}</li>
{/each}Animation ParameterspermalinkAs with actions and transitions, animations can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#each list as item, index (item)}
<li animate:flip={{ delay: 500 }}>{item}</li>
{/each}Custom animation functionspermalinkAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.
If the returned object has a css method, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the animation begins, with different t and u arguments.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
css: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each}A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each} previous Special tags next Component directives
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Introduction / Basics • Svelte Tutorial
Skip to main content  svelte.dev svelte  ｜ Tutorial     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme               Introduction / Basics a. Basicsb. Adding datac. Dynamic attributesd. Stylinge. Nested componentsf. Making an appa. Assignmentsb. Declarationsc. Statementsd. Updating arrays and objectsa. Declaring propsb. Default valuesc. Spread propsa. If blocksb. Else blocksc. Else-if blocksd. Each blockse. Keyed each blocksf. Await blocksa. DOM eventsb. Inline handlersc. Event modifiersd. Component eventse. Event forwardingf. DOM event forwardinga. Text inputsb. Numeric inputsc. Checkbox inputsd. Group inputse. Textarea inputsf. Select bindingsg. Select multipleh. Contenteditable bindingsi. Each block bindingsj. Media elementsk. Dimensionsl. Thism. Component bindingsn. Binding to component instancesa. onMountb. onDestroyc. beforeUpdate and afterUpdated. ticka. Writable storesb. Auto-subscriptionsc. Readable storesd. Derived storese. Custom storesf. Store bindingsa. Tweenedb. Springa. The transition directiveb. Adding parametersc. In and outd. Custom CSS transitionse. Custom JS transitionsf. Transition eventsg. Global transitionsh. Deferred transitionsi. Key blocksa. The animate directivea. The use directiveb. Adding parametersa. The class directiveb. Shorthand class directivec. Inline stylesd. The style directivea. Slotsb. Slot fallbacksc. Named slotsd. Checking for slot contente. Slot propsa. setContext and getContexta. <svelte:self>b. <svelte:component>c. <svelte:element>d. <svelte:window>e. <svelte:window> bindingsf. <svelte:document>g. <svelte:body>h. <svelte:head>i. <svelte:options>j. <svelte:fragment>a. Sharing codeb. Exportsa. The @debug tagb. HTML tagsa. Congratulations!    Welcome to the Svelte tutorial. This will teach you everything you need to know to build fast, small web applications easily.
You can also consult the API docs and the examples, or — if you're impatient to start hacking on your machine locally — the 60-second quickstart.
What is Svelte?permalinkSvelte is a tool for building fast web applications.
It is similar to JavaScript frameworks such as React and Vue, which share a goal of making it easy to build slick interactive user interfaces.
But there's a crucial difference: Svelte converts your app into ideal JavaScript at build time, rather than interpreting your application code at run time. This means you don't pay the performance cost of the framework's abstractions, and you don't incur a penalty when your app first loads.
You can build your entire app with Svelte, or you can add it incrementally to an existing codebase. You can also ship components as standalone packages that work anywhere, without the overhead of a dependency on a conventional framework.
How to use this tutorialpermalinkYou'll need to have basic familiarity with HTML, CSS and JavaScript to understand Svelte.
As you progress through the tutorial, you'll be presented with mini exercises designed to illustrate new features. Later chapters build on the knowledge gained in earlier ones, so it's recommended that you go from start to finish. If necessary, you can navigate via the dropdown above (click 'Introduction / Basics').
Each tutorial chapter will have a 'Show me' button that you can click if you get stuck following the instructions. Try not to rely on it too much; you will learn faster by figuring out where to put each suggested code block and manually typing it into the editor.
Understanding componentspermalinkIn Svelte, an application is composed from one or more components. A component is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written into a .svelte file. The 'hello world' example in the code editor is a simple component.
Edit this chapter
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: December 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: December 2021 Svelte Summit Fall 2021 Recap, Rich Harris joins Vercel, and Kevin goes full-time on Svelte Society  Dani Sandoval Dec 1 2021 On this page   On this page  With SvelteKit getting more and more stable each day, there's not much to cover in terms of code changes other than bug fixes... So, in this month's newsletter, we'll be covering Svelte Summit Fall 2021!
If you want to dive deep into the last month's worth of bug fixes, check out the Svelte and SvelteKit changelogs, respectively.
What happened at Svelte Summit?permalinkIf you missed Svelte Summit, you can watch the entire live stream on YouTube and catch a recap in the #svelte-summit channel on Discord.
Here are the highlights:
Rich Harris took us through a tour of Svelte's history and announced his move to Vercel - where he will be helping maintain Svelte full-time! (20:00)
Steph Dietz explained how Svelte's simple abstractions makes it easy for beginners and experts alike to learn and use JavaScript - without the boilerplate (29:00)
Kevin Bridges dove deep into Svelte's reactivity logic by visualizing it through ReflectiveCounter and showing how to "fine tune" it, as needed. A full "syllabus" for the presentation is available on Kevin's site. (42:55)
Mateo Morris launched Primo, an all-in-one SvelteKit CMS to help build and manage static sites (1:12:34)
Guillermo Rauch explained Vercel's commitment to Svelte, what it means to have Rich on the team, and what's coming next from the company... (1:21:54)
Geoff Rich introduced various ways to modify motion and transitions within Svelte to be more accessible to all users of the web. Slides and a full transcription of the talk are available on Geoff's site. (1:32:30)
Dean Fogarty demoed a number of different use-cases for custom stores - transforming data to and from storage mechanisms within Svelte. Transcript and code is available on Dean's GitHub. (1:43:06)
Kellen Mace shared how we can let content creators keep using WordPress, while leveraging Svelte on the frontend to provide a phenomenal user experience (1:49:30)
Ben Holmes explained the "islands" architecture and how 11ty + Slinkity can bring these islands to any HTML template (2:17:15)
Scott Tolinski shared the lessons learned from rewriting the React-based LevelUpTutorials in Svelte and "found developer bliss" (3:16:35)
Svelte Sirens was announced as the new Svelte community for women, non-binary and allies. Their first event was on November 29th - all future events can be found on the Svelte Sirens website (3:50:45)
Rich Harris discussed creating libraries with SvelteKit, better ways to link packages when developing, and how SvelteKit helps with modern JavaScript library development (3:56:00)
Ken Kunz explained how finite state machines (and the svelte-fsm library) can make managing Svelte component states more... manageable. Examples from the talk are available on Ken's GitHub. (4:07:18)
Austin Crim connected learning to code on the web to learning how to play an instrument. By giving learners early wins and introducing the fundamentals through real-world apps, learning Svelte (and the fundamentals underneath) doesn't have to be a chore (4:21:50)
Jesse Skinner brought our legacy apps into the future by explaining how to use (and reuse) Svelte components within React (and even jQuery!) projects (4:32:30)
Jim Fisk and Stephanie Luz introduced Plenti and its theming tools to make building new Svelte sites much faster (4:59:00)
Evyatar Alush helped us all make (and maintain) better forms using a powerful validation library called Vest (5:08:55)
Dominik G. presented a fresh take on icon libraries - one that reduces the bundle size of applications and opens up the entire iconify library for use in any Svelte app (5:30:04)
Thanks to Kevin and all the Svelte Society volunteers for pulling together such an amazing event! Excitingly, Kevin announced after the event that he will now be working full-time on Svelte Society! You can check out all the talks, broken up into individual videos for convenience, in this Svelte Society YouTube Playlist.
If you have feedback on the Svelte Summit, Kev is looking for feedback on the Svelte subreddit 👀
Community ShowcasepermalinkApps & Sites
pixeldrain is a free-to-use file sharing platform
LifeHash generates beautiful visual hashes from Blockchain Commons
simple-cloud-music is a lightweight third-party NetEase cloud music player for modern browsers (likely only works on Chrome)
palette.rocks is a color palette generator with contrast-checking built-in
Kadium is an app for staying on top of YouTube channel uploads
Multi-Monitor Calculator is a tool for planning your multi-monitor setup
Your Home is an interactive overview of Facebook's privacy settings
Svelte Crush is a Candy Crush style match-3 game
100.000 Corona deaths in Germany is a visualization made for Spiegel Gesundheit
Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better? Check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
Videos, Blogs and Podcasts
How To Make and Publish a Svelte Library
SvelteKit is now fully supported in WebContainers
Introducing Svelte, and Comparing Svelte with React and Vue
Testing a Svelte app with Jest
How to create a toast notification library package with SvelteKit
Svelte training: Here you can learn Svelte
Introduction to Svelte Actions
Enjoy making DAPPs using SvelteWeb3
Svelte creator: Web development should be more fun
Svelte Radio: Rich Harris is now working full-time on Svelte 🤯
Web Rush: Svelte and Elder.js with Nick Reese
Building SvelteKit applications with Serverless Redis
Libraries, Tools & Components
svelte-cubed is a Three.js component library for Svelte - created by Rich Harris for his presentation at Svelte Summit Fall 2021
svelte-fsm is a tiny, simple, expressive, pragmatic Finite State Machine (FSM) library, optimized for Svelte
bromb is a feedback widget for websites/web apps that is small and easy to integration/self-host
Spaper is a set of PaperCSS components for Svelte
svelte-intl-precompile is an i18n library for Svelte that analyzes and compiles your translations at build time
svelte-preprocess-svg automatically optimizes inline svg in Svelte components for better performance and reduced file size
svelte-subcomponent-preprocessor allows you to write more than one component within a svelte file
svelte-pdfjs is a crude implementation of a Svelte PDF viewer component
svelte-inview is a Svelte action that monitors an element enters or leaves the viewport/parent element
sveltekit-adapter-wordpress-shortcode is an adapter for SvelteKit which turns your app into a wordpress shortcode
svelte-websocket-store is a Svelte store with a websocket backend
Svelte Auto Form is a fast and fun form library focused on ease of use, rather than flexibility.
set-focus is an Svelte action that will set focus on <a> or <button> elements as soon as they mount - useful for some experiences and testing
Got an idea for SvelteKit? Check out the new GitHub Discussions in the Svelte repo. You can also join us on Reddit or Discord.
See you next month year!
File inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
SVG transitions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions REPL   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Immutable data • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data REPL        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
svelte/easing • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Runtime svelte/easing   Edit this page on GitHub On this page   On this page  Easing functions specify the rate of change over time and are useful when working with Svelte's built-in transitions and animations as well as the tweened and spring utilities. svelte/easing contains 31 named exports, a linear ease and 3 variants of 10 different easing functions: in, out and inOut.
You can explore the various eases using the ease visualiser in the examples section.
ease
in
out
inOut
back
backIn
backOut
backInOut
bounce
bounceIn
bounceOut
bounceInOut
circ
circIn
circOut
circInOut
cubic
cubicIn
cubicOut
cubicInOut
elastic
elasticIn
elasticOut
elasticInOut
expo
expoIn
expoOut
expoInOut
quad
quadIn
quadOut
quadInOut
quart
quartIn
quartOut
quartInOut
quint
quintIn
quintOut
quintInOut
sine
sineIn
sineOut
sineInOut
previous svelte/animate next svelte/action
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: March 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: March 2022 Svelte Summit Spring is coming... and page endpoints are here!  Dani Sandoval Mar 1 2022 On this page   On this page  Just announced: Svelte Summit Spring will be taking place on April 30, 2022. The 5th Virtual Svelte Conference is looking for speakers and sponsors... so it's time to dust off those proposals!
Also, some long-requested features were added to SvelteKit this month... including page endpoints! This change in how the load function works makes it easier to fetch data required for basic pages, redirect from POST responses and handle 404s and other errors.
More on that and other new features and fixes below!
What's new in SvelteKitpermalink
The docs are now searchable and multipage with type definitions and hoverable code examples - Check them out at kit.svelte.dev/docs
Page endpoints significantly decrease the boilerplate needed when loading a page (Issue, PR, Docs)
Application versioning and update detection support lets you determine what to do when a route fails to load after an app update (Issue, PR, Docs)
A new option in npm init svelte@next will now set up Playwright automatically for testing (PR)
Breaking Changes
The target option is no longer available. Instead, the init script hydrates its parentNode (#3674)
App-level types now live in the App namespace which allows you to type global types like Stuff or Session (#3670)
JSONString is now JSONValue (#3683)
createIndexFiles has been removed — it is now controlled by the trailingSlash option (#3801)
SvelteKit will no longer exclude root-relative external links from prerendering, which will cause 404s if these URLs are intended to be served by a separate app. Use a custom prerender.onError handler if you need to ignore them (#3826)
New in Language Toolspermalink
Accessing properties in markups has been improved in the Svelte language tools (105.12.0) - working around some known issues with autocomplete (#538 / #1302)
Community ShowcasepermalinkApps & Sites
SvelteStorm is specifically tailored to provide all of the essential tools a Svelte developer needs to build a Svelte application
Supachat is a real-time chat app using Svelte and Supabase
Radicle is a peer-to-peer stack for building software together
The Making Known is a narrated encounter with posters designed by the Nazi German government to communicate with the occupied nations of Belgium, France, and Luxembourg during the Second World War
Svelte Kanban is a simple Svelte Kanban made in pure CSS
fngrng is a typing trainer focussed on accuracy over speed
Generative grids is a neat little generative SVG grid in a Svelte REPL, with randomly generated color palettes and shapes
LifeHash is a method of hash visualization that creates beautiful, deterministic icons
TypedWebhook.tools is a webhook testing tool for checking payloads, with automatic type generation
Speedskating is an animation widget to show olympic speedskating runs. Built with Svelte, D3 and regl
Web tail is a web application to view lines from file on local system or on remote server
Want to work on a SvelteKit site with others? Contribute to the Svelte Society site!
Learning Resources
To Read
Svelte Components as Web Components by Matias Meno
Simple Svelte Routing with Reactive URLs by Bjorn Lu
Leveling Up my Sveltekit / Sanity.io Blog Content with Featured Videos and Syntax Highlighting by Ryan Boddy
How This Blog Makes the Most of GitHub by paullj
FullStack JWT Auth: Introducing SvelteKit by John Idogun
Svelte-Cubed: Adding Motion to 3D Scenes by Alex Warnes
Creating a RSS feed with Sanity and Svelte Kit by GHOST
How to use Svelte's style directive by Geoff Rich
SvelteKit and the "Client pattern" by Julian Laubstein
To Watch
Shadow Page Endpoints In Svelte Kit - Weekly Svelte by LevelUpTuts
Testing For Beginners (Playlist) by Joy of Code
KitQL - The native SvelteKit library for GraphQL by Jean-Yves COUËT
Libraries, Tools & Components
gosvelte is a proof of concept to serve Svelte-generated pages on GoLang HTTP server with server data being sent as props to svelte components
svelte-ethers-store uses the ethers.js library as a collection of readable Svelte stores for Svelte, Sapper or SvelteKit
Fluid Grid is a CSS grid system for future web
stirstack is an opinionated framework that combines Svelte.js, TailwindCSS, InertiaJS and Ruby on Rails
OATHqr helps users create security credentials for use with 2FA/MFA and other OATH-enabled apps. Use it to generate scannable QR codes for one-time password authenticator apps such as Aegis or YubiKey
svelte-GridTiles is a drag and drop resizable tiles library built on a responsive grid
Miscellaneous Svelte Components is a collection of miscellaneous svelte components alex-knyaz often use in my projects
walk-and-graph-svelte-components is a CLI node script to walk svelte and js files, to draw a beautiful JPG of your dependencies aka "imports"
Felte is a simple to use form library for Svelte
svelte-use-tooltip is a Svelte action to display a tooltip
persistent-svelte-store is a generic persistent writable store, built from scratch in TypeScript according to the Svelte store contract
What'd we miss? Join us on Reddit or Discord to continue the conversation.
See y'all next month!
Event forwarding • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding REPL  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Function Slot Prop in Loop Bug • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Hello world • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Modal • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Dynamic attributes • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Reactive statements • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Timer • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Transition events • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Component directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Component directives   Edit this page on GitHub On this page   On this page  on:eventnamepermalinkon:eventname={handler}Components can emit events using createEventDispatcher or by forwarding DOM events.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<!-- programmatic dispatching -->
<button on:click={() => dispatch('hello')}> one </button>
<!-- declarative event forwarding -->
<button on:click> two </button>Listening for component events looks the same as listening for DOM events:
<SomeComponent on:whatever={handler} />As with DOM events, if the on: directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it.
<SomeComponent on:whatever />--style-propspermalink--style-props="anycssvalue"You can also pass styles as props to components for the purposes of theming, using CSS custom properties.
Svelte's implementation is essentially syntactic sugar for adding a wrapper element. This example:
<Slider bind:value min={0} --rail-color="black" --track-color="rgb(0, 0, 255)" />Desugars to this:
<div style="display: contents; --rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</div>Note: Since this is an extra <div>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
For SVG namespace, the example above desugars into using <g> instead:
<g style="--rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</g>Note: Since this is an extra <g>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
Svelte's CSS Variables support allows for easily themeable components:
<style>
.potato-slider-rail {
background-color: var(--rail-color, var(--theme-color, 'purple'));
}
</style>So you can set a high-level theme color:
/* global.css */
html {
--theme-color: black;
}Or override it at the consumer level:
<Slider --rail-color="goldenrod" />bind:propertypermalinkbind:property={variable}You can bind to component props using the same syntax as for elements.
<Keypad bind:value={pin} />While Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using bind:property allows changes to the property from within the component to flow back up out of the component.
bind:thispermalinkbind:this={component_instance}Components also support bind:this, allowing you to interact with component instances programmatically.
<ShoppingCart bind:this={cart} />
<button on:click={() => cart.empty()}> Empty shopping cart </button>
Note that we can't do {cart.empty} since cart is undefined when the button is first rendered and throws an error.
previous Element directives next Special elements
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Your apps • Svelte
Skip to main content  svelte.dev svelte      Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Please log in to see your saved apps.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Element directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Element directives   Edit this page on GitHub On this page   On this page  As well as attributes, elements can have directives, which control the element's behaviour in some way.
on:eventnamepermalinkon:eventname={handler}on:eventname|modifiers={handler}Use the on: directive to listen to DOM events.
App.svelte<script>
let count = 0;
/** @param {MouseEvent} event */
function handleClick(event) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>App.svelte<script lang="ts">
let count = 0;
function handleClick(event: MouseEvent) {
count += 1;
}
</script>
<button on:click={handleClick}>
count: {count}
</button>Handlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.
<button on:click={() => (count += 1)}>
count: {count}
</button>Add modifiers to DOM events with the | character.
<form on:submit|preventDefault={handleSubmit}>
<!-- the `submit` event's default is prevented,
so the page won't reload -->
</form>The following modifiers are available:
preventDefault — calls event.preventDefault() before running the handler
stopPropagation — calls event.stopPropagation(), preventing the event reaching the next element
stopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.
passive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)
nonpassive — explicitly set passive: false
capture — fires the handler during the capture phase instead of the bubbling phase
once — remove the handler after the first time it runs
self — only trigger handler if event.target is the element itself
trusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.
Modifiers can be chained together, e.g. on:click|once|capture={...}.
If the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.
<button on:click> The component itself will emit the click event </button>It's possible to have multiple event listeners for the same event:
<script>
let counter = 0;
function increment() {
counter = counter + 1;
}
/** @param {MouseEvent} event */
function track(event) {
trackEvent(event);
}
</script>
<button on:click={increment} on:click={track}>Click me!</button>bind:propertypermalinkbind:property={variable}Data ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.
The simplest bindings reflect the value of a property, such as input.value.
<input bind:value={name} />
<textarea bind:value={text} />
<input type="checkbox" bind:checked={yes} />If the name matches the value, you can use a shorthand.
<input bind:value />
<!-- equivalent to
<input bind:value={value} />
-->Numeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type="number"), the value is undefined.
<input type="number" bind:value={num} />
<input type="range" bind:value={num} />On <input> elements with type="file", you can use bind:files to get the FileList of selected files. It is readonly.
<label for="avatar">Upload a picture:</label>
<input accept="image/png, image/jpeg" bind:files id="avatar" name="avatar" type="file" />If you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.
<script>
let value = 'Hello World';
</script>
<input
on:input={() => console.log('Old value:', value)}
bind:value
on:input={() => console.log('New value:', value)}
/>Here we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.
Binding <select> valuepermalinkA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).
<select bind:value={selected}>
<option value={a}>a</option>
<option value={b}>b</option>
<option value={c}>c</option>
</select>A <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.
<select multiple bind:value={fillings}>
<option value="Rice">Rice</option>
<option value="Beans">Beans</option>
<option value="Cheese">Cheese</option>
<option value="Guac (extra)">Guac (extra)</option>
</select>When the value of an <option> matches its text content, the attribute can be omitted.
<select multiple bind:value={fillings}>
<option>Rice</option>
<option>Beans</option>
<option>Cheese</option>
<option>Guac (extra)</option>
</select>Elements with the contenteditable attribute support the following bindings:
innerHTML
innerText
textContent
There are slight differences between each of these, read more about them here.
<div contenteditable="true" bind:innerHTML={html} /><details> elements support binding to the open property.
<details bind:open={isOpen}>
<summary>Details</summary>
<p>Something small enough to escape casual notice.</p>
</details>Media element bindingspermalinkMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...
duration (readonly) — the total duration of the video, in seconds
buffered (readonly) — an array of {start, end} objects
played (readonly) — ditto
seekable (readonly) — ditto
seeking (readonly) — boolean
ended (readonly) — boolean
readyState (readonly) — number between (and including) 0 and 4
...and five two-way bindings:
currentTime — the current playback time in the video, in seconds
playbackRate — how fast or slow to play the video, where 1 is 'normal'
paused — this one should be self-explanatory
volume — a value between 0 and 1
muted — a boolean value indicating whether the player is muted
Videos additionally have readonly videoWidth and videoHeight bindings.
<video
src={clip}
bind:duration
bind:buffered
bind:played
bind:seekable
bind:seeking
bind:ended
bind:readyState
bind:currentTime
bind:playbackRate
bind:paused
bind:volume
bind:muted
bind:videoWidth
bind:videoHeight
/>Image element bindingspermalinkImage elements (<img>) have two readonly bindings:
naturalWidth (readonly) — the original width of the image, available after the image has loaded
naturalHeight (readonly) — the original height of the image, available after the image has loaded
<img
bind:naturalWidth
bind:naturalHeight
></img>Block-level element bindingspermalinkBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:
clientWidth
clientHeight
offsetWidth
offsetHeight
<div bind:offsetWidth={width} bind:offsetHeight={height}>
<Chart {width} {height} />
</div>bind:grouppermalinkbind:group={variable}Inputs that work together can use bind:group.
<script>
let tortilla = 'Plain';
/** @type {Array<string>} */
let fillings = [];
</script>
<!-- grouped radio inputs are mutually exclusive -->
<input type="radio" bind:group={tortilla} value="Plain" />
<input type="radio" bind:group={tortilla} value="Whole wheat" />
<input type="radio" bind:group={tortilla} value="Spinach" />
<!-- grouped checkbox inputs populate an array -->
<input type="checkbox" bind:group={fillings} value="Rice" />
<input type="checkbox" bind:group={fillings} value="Beans" />
<input type="checkbox" bind:group={fillings} value="Cheese" />
<input type="checkbox" bind:group={fillings} value="Guac (extra)" />
bind:group only works if the inputs are in the same Svelte component.
bind:thispermalinkbind:this={dom_node}To get a reference to a DOM node, use bind:this.
<script>
import { onMount } from 'svelte';
/** @type {HTMLCanvasElement} */
let canvasElement;
onMount(() => {
const ctx = canvasElement.getContext('2d');
drawStuff(ctx);
});
</script>
<canvas bind:this={canvasElement} />class:namepermalinkclass:name={value}class:nameA class: directive provides a shorter way of toggling a class on an element.
<!-- These are equivalent -->
<div class={isActive ? 'active' : ''}>...</div>
<div class:active={isActive}>...</div>
<!-- Shorthand, for when name and value match -->
<div class:active>...</div>
<!-- Multiple class toggles can be included -->
<div class:active class:inactive={!active} class:isAdmin>...</div>style:propertypermalinkstyle:property={value}style:property="value"style:propertyThe style: directive provides a shorthand for setting multiple styles on an element.
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
<!-- Variables can be used -->
<div style:color={myColor}>...</div>
<!-- Shorthand, for when property and variable name match -->
<div style:color>...</div>
<!-- Multiple styles can be included -->
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
<!-- Styles can be marked as important -->
<div style:color|important="red">...</div>When style: directives are combined with style attributes, the directives will take precedence:
<div style="color: blue;" style:color="red">This will be red</div>use:actionpermalinkuse:actionuse:action={parameters}tsaction = (node: HTMLElement, parameters: any) => {	update?: (parameters: any) => void,	destroy?: () => void}Actions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:
<script>
/** @type {import('svelte/action').Action}  */
function foo(node) {
// the node has been mounted in the DOM
return {
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo />An action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.
Don't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.
<script>
export let bar;
/** @type {import('svelte/action').Action}  */
function foo(node, bar) {
// the node has been mounted in the DOM
return {
update(bar) {
// the value of `bar` has changed
},
destroy() {
// the node has been removed from the DOM
}
};
}
</script>
<div use:foo={bar} />Read more in the svelte/action page.
transition:fnpermalinktransition:fntransition:fn={params}transition:fn|globaltransition:fn|global={params}transition:fn|localtransition:fn|local={params}tstransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}A transition is triggered by an element entering or leaving the DOM as a result of a state change.
When a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.
The transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.
{#if visible}
<div transition:fade>fades in and out</div>
{/if}Transitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.
{#if x}
{#if y}
<!-- Svelte 3: <p transition:fade|local> -->
<p transition:fade>fades in and out only when y changes</p>
<!-- Svelte 3: <p transition:fade> -->
<p transition:fade|global>fades in and out when x or y change</p>
{/if}
{/if}
By default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.
Transition parameterspermalinkLike actions, transitions can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#if visible}
<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}Custom transition functionspermalinkTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the transition begins, with different t and u arguments.
<script>
import { elasticOut } from 'svelte/easing';
/** @type {boolean} */
export let visible;
/**
* @param {HTMLElement} node
* @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
*/
function whoosh(node, params) {
const existingTransform = getComputedStyle(node).transform.replace('none', '');
return {
delay: params.delay || 0,
duration: params.duration || 400,
easing: params.easing || elasticOut,
css: (t, u) => `transform: ${existingTransform} scale(${t})`
};
}
</script>
{#if visible}
<div in:whoosh>whooshes in</div>
{/if}A custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
App.svelte<script>
export let visible = false;
/**
* @param {HTMLElement} node
* @param {{ speed?: number }} params
*/
function typewriter(node, { speed = 1 }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
}
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}App.svelte<script lang="ts">
export let visible = false;
function typewriter(node: HTMLElement, { speed = 1 }: { speed?: number }) {
const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;
if (!valid) {
throw new Error(`This transition only works on elements with a single text node child`);
}
const text = node.textContent;
const duration = text.length / (speed * 0.01);
return {
duration,
tick: (t) => {
const i = ~~(text.length * t);
node.textContent = text.slice(0, i);
},
};
}
</script>
{#if visible}
<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}If a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.
Transition functions also receive a third argument, options, which contains information about the transition.
Available values in the options object are:
direction - one of in, out, or both depending on the type of transition
Transition eventspermalinkAn element with transitions will dispatch the following events in addition to any standard DOM events:
introstart
introend
outrostart
outroend
{#if visible}
<p
transition:fly={{ y: 200, duration: 2000 }}
on:introstart={() => (status = 'intro started')}
on:outrostart={() => (status = 'outro started')}
on:introend={() => (status = 'intro ended')}
on:outroend={() => (status = 'outro ended')}
>
Flies in and out
</p>
{/if}in:fn/out:fnpermalinkin:fnin:fn={params}in:fn|globalin:fn|global={params}in:fn|localin:fn|local={params}out:fnout:fn={params}out:fn|globalout:fn|global={params}out:fn|localout:fn|local={params}Similar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.
Unlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.
{#if visible}
<div in:fly out:fade>flies in, fades out</div>
{/if}animate:fnpermalinkanimate:nameanimate:name={params}tsanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {	delay?: number,	duration?: number,	easing?: (t: number) => number,	css?: (t: number, u: number) => string,	tick?: (t: number, u: number) => void}tsDOMRect {	bottom: number,	height: number,	​​left: number,	right: number,	​top: number,	width: number,	x: number,	y: number}An animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.
Animations can be used with Svelte's built-in animation functions or custom animation functions.
<!-- When `list` is reordered the animation will run-->
{#each list as item, index (item)}
<li animate:flip>{item}</li>
{/each}Animation ParameterspermalinkAs with actions and transitions, animations can have parameters.
(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)
{#each list as item, index (item)}
<li animate:flip={{ delay: 500 }}>{item}</li>
{/each}Custom animation functionspermalinkAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.
If the returned object has a css method, Svelte will create a CSS animation that plays on the element.
The t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.
The function is called repeatedly before the animation begins, with different t and u arguments.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
css: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each}A custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.
If it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.
<script>
import { cubicOut } from 'svelte/easing';
/**
* @param {HTMLElement} node
* @param {{ from: DOMRect; to: DOMRect }} states
* @param {any} params
*/
function whizz(node, { from, to }, params) {
const dx = from.left - to.left;
const dy = from.top - to.top;
const d = Math.sqrt(dx * dx + dy * dy);
return {
delay: 0,
duration: Math.sqrt(d) * 120,
easing: cubicOut,
tick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })
};
}
</script>
{#each list as item, index (item)}
<div animate:whizz>{item}</div>
{/each} previous Special tags next Component directives
The class directive • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive REPL  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Circle Drawer • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer REPL   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Styling • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: September 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: September 2022 Migrating to SvelteKit's new filesystem-based router  Dani Sandoval Sep 1 2022 On this page   On this page  Still looking for something to do this month? It's your last chance to get tickets to Svelte Summit, Stockholm! Join us on Sept 8-9th 🎉
With the redesign of SvelteKit's filesystem-based router merging early last month, there's lots to cover this month - from the migration script to a number of new blog posts, videos and tutorials.
But the new routing isn't the only new feature in SvelteKit...
What's new in SvelteKitpermalink
Link is now supported as an HTTP header and works out of the box with Cloudflare's Automatic Early Hints (1.0.0-next.405, PR)
$env/static/* are now virtual to prevent writing sensitive values to disk (1.0.0-next.413, PR)
$app/stores can now be used from anywhere on the browser (1.0.0-next.428, PR)
config.kit.env.dir is a new config that sets the directory to search for .env files (1.0.0-next.430, PR)
Breaking changes:
The filesystem-based router and load API improves the way routes are managed. Before installing version @sveltejs/kit@1.0.0-next.406 or later, follow this migration guide (PR, Issue)
event.session has been removed from load along with the session store and getSession. Use event.locals instead (1.0.0-next.415, PR)
Named layouts have been removed in favor of (groups) (1.0.0-next.432, Docs, PR & Migration Instructions)
event.clientAddress is now event.getClientAddress() (1.0.0-next.438, PR)
$app/env has been renamed to $app/environment, to disambiguate with $env/... (1.0.0-next.445, PR)
For a full list of changes, check out kit's CHANGELOG.
Updates to language tools
TypeScript doesn't resolve imports to SvelteKit's $types very well, the latest version of Svelte's language tools makes it better (105.21.0, #1592)
Community ShowcasepermalinkApps & Sites built with Svelte
canno is a simple interactive 3d physics game with adjustable gravity, cannon power, and debug visualizer - made with threlte
straw.page is an extremely simple website builder that lets you create unique websites straight from your phone
Patra lets you share short notes just with a link. No database. No storage
promptoMANIA is an AI art community with an online prompt builder
Album by Mood lets you listen to music based on your mood
Daily Sumeiro is a daily game to test your math and logic skills
Lofi and Games - play relaxing, casual games right from your browser
Pitch Pipe is a digital pitch pipe with a frequency analyser and just-intonation intervals
classes.wtf is a custom, distributed search engine written in Go and Svelte to make searching for Harvard courses much quicker than the standard course catalog
Scrumpack is a set of tools to help agile/scrum teams with their ceremonies like Planning Poker and Retrospectives
Learning Resources
Starring the Svelte team
Supper Club × Rich Harris, Author of Svelte — Syntax Podcast 499
Let's talk routing with Rich Harris on Svelte Radio
2.17 - Building the Future of Svelte at Vercel with Rich Harris
1.15 - What's Up With SvelteKit with Shawn Wang (swyx)
Adding Notion Tailwindcss and DaisyUI to Svelte App
Svelte 101 Session
Astro and Svelte
Storyblok in Svelte
Svelte London August Recording
Learning the new SvelteKit routing
Migrating Breaking Changes in SvelteKit by Brittney Postma (Netlify)
Major Svelte Kit API Change - Fixing load, and tightening up SvelteKit's design before 1.0 - Video by LevelUpTuts
SvelteKit Is Never Going To Be The Same - Video by Joy of Code
Let's learn SvelteKit by building a static Markdown blog from scratch by Josh Collinsworth (updated Aug 26th to keep up with the new changes)
To Watch
Svelte Guide For React Developers and Svelte State Management Guide by Joy of Code
What Is Bookit? The Svelte Kit Storybook Killer and What Is @type{import In Svelte Kit - JSDoc Syntax by LevelUpTuts
TWF Yet another JS Framework... or not? Svelte! by TWF meetup
To Read
Creating a Figma Plugin with Svelte by Lennart
Svelte Video Blog: Vlog with Mux from your own SvelteKit Site and Svelte Shy Header: Peekaboo Sticky Header with CSS by Rodney Lab
Libraries, Tools & Components
@svelte-plugins/tooltips is a simple tooltip action and component designed for Svelte
Lucia is a simple authentication library for SvelteKit that connects your SvelteKit app to your database
remix-router-svelte is a Svelte implementation of the react-router-dom API (driven by @remix-run/router)
MKRT is a CLI to help you create SvelteKit routes, fast
Histoire is a tool to generate stories applications - scenarios where you showcase components for specific use cases
sveltekit-flash-message is a Sveltekit library that passes temporary data to the next request, usually from endpoints
svelte-particles is a lightweight TypeScript library for creating particles
svelte-claps adds clap button (like Medium) to any page for your SvelteKit apps
Neon Flicker is a Svelte component to make your text flicker in a cyberpunk style
ComboBox is a search input to help users select from a large list of items
@svelte-put is useful svelte stuff to put in your projects
vite-plugin-svelte-bridge lets you write Svelte components and use them from React & Vue
UI Kits and Starters
Svelte-spectre is a UI-kit based on spectre.css and powered by Svelte
Skeleton allows you to build fast and reactive web UI using the power of Svelte + Tailwind
iconsax-svelte brings the popular icon kit to Svelte
laravel-vite-svelte-spa-template is a Laravel 9, Vite, Svelte SPA, Tailwind CSS (w/ Forms Plugin & Aspect Ratio Plugin), Axios, & TypeScript starter template
neutralino-svelte-boilerplate-js is a cross platform desktop template for Neutralino and Svelte
figma-plugin-svelte-vite is a boilerplate for creating Figma plugins using Svelte, Vite and Typescript
Urara is a sweet & powerful SvelteKit blog starter
SvelteKit Commerce is an all-in-one starter kit for high-performance e-commerce sites built with SvelteKit by Vercel
Did we miss anything? Let us know on Reddit or Discord!
See ya next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Hacker News • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News REPL  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
The transition directive • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive REPL  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Timer • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer REPL  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Adding parameters • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
<svelte:element> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element> REPL  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Inline handlers • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers REPL  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Deferred transitions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions REPL   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
onMount • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: February 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: February 2021 Integrations and improvements at lightning speed...  Dani Sandoval Feb 1 2021 On this page   On this page  With the shortest month of the year coming up, Svelte maintainers and community members alike have been busy this last month – from big changes in svelte-loader, prettier-plugin-svelte, rollup-plugin-svelte, and language-tools to steady progress in Sapper and svelte-preprocess. Meanwhile, lots of folks have been busy integrating Svelte with other popular frameworks.
New compiler featurespermalink
Aria roles from the WAI-ARIA Graphics Module are now recognized as valid aria roles in Svelte components (3.31.1)
Compiler warnings for the common React attributes, className and htmlFor, now make it easier to port React components to Svelte (3.31.1)
Have a suggestion for a compiler feature or want to help implement new features/bug fixes? Check out the "triage: good first issue" tag for Svelte
New bits in language-toolspermalink
User disabled auto import suggestions no longer show in VS Code (103.0.0)
Renaming a variable is now safer with smart additions of a prefix/suffix to renamed variables (104.0.0)
Semantic (token) highlighting for TypeScript users lets theme makers apply semantic styling in their themes, if they support it (104.0.0)
"Extract Component" has been added to the context menu - allowing you to extract components out of files without having to open the command window to type "Svelte: Extract Component" (104.0.0)
The VS Code extension now listens to JavaScript/TypeScript file changes - you no longer need to save the files for the changes to be noticed (104.1.0)
For the complete list of changes, check out the language-tools Releases page.
A great way to try the language tools is to download the Svelte Extension for VSCode. This extension provides syntax highlighting and rich intellisense for Svelte components in VS Code, using the svelte language server. Check your editor's extension sources to see if there's a Svelte plugin for your IDE or build your own (see coc-svelte for example)!
Big improvements across the Svelte ecosystempermalink
svelte-loader released a major version, 3.0.0 - featuring Webpack 5 and Node 14 support, better hot reloading, and new compilerOptions to match rollup-plugin-svelte. Breaking changes include dropping Svelte 2 and Node 8 support. More info in the changelog
rollup-plugin-svelte is now at version 7.x - with support for relative filenames, better handling of sourcemaps, and consistent compilerOptions. Be sure to checkout the changelog for breaking changes when upgrading
svelte-preprocess iterated through some 4.6.x releases this month to improve postcss and scss handling and fix sourcemap transformation for typescript users. More info in the changelog
Sapper got some improvements in scroll tracking and handling encoding query parameters. Dynamic imports also now work as expected in browsers that don't support ES modules. These changes from 0.29.0 and a step-by-step migration guide can be found in the changelog
prettier-plugin-svelte version 2 was released. It received an overhaul and comes with a rewrite of the HTML formatting. The output is now much more in line with how standard Prettier formats HTML. Better defaults for svelteBracketNewLine and options-scripts-markup-styles should now match how the majority of users like to order the code blocks. Additionally, Prettier's htmlWhitespaceSensitivity setting is now supported. More info in the changelog
New changes to the Svelte Society website include a new cheat sheet for easy access to useful code patterns and some smaller visual fixes across the site. Want to help make the Svelte Society website ready for prime time? Checkout the GitHub repo to get started!
Community ShowcasepermalinkApps & Sites
The official German vaccination dashboard tracks the current COVID vaccine rollout and features some well-done dataviz.
La neuva era de la educatión conectada is a Vodaphone site that highlights the ways that technology and COVID-19 has changed the education landscape
sho.rest is a self-hostable url shortener
night.fm is a cyberpunk-themed radio station
Demos, Libraries & Components
Svelte Reactive Debugger is a way to monitor Svelte reactive statements in Firefox devtools
svelte-actions is a set of prototype Svelte actions for inclusion into official actions in future. See RFC and Discuss High Level Policy.
This css grid gallery made by @joja (in the Svelte Discord) features grid transitions based on a user's mouse position
Patchcab is a modular Eurorack style synthesizer made with Web Audio.
svelte-knob is a knob control to help with speedometer-style visualization
descent-ripple is a highly customizable javascript ripple animation for buttons
makeItSnow is a Svelte action made by @MrPoule (in the Svelte Discord) that can be used to add ❄️snow❄️ to any component (Demo)
svelte-video-player is a customizable VideoPlayer component
svelte-readonly is a very small store that exposes only a readable interface.
New Integrations & Starters
svelte-derver-starter is a starter for baking fullstack application with the client based on Svelte and server side powered by Derver.
eleventy-plugin-embed-svelte makes it easy to embed Svelte components into an 11ty site.
svelte-tailwind-extension-boilerplate is a good foundation for a Chrome extension using either JavaScript or TypeScript, Svelte for the frontend, Tailwind CSS for styling, Jest for testing, and Rollup as the build system.
snowpack-ui lets you run & manage Snowpack projects from the browser instead of the terminal
Svelte for Appwrite explains how to integrate with Appwrite, a self-hosted Firebase alternative GitHub Repo
here-maps-svelte makes it easy to include HERE maps in a Svelte app
p5-svelte is an absolutely dead simple way of tossing the creative coding/sketching tool, p5, into a project
svelte-windicss-preprocess is a Svelte preprocessor to compile tailwindcss at build time based on windicss compiler
MitzaCoder/svelte-boilerplate features configurations for TypeScript, TailwindCSS, IE11 compatibility (with Babel) and lazy loaded modules.
Want to share your Svelte Component with the world? Head over to the Components page on the Svelte Society site. You can contribute by making a PR to this file.
Learning Resources
lihautan's Svelte Actions Playlist teaches how actions work and how they can help solve common problems when developing Svelte applications
One-click Portfolio/Personal blog generator from dev.to API  walks through creating a Sapper site that also fetches your articles from DEV.to using the API
How to Code a VSCode Extension features Svelte as a way to render a custom UI within VSCode
This YouTube series on Plenti walks through the new static site generator in detail
See you next month!permalinkWant to add your work to the Showcase? Want to contribute to Svelte? Check out the Svelte Society, Reddit and Discord to get involved!
<svelte:self> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self> REPL  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Named slots • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots REPL  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Scatterplot • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot REPL  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Slot fallbacks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Frequently asked questions • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Misc Frequently asked questions   Edit this page on GitHub On this page   On this page  I'm new to Svelte. Where should I start?permalinkWe think the best way to get started is playing through the interactive tutorial. Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.
Five to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.
Where can I get support?permalinkIf your question is about certain syntax, the API page is a good place to start.
Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the existing questions tagged with Svelte or ask your own!
There are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. Our Discord or the Reddit channel are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.
Are there any third-party resources?permalinkSvelte Society maintains a list of books and videos.
How can I get VS Code to syntax-highlight my .svelte files?permalinkThere is an official VS Code extension for Svelte.
Is there a tool to automatically format my .svelte files?permalinkYou can use prettier with the prettier-plugin-svelte plugin.
How do I document my components?permalinkIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.
<script>
/** What should we call the user? */
export let name = 'world';
</script>
<!--
@component
Here's some documentation for this component.
It will show up on hover.
- You can use markdown here.
- You can also use code blocks here.
- Usage:
```tsx
<main name="Arethra">
```
-->
<main>
<h1>
Hello, {name}
</h1>
</main>Note: The @component is necessary in the HTML comment which describes your component.
Does Svelte scale?permalinkThere will be a blog post about this eventually, but in the meantime, check out this issue.
Is there a UI component library?permalinkThere are several UI component libraries as well as standalone components. Find them under the design systems section of the components page on the Svelte Society website.
How do I test Svelte apps?permalinkHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.
A Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).
Unit Tests: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup Vitest for unit testing. There are a number of other test runners that could be used as well.
Component Tests: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like Vitest to solutions that leverage an actual browser to provide a visual testing capability such as Playwright or Cypress.
End-to-End Tests: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup Playwright for end-to-end testing. There are many other E2E test libraries available for use as well.
Some resources for getting started with testing:
Svelte Testing Library
Svelte Component Testing in Cypress
Example using vitest
Example using uvu test runner with JSDOM
Test Svelte components using Vitest & Playwright
Component testing with WebdriverIO
Is there a router?permalinkThe official routing library is SvelteKit. SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React.
However, you can use any router library. A lot of people use page.js. There's also navaid, which is very similar. And universal-router, which is isomorphic with child routes, but without built-in history support.
If you prefer a declarative HTML approach, there's the isomorphic svelte-routing library and a fork of it called svelte-navigator containing some additional functionality.
If you need hash-based routing on the client side, check out svelte-spa-router or abstract-state-router.
Routify is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.
You can see a community-maintained list of routers on sveltesociety.dev.
Can I tell Svelte not to remove my unused styles?permalinkNo. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise.
Svelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it:
If it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or {@html ...}.
If it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page.
If you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using :global(...). But also keep in mind that you can wrap :global(...) around only part of a selector. .foo :global(.bar) { ... } will style any .bar elements that appear within the component's .foo elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want.
Is Svelte v2 still available?permalinkNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.
The documentation is still available here.
How do I do hot module reloading?permalinkWe recommend using SvelteKit, which supports HMR out of the box and is built on top of Vite and svelte-hmr. There are also community plugins for rollup and webpack.
previous Custom elements API next Accessibility warnings
What's new in Svelte: December 2021
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: December 2021 Svelte Summit Fall 2021 Recap, Rich Harris joins Vercel, and Kevin goes full-time on Svelte Society  Dani Sandoval Dec 1 2021 On this page   On this page  With SvelteKit getting more and more stable each day, there's not much to cover in terms of code changes other than bug fixes... So, in this month's newsletter, we'll be covering Svelte Summit Fall 2021!
If you want to dive deep into the last month's worth of bug fixes, check out the Svelte and SvelteKit changelogs, respectively.
What happened at Svelte Summit?permalinkIf you missed Svelte Summit, you can watch the entire live stream on YouTube and catch a recap in the #svelte-summit channel on Discord.
Here are the highlights:
Rich Harris took us through a tour of Svelte's history and announced his move to Vercel - where he will be helping maintain Svelte full-time! (20:00)
Steph Dietz explained how Svelte's simple abstractions makes it easy for beginners and experts alike to learn and use JavaScript - without the boilerplate (29:00)
Kevin Bridges dove deep into Svelte's reactivity logic by visualizing it through ReflectiveCounter and showing how to "fine tune" it, as needed. A full "syllabus" for the presentation is available on Kevin's site. (42:55)
Mateo Morris launched Primo, an all-in-one SvelteKit CMS to help build and manage static sites (1:12:34)
Guillermo Rauch explained Vercel's commitment to Svelte, what it means to have Rich on the team, and what's coming next from the company... (1:21:54)
Geoff Rich introduced various ways to modify motion and transitions within Svelte to be more accessible to all users of the web. Slides and a full transcription of the talk are available on Geoff's site. (1:32:30)
Dean Fogarty demoed a number of different use-cases for custom stores - transforming data to and from storage mechanisms within Svelte. Transcript and code is available on Dean's GitHub. (1:43:06)
Kellen Mace shared how we can let content creators keep using WordPress, while leveraging Svelte on the frontend to provide a phenomenal user experience (1:49:30)
Ben Holmes explained the "islands" architecture and how 11ty + Slinkity can bring these islands to any HTML template (2:17:15)
Scott Tolinski shared the lessons learned from rewriting the React-based LevelUpTutorials in Svelte and "found developer bliss" (3:16:35)
Svelte Sirens was announced as the new Svelte community for women, non-binary and allies. Their first event was on November 29th - all future events can be found on the Svelte Sirens website (3:50:45)
Rich Harris discussed creating libraries with SvelteKit, better ways to link packages when developing, and how SvelteKit helps with modern JavaScript library development (3:56:00)
Ken Kunz explained how finite state machines (and the svelte-fsm library) can make managing Svelte component states more... manageable. Examples from the talk are available on Ken's GitHub. (4:07:18)
Austin Crim connected learning to code on the web to learning how to play an instrument. By giving learners early wins and introducing the fundamentals through real-world apps, learning Svelte (and the fundamentals underneath) doesn't have to be a chore (4:21:50)
Jesse Skinner brought our legacy apps into the future by explaining how to use (and reuse) Svelte components within React (and even jQuery!) projects (4:32:30)
Jim Fisk and Stephanie Luz introduced Plenti and its theming tools to make building new Svelte sites much faster (4:59:00)
Evyatar Alush helped us all make (and maintain) better forms using a powerful validation library called Vest (5:08:55)
Dominik G. presented a fresh take on icon libraries - one that reduces the bundle size of applications and opens up the entire iconify library for use in any Svelte app (5:30:04)
Thanks to Kevin and all the Svelte Society volunteers for pulling together such an amazing event! Excitingly, Kevin announced after the event that he will now be working full-time on Svelte Society! You can check out all the talks, broken up into individual videos for convenience, in this Svelte Society YouTube Playlist.
If you have feedback on the Svelte Summit, Kev is looking for feedback on the Svelte subreddit 👀
Community ShowcasepermalinkApps & Sites
pixeldrain is a free-to-use file sharing platform
LifeHash generates beautiful visual hashes from Blockchain Commons
simple-cloud-music is a lightweight third-party NetEase cloud music player for modern browsers (likely only works on Chrome)
palette.rocks is a color palette generator with contrast-checking built-in
Kadium is an app for staying on top of YouTube channel uploads
Multi-Monitor Calculator is a tool for planning your multi-monitor setup
Your Home is an interactive overview of Facebook's privacy settings
Svelte Crush is a Candy Crush style match-3 game
100.000 Corona deaths in Germany is a visualization made for Spiegel Gesundheit
Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better? Check out the list of open issues if you'd like to contribute to the Svelte Society rewrite in SvelteKit.
Videos, Blogs and Podcasts
How To Make and Publish a Svelte Library
SvelteKit is now fully supported in WebContainers
Introducing Svelte, and Comparing Svelte with React and Vue
Testing a Svelte app with Jest
How to create a toast notification library package with SvelteKit
Svelte training: Here you can learn Svelte
Introduction to Svelte Actions
Enjoy making DAPPs using SvelteWeb3
Svelte creator: Web development should be more fun
Svelte Radio: Rich Harris is now working full-time on Svelte 🤯
Web Rush: Svelte and Elder.js with Nick Reese
Building SvelteKit applications with Serverless Redis
Libraries, Tools & Components
svelte-cubed is a Three.js component library for Svelte - created by Rich Harris for his presentation at Svelte Summit Fall 2021
svelte-fsm is a tiny, simple, expressive, pragmatic Finite State Machine (FSM) library, optimized for Svelte
bromb is a feedback widget for websites/web apps that is small and easy to integration/self-host
Spaper is a set of PaperCSS components for Svelte
svelte-intl-precompile is an i18n library for Svelte that analyzes and compiles your translations at build time
svelte-preprocess-svg automatically optimizes inline svg in Svelte components for better performance and reduced file size
svelte-subcomponent-preprocessor allows you to write more than one component within a svelte file
svelte-pdfjs is a crude implementation of a Svelte PDF viewer component
svelte-inview is a Svelte action that monitors an element enters or leaves the viewport/parent element
sveltekit-adapter-wordpress-shortcode is an adapter for SvelteKit which turns your app into a wordpress shortcode
svelte-websocket-store is a Svelte store with a websocket backend
Svelte Auto Form is a fast and fun form library focused on ease of use, rather than flexibility.
set-focus is an Svelte action that will set focus on <a> or <button> elements as soon as they mount - useful for some experiences and testing
Got an idea for SvelteKit? Check out the new GitHub Discussions in the Svelte repo. You can also join us on Reddit or Discord.
See you next month year!
Declaring props • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props REPL  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Custom CSS transitions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Svelte Zoomable Flex Layouts • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's the deal with SvelteKit?
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's the deal with SvelteKit? We're rethinking how to build Svelte apps. Here's what you need to know  Rich Harris Nov 5 2020 On this page   On this page  If you didn't attend Svelte Summit, you can catch up on the Svelte Society YouTube page
If you attended Svelte Summit last month you may have seen my talk, Futuristic Web Development, in which I finally tackled one of the most frequently asked questions about Svelte: when will Sapper reach version 1.0?
The answer: never.
This was slightly tongue-in-cheek — as the talk explains, it's really more of a rewrite of Sapper coupled with a rebrand — but it raised a lot of new questions from the community, and it's time we offered a bit more clarity on what you can expect from Sapper's successor, SvelteKit.
'Futuristic Web Development' from Svelte Summit
What's Sapper?permalinkSapper is an app framework (or 'metaframework') built on top of Svelte (which is a component framework). Its job is to make it easy to build Svelte apps with all the modern best practices like server-side rendering (SSR) and code-splitting, and to provide a project structure that makes development productive and fun. It uses filesystem-based routing (as popularised by Next and adopted by many other frameworks, albeit with some enhancements) — your project's file structure mirrors the structure of the app itself.
While the Svelte homepage and documentation encourages you to degit the sveltejs/template repo to start building an app, Sapper has long been our recommended way to build apps; this very blog post is (at the time of writing!) rendered with Sapper.
Why are we migrating to something new?permalinkFirstly, the distinction between sveltejs/template and sveltejs/sapper-template is confusing, particularly to newcomers to Svelte. Having a single recommended way to start building apps with Svelte will bring enormous benefits: we simplify onboarding, reduce the maintenance and support burden, and can potentially begin to explore the new possibilities that are unlocked by having a predictable project structure. (This last part is deliberately vague because it will take time to fully understand what those possibilities are.)
Aside from all that, we've been tempted by the thought of rewriting Sapper for a while. This is partly because the codebase has become a little unkempt over the years (Sapper started in 2017), but mostly because the web has changed a lot recently, and it's time to rethink some of our foundational assumptions.
How is this new thing different?permalinkThe first of those foundational assumptions is that you need to use a module bundler like webpack or Rollup to build apps. These tools trace the dependency graph of your application, analysing and transforming code along the way (turning Svelte components to JS modules, for example), in order to create bundles of code that can run anywhere. As the original creator of Rollup, I can attest that it is a surprisingly complex problem with fiendish edge cases.
You certainly needed a bundler several years ago, because browsers didn't natively support the import keyword, but it's much less true today. Right now, we're seeing the rise of the unbundled development workflow, which is radically simpler: instead of eagerly bundling your app, a dev server can serve modules (converted to JavaScript, if necessary) on-demand, meaning startup is essentially instantaneous however large your app becomes.
Snowpack is at the vanguard of this movement, and it's what powers SvelteKit. It's astonishingly fast, and has a beautiful development experience (hot module reloading, error overlays and so on), and we've been working closely with the Snowpack team on features like SSR. The hot module reloading is particularly revelatory if you're used to using Sapper with Rollup (which has never had first-class HMR support owing to its architecture, which prioritises the most efficient output).
That's not to say we're abandoning bundlers altogether. It's still essential to optimise your app for production, and SvelteKit uses Rollup to make your apps as fast and lean as they possibly can be (which includes things like extracting styles into static .css files).
The other foundational assumption is that a server-rendered app needs, well, a server. Sapper effectively has two modes — sapper build, which creates a standalone app that has to run on a Node server, and sapper export which bakes your app out as a collection of static files suitable for hosting on services like GitHub Pages.
Static files can go pretty much anywhere, but running a Node server (and monitoring/scaling it etc) is less straightforward. Nowadays we're witnessing a shift towards serverless platforms, in which you as the app author don't need to think about the server your code is running on, with all the attendant complexity. You can get Sapper apps running on serverless platforms, thanks to things like vercel-sapper, but it's certainly not what you'd call idiomatic.
It'll still be possible to create both Node apps and fully pre-rendered (aka exported) sites
SvelteKit fully embraces the serverless paradigm, and will launch with support for all the major serverless providers, with an 'adapter' API for targeting any platforms that we don't officially cater to. In addition, we'll be able to do partial pre-rendering, which means that static pages can be generated at build time but dynamic ones get rendered on-demand.
When can I start using it?permalinkIf you're feeling brave, you can start right now:
npm init svelte@nextThis will scaffold a new project and install the @sveltejs/kit CLI, which provides the tools for developing and building an app.
We don't recommend it though! There are no docs, and we won't be able to offer any form of support. It's also likely to break often.
The work is being done in a private monorepo while we're still in exploration mode. Our plan is to get a public beta ready and announce it here once we've closed a few issues — the repo itself will remain private at that time, but we'll create a place to collect feedback from the YOLO crowd. After that, we'll work towards a 1.0 release which will involve opening the repo up.
I'm not going to make any firm promises about timings, because I don't like to break promises. But I think we're talking about weeks rather than months.
What if I don't want to use SvelteKit?permalinkYou won't have to — it will always be possible to use Svelte as a standalone package or via a bundler integration like rollup-plugin-svelte. We think it's essential that you can bend Svelte to fit your workflow, however esoteric, and use third-party app frameworks like Elder.js, Routify, Plenti, Crown, JungleJS and others.
TypeScript?permalinkDon't worry, we won't launch without full TypeScript support.
How can I migrate my existing Sapper apps?permalinkFor the most part, it should be relatively straightforward to migrate a Sapper codebase.
There are some unavoidable changes (being able to run on serverless platforms means we need to replace custom server.js files and (req, res) => {...} functions with more portable equivalents), and we're taking the opportunity to fix a few design flaws, but on the whole a SvelteKit app will feel very familiar to Sapper users.
Detailed migration guides will accompany the 1.0 launch.
How can I contribute?permalinkKeep your eyes peeled for announcements about when we'll launch the public beta and open up the repo. (Also, blog post TODO but I would be remiss if I didn't mention that we now have an OpenCollective where you can contribute financially to the project if it's been valuable to you. Many, many thanks to those of you who already have.)
Where can I learn more?permalinkFollow @sveltejs and @SvelteSociety on Twitter, and visit svelte.dev/chat. You should also subscribe to Svelte Radio, where Kevin and his co-hosts will grill me about this project on an upcoming episode (and between now and next week when we record it, reply to this Twitter thread with your additional questions).
onMount • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount REPL  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
<svelte:body> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body> REPL  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Introduction / Basics • Svelte Tutorial
Skip to main content  svelte.dev svelte  ｜ Tutorial     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme               Introduction / Basics a. Basicsb. Adding datac. Dynamic attributesd. Stylinge. Nested componentsf. Making an appa. Assignmentsb. Declarationsc. Statementsd. Updating arrays and objectsa. Declaring propsb. Default valuesc. Spread propsa. If blocksb. Else blocksc. Else-if blocksd. Each blockse. Keyed each blocksf. Await blocksa. DOM eventsb. Inline handlersc. Event modifiersd. Component eventse. Event forwardingf. DOM event forwardinga. Text inputsb. Numeric inputsc. Checkbox inputsd. Group inputse. Textarea inputsf. Select bindingsg. Select multipleh. Contenteditable bindingsi. Each block bindingsj. Media elementsk. Dimensionsl. Thism. Component bindingsn. Binding to component instancesa. onMountb. onDestroyc. beforeUpdate and afterUpdated. ticka. Writable storesb. Auto-subscriptionsc. Readable storesd. Derived storese. Custom storesf. Store bindingsa. Tweenedb. Springa. The transition directiveb. Adding parametersc. In and outd. Custom CSS transitionse. Custom JS transitionsf. Transition eventsg. Global transitionsh. Deferred transitionsi. Key blocksa. The animate directivea. The use directiveb. Adding parametersa. The class directiveb. Shorthand class directivec. Inline stylesd. The style directivea. Slotsb. Slot fallbacksc. Named slotsd. Checking for slot contente. Slot propsa. setContext and getContexta. <svelte:self>b. <svelte:component>c. <svelte:element>d. <svelte:window>e. <svelte:window> bindingsf. <svelte:document>g. <svelte:body>h. <svelte:head>i. <svelte:options>j. <svelte:fragment>a. Sharing codeb. Exportsa. The @debug tagb. HTML tagsa. Congratulations!    Welcome to the Svelte tutorial. This will teach you everything you need to know to build fast, small web applications easily.
You can also consult the API docs and the examples, or — if you're impatient to start hacking on your machine locally — the 60-second quickstart.
What is Svelte?permalinkSvelte is a tool for building fast web applications.
It is similar to JavaScript frameworks such as React and Vue, which share a goal of making it easy to build slick interactive user interfaces.
But there's a crucial difference: Svelte converts your app into ideal JavaScript at build time, rather than interpreting your application code at run time. This means you don't pay the performance cost of the framework's abstractions, and you don't incur a penalty when your app first loads.
You can build your entire app with Svelte, or you can add it incrementally to an existing codebase. You can also ship components as standalone packages that work anywhere, without the overhead of a dependency on a conventional framework.
How to use this tutorialpermalinkYou'll need to have basic familiarity with HTML, CSS and JavaScript to understand Svelte.
As you progress through the tutorial, you'll be presented with mini exercises designed to illustrate new features. Later chapters build on the knowledge gained in earlier ones, so it's recommended that you go from start to finish. If necessary, you can navigate via the dropdown above (click 'Introduction / Basics').
Each tutorial chapter will have a 'Show me' button that you can click if you get stuck following the instructions. Try not to rely on it too much; you will learn faster by figuring out where to put each suggested code block and manually typing it into the editor.
Understanding componentspermalinkIn Svelte, an application is composed from one or more components. A component is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written into a .svelte file. The 'hello world' example in the code editor is a simple component.
Edit this chapter
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:self> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Else-if blocks • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Conditional Slots • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots REPL  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
What's new in Svelte: November 2020
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: November 2020 Slot forwarding fixes, SvelteKit for faster local development, and more from Svelte Summit  Dani Sandoval Nov 1 2020 On this page   On this page  Welcome back to the "What's new in Svelte" series! This month, we're covering new features & bug fixes, last month's Svelte Summit and some stand-out sites and libraries...
New features & impactful bug fixespermalink
Destructuring Promises now works as expected by using the {#await} syntax
(3.29.3, Example)
Slot forwarding (released in 3.29.0) should no longer hang during compilation (3.29.3, Example)
Better typings for the get function in svelte/store and on lifecycle hooks (3.29.1)
What's going on in Sapper?
Sapper got some new types in its preload function, which will make typing easier if you are using TypeScript. See the Sapper docs on how to use them. There also were fixes to preload links in exported sites. Route layouts got a few fixes too - including ensuring CSS is applied to nested route layouts. You can also better organize your files now that extensions with multiple dots are supported. (0.28.10)
For all the features and bugfixes see the CHANGELOGs for Svelte and Sapper.
Svelte Summit was Svelte-tacular!permalink
Rich Harris demoed the possible future of Svelte development in a talk titled "Futuristic Web Development". The not-yet-public project is called SvelteKit (name may change) and will bring a first-class developer experience and more flexibility for build outputs. If you want to get the full sneak-peek, check out the video.
17 speakers made the best of the conference's virtual format... From floating heads to seamless demos, Svelte developers from every skill level will find something of interest in this year's YouTube playlist
Community Showcasepermalink
Svelte Lab showcases a variety of components, visualizations and interactions that can be achieved in Svelte. You can click into any component to see its source or edit it, using the site's built-in REPL
svelte-electron-boilerplate is a fast way to get up and running with a Svelte app built in the desktop javascript framework, Electron
React Hooks in Svelte showcases examples of common React Hooks ported to Svelte.
gurlic is a social network and internet experiment that is super snappy thanks to Svelte
Interference 2020 visualizes reported foreign interference in the 2020 U.S. elections. You can learn more about how it was built in YYY's talk at Svelte Summit
jitsi-svelte lets you easily create your own custom Jitsi client by providing out-of-the-box components built with Svelte
Ellx is part spreadsheet, part notebook and part IDE. It's super smooth thanks to Svelte 😎
This New Zealand news site breaks down the results of the 2020 Parliamentary elections using Svelte
Budibase is a no-code app builder, powered by Svelte
Svelt-yjs combines the collaborative, local-first technology of Yjs with the power of Svelte to enable multiple users across the internet to stay in sync.
tabler-icons-svelte is a Svelte wrapper for over 850 free MIT-licensed high-quality SVG icons for you to use in your web projects.
See you next month!permalinkGot an idea for something to add to the Showcase? Want to get involved more with Svelte? We're always looking for maintainers, contributors and fanatics... Check out the Svelte Society, Reddit and Discord to get involved!
Support use:obj.method as actions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Component directives • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Component directives   Edit this page on GitHub On this page   On this page  on:eventnamepermalinkon:eventname={handler}Components can emit events using createEventDispatcher or by forwarding DOM events.
<script>
import { createEventDispatcher } from 'svelte';
const dispatch = createEventDispatcher();
</script>
<!-- programmatic dispatching -->
<button on:click={() => dispatch('hello')}> one </button>
<!-- declarative event forwarding -->
<button on:click> two </button>Listening for component events looks the same as listening for DOM events:
<SomeComponent on:whatever={handler} />As with DOM events, if the on: directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it.
<SomeComponent on:whatever />--style-propspermalink--style-props="anycssvalue"You can also pass styles as props to components for the purposes of theming, using CSS custom properties.
Svelte's implementation is essentially syntactic sugar for adding a wrapper element. This example:
<Slider bind:value min={0} --rail-color="black" --track-color="rgb(0, 0, 255)" />Desugars to this:
<div style="display: contents; --rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</div>Note: Since this is an extra <div>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
For SVG namespace, the example above desugars into using <g> instead:
<g style="--rail-color: black; --track-color: rgb(0, 0, 255)">
<Slider bind:value min={0} max={100} />
</g>Note: Since this is an extra <g>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.
Svelte's CSS Variables support allows for easily themeable components:
<style>
.potato-slider-rail {
background-color: var(--rail-color, var(--theme-color, 'purple'));
}
</style>So you can set a high-level theme color:
/* global.css */
html {
--theme-color: black;
}Or override it at the consumer level:
<Slider --rail-color="goldenrod" />bind:propertypermalinkbind:property={variable}You can bind to component props using the same syntax as for elements.
<Keypad bind:value={pin} />While Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using bind:property allows changes to the property from within the component to flow back up out of the component.
bind:thispermalinkbind:this={component_instance}Components also support bind:this, allowing you to interact with component instances programmatically.
<ShoppingCart bind:this={cart} />
<button on:click={() => cart.empty()}> Empty shopping cart </button>
Note that we can't do {cart.empty} since cart is undefined when the button is first rendered and throws an error.
previous Element directives next Special elements
Combobox • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Named slots • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
What's new in Svelte: June 2022
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: June 2022 Cancellable dispatched events, deeper {@const} declarations and more!  Dani Sandoval Jun 1 2022 On this page   On this page  With last month's Svelte Summit behind us, we're ready to apply everything we learned in this new month of June! Also new this month are some quality-of-life changes to createEventDispatcher, @const declarations and tons of progress toward SvelteKit 1.0.
Let's dive in!
What's new in Sveltepermalink
Custom events can now be cancelled in the createEventDispatcher function (3.48.0, Docs, PR)
The {@const} tag can now be used in {#if} blocks to conditionally define variables (3.48.0, Docs, PR)
Lots of bug fixes across <svelte:element>, animations and various DOM elements. Check out the CHANGELOG for a deeper dive!
What's new in SvelteKitpermalink
Vite 2.9.9 was released as one of the last Vite 2 releases. The Svelte team has been hard at work contributing to the Vite 3 release to make the integration between SvelteKit and Vite smoother than ever (Vite 3.0 Milestone)
config.kit.alias lets you more easily declare a custom alias to replace values in import statements (Docs, PR)
Pages marked for prerendering will now fail during SSR at runtime (PR)
Breaking Changes
Node 14 is no longer supported (PR)
Requests to /favicon.ico will no longer be suppressed and will instead be handled as a valid route (PR)
AMP support has been moved to a separate @sveltejs/amp package (Docs, PR)
Generated types are now written to _types directories - update your imports accordingly (PR)
%svelte.head% and %svelte.body% are now %sveltekit.head% and %sveltekit.body% in app.html (Docs, PR)
LoadInput is now LoadEvent
Dropped support for Wrangler 1 in favor of Wrangler 2 (PR)
Community ShowcasepermalinkApps & Sites built with Svelte
Plantarium is a tool for the procedural generation of 3D plants.
SPATULA is a tool for building shading materials that are exportable as code material in any project that uses lamina and threejs
Waaard lets you create and send protected links with a variety of SSO providers
Magidoc is a fast and highly customizable GraphQL documentation generator
myMarkmap is a custom editor for Markmap, built with SvelteKit
PassShare is a way for you to share your passwords to your friends, securely and effortlessly
DashingOS is a tool (like Notion + CodeSandbox) to make it quick and easy to prototype and document your work all in one place
worker-kit-email helps you develop transactional emails quickly using regular SvelteKit routes
kaios-weather-svelte is a very familiar looking weather app for KaiOS
svelte-gantt is a lightweight and fast interactive gantt chart/resource booking component
Miru is a BitTorrent streaming software for cats
Looking for a great SvelteKit website to contribute to? Help build the Svelte Society site!
Learning Resources
To Read
Component party is a site that compares common patterns in different frameworks
Quick tip: style prop defaults by Geoff Rich
Working with reduced motion in Svelte by GHOST
Building a Musical Instrument with the Web Audio API by Tania Rascia
Svelte-Cubed: Creating an Accessible and Consistent Experience Across Devices and Svelte-Cubed: Loading Your glTF Models by Alex Warnes
To Watch
From Svelte Society:
The Svelte Summit Spring 2022 stream recording has been updated with chapter markers to make it easy to watch again and again
The full recording of Svelte London, April 2022 is up! Check out the amazing talks from across the Svelte London community
Persian Svelte Society is making Persian-language videos about Svelte
Svelte Sirens has been talking monthly to creators and contributors across the Svelte Community:
SvelteKit + Sanity.io: a match made in heaven on May 13
Slicing up your Svelte Sites with Prismic on May 20
Rendering your Svelte apps on Render on May 24
The story behind the (unofficial) Svelte newsletter on May 27
Across the Web:
Building vite-plugin-svelte-inspector, What is Singleton? and What is Navigation? by lihautan
Auto Import Components In Svelte Kit - Weekly Svelte by LevelUpTuts
🧪 Test SvelteKit with TDD & VITEST 🧪 by Johnny Magrippis
Google Analytics With SvelteKit, Using WebSockets With SvelteKit, SvelteKit Authentication Using Cookies and Svelte Headless UI Component Library by Joy of Code
Named Layouts In Nested Routes in SvelteKit by The Svelte Junction
SvelteKit Shiki Syntax Highlighting: Markdown Codeblocks and Svelte Capsize Styling: Typography Tooling by Rodney Lab
To Hear
Svelte Radio has been putting out weekly episodes:
The Adventures of Running a Svelte Meetup
The other Rich! Geoff! (feat. Geoff Rich)
Inspecting Svelte Code with Dominik G.
Stores Galore
Svelte and the Future of Frontend Development (feat. Rich Harris) from The New Stack
Libraries, Tools & Components
vite-plugin-svelte-console-remover is a Vite plugin that removes all console statements (log, group, dir, error, etc) from Svelte, JS, and TS files during build so they don't leak into production
Svelte Headless Tables is an unopinionated and extensible data tables for Svelte
y-presence is a lightweight set of libraries to easily add presence (live cursors/avatars) to any web application (now with Svelte support!)
Svelcro is a component performance tracker for Svelte applications
Svelte-Splitpanes lets you create dynamic and predictable view panels to layout an application
svelte-miniplayer is a lightweight, fast, resizable and draggable miniplayer for media
svelte-keybinds is a minimalistic keybinding interface, with rebinding and saving
svelte-speech-recognition converts speech from the microphone to text and makes it available to your Svelte components
Special Feature: Svelte Stores
There were lots of Svelte stores released this month from a number of authors...
svelte-mutable-store is a Svelte store for mutable values with the immutable compiler option
svelte-damped-store is a derived writable store that can suspend updates while svelte-lens-store is a functional lens over Svelte stores
svelte-persistent-store is a writable svelte store that saves and loads data from Window.localStorage or Window.sessionStorage.
Did we miss anything? Join us on Reddit or Discord to add your voice.
Don't forget that you can also join us in-person at the Svelte Summit in Stockholm! Come join us for two days of awesome Svelte content! Get your tickets now.
See y'all next month!
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:head> • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Select bindings • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings REPL  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
beforeUpdate and afterUpdate • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Basic markup • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Template Syntax Basic markup   Edit this page on GitHub On this page   On this page  TagspermalinkA lowercase tag, like <div>, denotes a regular HTML element. A capitalised tag, such as <Widget> or <Namespace.Widget>, indicates a component.
<script>
import Widget from './Widget.svelte';
</script>
<div>
<Widget />
</div>Attributes and propspermalinkBy default, attributes work exactly like their HTML counterparts.
<div class="foo">
<button disabled>can't touch this</button>
</div>As in HTML, values may be unquoted.
<input type=checkbox />Attribute values can contain JavaScript expressions.
<a href="page/{p}">page {p}</a>Or they can be JavaScript expressions.
<button disabled={!clickable}>...</button>Boolean attributes are included on the element if their value is truthy and excluded if it's falsy.
All other attributes are included unless their value is nullish (null or undefined).
<input required={false} placeholder="This input field is not required" />
<div title={null}>This div has no title attribute</div>An expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:
<button disabled="{number !== 42}">...</button>When the attribute name and value match (name={name}), they can be replaced with {name}.
<button {disabled}>...</button>
<!-- equivalent to
<button disabled={disabled}>...</button>
-->By convention, values passed to components are referred to as properties or props rather than attributes, which are a feature of the DOM.
As with elements, name={name} can be replaced with the {name} shorthand.
<Widget foo={bar} answer={42} text="hello" />Spread attributes allow many attributes or properties to be passed to an element or component at once.
An element or component can have multiple spread attributes, interspersed with regular ones.
<Widget {...things} />$$props references all props that are passed to a component, including ones that are not declared with export. Using $$props will not perform as well as references to a specific prop because changes to any prop will cause Svelte to recheck all usages of $$props. But it can be useful in some cases – for example, when you don't know at compile time what props might be passed to a component.
<Widget {...$$props} />$$restProps contains only the props which are not declared with export. It can be used to pass down other unknown attributes to an element in a component. It shares the same performance characteristics compared to specific property access as $$props.
<input {...$$restProps} />
The value attribute of an input element or its children option elements must not be set with spread attributes when using bind:group or bind:checked. Svelte needs to be able to see the element's value directly in the markup in these cases so that it can link it to the bound variable.
Sometimes, the attribute order matters as Svelte sets attributes sequentially in JavaScript. For example, <input type="range" min="0" max="1" value={0.5} step="0.1"/>, Svelte will attempt to set the value to 1 (rounding up from 0.5 as the step by default is 1), and then set the step to 0.1. To fix this, change it to <input type="range" min="0" max="1" step="0.1" value={0.5}/>.
Another example is <img src="..." loading="lazy" />. Svelte will set the img src before making the img element loading="lazy", which is probably too late. Change this to <img loading="lazy" src="..."> to make the image lazily loaded.
Text expressionspermalinkA JavaScript expression can be included as text by surrounding it with curly braces.
{expression}Curly braces can be included in a Svelte template by using their HTML entity strings: &lbrace;, &lcub;, or &#123; for { and &rbrace;, &rcub;, or &#125; for }.
If you're using a regular expression (RegExp) literal notation, you'll need to wrap it in parentheses.
<h1>Hello {name}!</h1>
<p>{a} + {b} = {a + b}.</p>
<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>CommentspermalinkYou can use HTML comments inside components.
<!-- this is a comment! --><h1>Hello world</h1>Comments beginning with svelte-ignore disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason.
<!-- svelte-ignore a11y-autofocus -->
<input bind:value={name} autofocus /> previous Svelte components next Logic blocks
Hello world • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world REPL  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Nested components • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components REPL  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Console Log Styler • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Component events • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
GitHub Tetris • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Svelte on The Changelog
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Svelte on The Changelog Listen to the interview here  Rich Harris Jan 31 2019 Earlier this month, I had the privilege of appearing on The Changelog, a podcast about software development. We had a fun (for me) and wide-ranging conversation:
life as a coder inside a newsroom
the big compilers-as-frameworks trend
scalability
the Great Divide
...and, most importantly, Svelte 3.
Unless you hang out in our Discord server or follow @sveltejs on Twitter, you might not know that Svelte 3 is just around the corner, and it's going to be a huge release. We've rethought the developer experience from the ground up, and while it will be a nuisance if you need to upgrade a Svelte 2 app (more on that soon) we think you're going to love it.
On the podcast Adam, Jerod and I talk about some of the changes and why we're making them. You can listen here or on the podcast page.
The Changelog 332: A UI framework without the framework – Listen on Changelog.com
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Temperature Converter • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
A more complex action • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Frequently asked questions • Docs • Svelte
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme          Getting Started Introduction  Template Syntax Svelte components Basic markup Logic blocks Special tags Element directives Component directives Special elements  Runtime svelte svelte/store svelte/motion svelte/transition svelte/animate svelte/easing svelte/action  Compiler and API svelte/compiler Client-side component API Server-side component API Custom elements API  Misc Frequently asked questions Accessibility warnings TypeScript Svelte 4 migration guide  Legacy svelte/register   JavaScript  TypeScript  Misc Frequently asked questions   Edit this page on GitHub On this page   On this page  I'm new to Svelte. Where should I start?permalinkWe think the best way to get started is playing through the interactive tutorial. Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.
Five to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.
Where can I get support?permalinkIf your question is about certain syntax, the API page is a good place to start.
Stack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the existing questions tagged with Svelte or ask your own!
There are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. Our Discord or the Reddit channel are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.
Are there any third-party resources?permalinkSvelte Society maintains a list of books and videos.
How can I get VS Code to syntax-highlight my .svelte files?permalinkThere is an official VS Code extension for Svelte.
Is there a tool to automatically format my .svelte files?permalinkYou can use prettier with the prettier-plugin-svelte plugin.
How do I document my components?permalinkIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.
<script>
/** What should we call the user? */
export let name = 'world';
</script>
<!--
@component
Here's some documentation for this component.
It will show up on hover.
- You can use markdown here.
- You can also use code blocks here.
- Usage:
```tsx
<main name="Arethra">
```
-->
<main>
<h1>
Hello, {name}
</h1>
</main>Note: The @component is necessary in the HTML comment which describes your component.
Does Svelte scale?permalinkThere will be a blog post about this eventually, but in the meantime, check out this issue.
Is there a UI component library?permalinkThere are several UI component libraries as well as standalone components. Find them under the design systems section of the components page on the Svelte Society website.
How do I test Svelte apps?permalinkHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.
A Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).
Unit Tests: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup Vitest for unit testing. There are a number of other test runners that could be used as well.
Component Tests: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like Vitest to solutions that leverage an actual browser to provide a visual testing capability such as Playwright or Cypress.
End-to-End Tests: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup Playwright for end-to-end testing. There are many other E2E test libraries available for use as well.
Some resources for getting started with testing:
Svelte Testing Library
Svelte Component Testing in Cypress
Example using vitest
Example using uvu test runner with JSDOM
Test Svelte components using Vitest & Playwright
Component testing with WebdriverIO
Is there a router?permalinkThe official routing library is SvelteKit. SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React.
However, you can use any router library. A lot of people use page.js. There's also navaid, which is very similar. And universal-router, which is isomorphic with child routes, but without built-in history support.
If you prefer a declarative HTML approach, there's the isomorphic svelte-routing library and a fork of it called svelte-navigator containing some additional functionality.
If you need hash-based routing on the client side, check out svelte-spa-router or abstract-state-router.
Routify is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.
You can see a community-maintained list of routers on sveltesociety.dev.
Can I tell Svelte not to remove my unused styles?permalinkNo. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise.
Svelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it:
If it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or {@html ...}.
If it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page.
If you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using :global(...). But also keep in mind that you can wrap :global(...) around only part of a selector. .foo :global(.bar) { ... } will style any .bar elements that appear within the component's .foo elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want.
Is Svelte v2 still available?permalinkNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.
The documentation is still available here.
How do I do hot module reloading?permalinkWe recommend using SvelteKit, which supports HMR out of the box and is built on top of Vite and svelte-hmr. There are also community plugins for rollup and webpack.
previous Custom elements API next Accessibility warnings
Analog SVG Clock: Exercises in Easing Fuctions • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Named exports • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports REPL   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Accelerating Svelte's Development
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Accelerating Svelte's Development Scaling the team, building partnerships, and growing the community  Ben McCann Jan 13 2022 On this page   On this page  Svelte is a frontend framework for building fast reactive web apps with less code. If you’re new here, check out the tutorial or examples to get a feel for it.
Svelte was launched 5 years ago and has come a long way in the time since. In 2021, as usage more than doubled, it was voted the most loved framework with the most satisfied developers in a pair of surveys. Alongside high-profile companies like The New York Times, Apple, Spotify, Square, Rakuten, Bloomberg, Reuters, Ikea, Brave, and countless others, Svelte is used to power everything from hobby projects to embedded systems interfaces.
To help developers build fully-featured applications with Svelte without worrying about the hard parts, we’ve been developing the SvelteKit application framework. We’re moving quickly towards a stable 1.0 release with the help of early adopters who have already downloaded SvelteKit almost one million times.
Scaling the teampermalinkRich Harris, Svelte’s creator, has joined Vercel to work on Svelte full-time. We’re incredibly excited to have Rich’s level of involvement in Svelte increase even more and have him steward Svelte into the future.
Svelte has been made possible by the work of a large, dedicated community. Svelte has added numerous core maintainers over the course of the pandemic, including three this past week. In alphabetical order:
benmccann - primary maintainer of SvelteKit for much of 2021
bluwy - major contributor across SvelteKit, vite-plugin-svelte, and Vite
dominikg - creator of vite-plugin-svelte
dummdidumm - maintainer of language-tools, which includes the VS Code extension and svelte-check
ehrencrona - contributor to SvelteKit and uses Svelte at work
geoffrich - has driven efforts to improve the accessibility of the Svelte site and documentation
GrygrFlzr - holds a unique status as a maintainer of both SvelteKit and Vite
Halfnelson - creator of svelte-native
ignatiusmb - regular SvelteKit contributor especially to TypeScript support
jasonlyu123 - maintainer of language-tools, which includes the VS Code extension and svelte-check
kaisermann - creator of svelte-preprocess
RedHatter - creator of Svelte Devtools
rixo - creator of svelte-hmr
Svelte began accepting donations via OpenCollective last year and has now had over $60,000 donated to-date with Cohere giving $10,000 just today. We hope that these funds will allow existing maintainers to spend more time on Svelte or that the funds could otherwise support Svelte on a part-time or contract basis, which we will continue to investigate.
PartnershipspermalinkMultiple major cloud vendors are stepping up to make deploying SvelteKit applications anywhere a seamless experience. As a result of Rich’s new job, SvelteKit will soon run on Vercel Edge Functions. Netlify has made big contributions to the SvelteKit Netlify adapter and also updated their zip-it-and-ship-it tool to better support SvelteKit. The recent Cloudflare Pages launch featured SvelteKit as a day one partner via a new adapter written by Svelte maintainers pngwn and lukeed, the latter of whom joined Cloudflare in 2021. Begin created a SvelteKit adapter for Architect apps. And community members have contributed adapters for environments such as Firebase and Deno, showcasing SvelteKit’s ability to run wherever JavaScript does.
We’ve also been working closely with the Vite team to iron out SSR issues uncovered by SvelteKit users. Vite is the build tool that makes the SvelteKit developer experience possible, and thanks to hard work from a contributor base that includes representatives of multiple frameworks, recent releases have solved almost all the issues we’ve been tracking as SvelteKit 1.0 release blockers.
A growing communitypermalinkSvelteSociety just hosted the 4th Svelte Summit — read a summary here — and Kevin Åberg Kultalahti is going full-time to lead SvelteSociety. In addition to hosting Svelte Summit, Kevin and SvelteSociety host and manage the Svelte Radio podcast, the SvelteSociety YouTube channel, and the Svelte subreddit. SvelteSociety has become the home of all things related to the Svelte community, with the sveltejs/community and sveltejs/integrations repos being retired in favor of sveltesociety.dev, which has been redesigned and rebuilt in SvelteKit. In October Brittney Postma, Willow aka GHOST, Steph Dietz, and Gen Ashley founded Svelte Sirens, a group for women & non-binary community members and their allies.
Hundreds of developers join the Svelte Discord every week to chat about Svelte. You may have noticed that, as of recently, some members of the server have purple names. These are people with the ambassadors role, which was created to recognise some of the community’s most valued members and help manage the demands of a rapidly growing community. Svelte ambassadors are people who are well known for their helpfulness and contributions and for upholding Svelte’s reputation as a friendly, welcoming community, and we’re deeply grateful for their involvement. The initial ambassadors in alphabetical order are:
babichjacob
brady fractal
brittney postma
d3sandoval
geoffrich
kev
puru
rainlife
rmunn
stolinski
swyx
theo
We’re also testing out GitHub discussions on SvelteKit and may bring this to other repos in the Svelte organization if feedback is positive.
Things to watchpermalinkSvelteKit is continuing to progress towards 1.0 and, in just the past week, we have added major features like improved client-only rendering, routing hooks, and the ability to pass data from child components to layouts (e.g. to support easier management of <meta> tags). We're currently working on a number of other high priority items such as discussing API designs for features like streaming and file uploads and contributing to the upcoming Vite 2.8 release.
While a lot of effort has been going into SvelteKit recently, we continue to progress the entire ecosystem. Svelte 3.46.0 was one of our biggest releases in awhile with two major new features added: constants in markup and style directives.
Svelte and SvelteKit’s trajectories have been accelerated by the numerous investments above and there will be many more updates to come — subscribe to the blog via RSS or check monthly to be the first to get them.
Spring • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
HTML tags • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
DOM events • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events REPL  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
SvelteKit is in public beta
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           SvelteKit is in public beta And we'd love to have your feedback  Rich Harris Mar 23 2021 On this page   On this page  Previously: What's the deal with SvelteKit?
It's time. After five months and hundreds of commits, you're finally invited to try out the SvelteKit beta. It's not finished — there are a few known bugs and several missing features — but we're really happy with how it's shaping up and can't wait for you to try it.
Starting a new project is easy:
# create the project
mkdir my-app
cd my-app
npm init svelte@next
# install dependencies
npm install
# start dev server and open a browser tab
npm run dev -- --openYou'll find documentation at kit.svelte.dev/docs. If you have a Sapper app that you'd like to migrate to SvelteKit, you'll find instructions at kit.svelte.dev/docs/migrating.
The source code is available at github.com/sveltejs/kit. Issues and pull requests are disabled while we finish getting our house in order, but we'll be making it fully open in the near future.
Wait, what is SvelteKit?permalinkThink of it as Next for Svelte. It's a framework for building apps with Svelte, complete with server-side rendering, routing, code-splitting for JS and CSS, adapters for different serverless platforms and so on.
If you're familiar with Sapper, SvelteKit is Sapper's successor.
From Snowpack to VitepermalinkOne thing that might seem surprising after the announcement video, in which I waxed lyrical about Snowpack, is that SvelteKit uses Vite under the hood. When we tried Snowpack back when we started thinking about what form SvelteKit should take, it was love at first sight.
Snowpack created an entirely new category of dev tooling. Rather than bundling your app in development, as we've been doing with webpack and Rollup for the last several years, Snowpack is an unbundled dev server that uses the browser's native import and does 1:1 transformations of things like Svelte components on the fly. As a result you get quick startup, simple caching and instant hot module reloading. Once you experience this way of working, it will ruin you for anything else.
Vite falls into the same category as Snowpack. While Vite 1 wasn't suitable for SvelteKit — it was Vue-centric (Vite and Vue are both created by Evan You) and made server-side rendering difficult — Vite 2 is framework-agnostic and designed with SSR at the core. It also has powerful features, like CSS code-splitting, that we previously had to implement ourselves. When we evaluated the two technologies side-by-side we were forced to conclude that Vite is a closer match for SvelteKit's requirements and would give us the best chance to deliver the framework of our imaginations.
We owe a deep debt of gratitude to the Snowpack team, both for the close collaboration earlier in development and for lighting the path that web development will take over the next few years. It's a wonderful tool, and you should absolutely try it out.
Dogfooding as extreme sportpermalinkSvelteKit is very much in beta, but that doesn't mean it hasn't been used in production.
My day job is at the New York Times, where I've spent much of the last twelve months working on our coronavirus tracker. It uses a customised version of the workflow that powers the majority of graphics at the Times, which isn't designed for large multi-page projects. When we decided late last year to create pages for each of the ~3,000 counties in the US, we quickly realised we would need to completely rearchitect the project.
Even though it was far from ready, SvelteKit was the only framework that matched our esoteric requirements. (Anyone who has worked in a newsroom and done battle with their CMS will know what I'm talking about.) Today it powers our county risk pages and we're in the process of migrating existing pages to the SvelteKit app.
I am eternally grateful for my coworkers' forbearance.
Using unfinished software to build an app that will be seen by millions of people is a risk, and in general I don't recommend it. But it has enabled us to develop the app much faster, and has made the framework itself much stronger than it otherwise would be.
The road to 1.0permalinkYou can see the list of outstanding issues with the 1.0 milestone on our issue tracker. Alongside that work, we plan to upgrade the documentation and add more adapters.
Most importantly though, we need your feedback to help us make the best possible app framework. Try it out, and let us know which pieces are missing.
Many thanks to everyone who has tried SvelteKit out despite the 'here be dragons' warnings and lack of documentation; your back-channel feedback has been invaluable. In particular, I want to acknowledge the work of GrygrFlzr, who maintained unofficial docs and a fork that added Windows support when we lacked it; and dominikg whose work on Svite laid essential groundwork for SvelteKit's Vite integration. Both have now been welcomed onto the team.
Text inputs • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
In and out • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Custom JS transitions • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions REPL  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
<svelte:window> • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window> REPL  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Tweened • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened REPL  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
What's new in Svelte: September 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: September 2023 New parameters in SvelteKit's redirect and an onNavigate lifecycle function come to life  Dani Sandoval Sep 1 2023 On this page   On this page  Happy September y'all! With all the sneak peeks at what's coming soon in Svelte 5, we thought it'd be best to look back at the last month to see what's shipped and what the community is building with Svelte.
Before we jump in, a warm welcome to the new Svelte Ambassadors: @cainux and @grischaerbe! Welcome to the crew ⛴️
What's new in Svelte & Language Toolspermalink
svelteHTML has moved from language-tools into Svelte core so that svelte/element types will now load correctly (4.2.0 in Svelte, 107.10.0 in Language Tools)
What's new in SvelteKitpermalink
URL is now accepted in the redirect function (1.23.0, Docs, #10570)
Mistyped route filenames will now throw a warning (1.23.0, #10558)
The new onNavigate lifecycle function enables view transitions - Check out the blog post for more info (1.24.0, Docs, #9605)
But that's just the new features! For all the patches and performance updates from this month, check out the SvelteKit CHANGELOG. You can also find adapter-specific CHANGELOGs in each of the adapter directories.
Community ShowcasepermalinkApps & Sites built with Svelte
Planet Of The Bugs allows developers to practice and hone their skill-sets by exposing them to an endless supply of unique, curated issues and bugs from popular open-source projects on Github
Minesweeper is an Android game built with SvelteKit, Capacitor, TailwindCSS and DaisyUI (check it out on the Google Play Store)
Pendor is an AI component generator for Svelte
Avatars Pro is a social proof widget made for the web
Pomodoro Focus is a pomodoro timer browser extension
memegen is a Firefox web extension that allows users to generate memes using various templates
Resgen is a Chrome extension that tailors resumes based on job descriptions and your experiences
Icono Search is an AI-powered video search engine
digital-paper is a writing app with no backspace or undo
Ubuntu 22.04 in Svelte aims to replicate the Ubuntu 22.04 desktop experience on the web
My Queue creates a playlist of written articles by turning them into audio stories
Learning Resources
Featuring Svelte Contributors and Ambassadors
Svelte Society - London August 2023
Building a Blog using SvelteKit and Nostr as a CMS (Part 1) by Kev
Mastering SvelteKit with Geoff Rich | JS Drops by This Dot Media
Using GitHub Contributions To Flex On The Normies, Learn Svelte By Making A Matching Game and Who Needs API Permission When You Can Use Web Scraping by Joy of Code
The missing guide to understanding adapter-static in SvelteKit by Stanislav Khromov
This Week in Svelte:
2023 July 28 - Screen reader market share, Svelte to plain JS, Web Components
2023 Aug 4 - Svelte 4.1.2, SvelteKit 1.22.4, ES Modules, Types in markup
2023 August 11 - Svelte 4.2.0, SvelteKit 1.22.5, How to create Toggle Switches
2023 August 18 - SvelteKit 1.22.6, accessible form error summaries
2023 August 25 - SvelteKit 1.23.0, Bun and SvelteKit, Enhanced search
Svienna (Svelte Society Vienna) Sessions
Ermin Celikovic - You might not need a slider library
Lukas Stracke - How to use sentry.io in your SvelteKit App
Jean-Yves Couet - SvelteKit & Remult... fullstack apps in minutes!
Sirens Sessions
Prismic Slice Machines & SvelteKit with Sam Littlefair
Medusa and SvelteKit E-Commerce Stack with Lacey Pevey
Design Systems: Lessons Learned with Eric Liu
To Watch
Image optimization in SvelteKit with vite-imagetools by hartenfellerdev
Building a Todo App with Rust and SvelteKit: Complete Tutorial and Stripe Payment In SvelteKit With Dynamic Pricing by SvelteRust
Leaflet maps in SvelteKit like it's 2023 (HowTo)
ShipBit
To Read
Internationalization in SvelteKit (Series) by Aakash Goplani
The easiest Chatbot you will ever build and Intro to LangSmith🦜️🛠️ by Simon Prammer
SvelteKit: How to make code-based router, instead of file-based router [August 2023] by Max Core
SvelteKit Hydration Gotcha by Captain Codeman
Automatically generate sitemap.xml in SvelteKit by Alex Schnabl
Discovering Svelte: Things I Learned While Using Svelte by Posandu Mapa
Typed fetch with Sveltekit and Hono using RPC by Subhendu Pratap Singh
Svelte Context Module Scripts Explained by raqueebuddin aziz
Building with GPT4 and Svelte by levmiseri
Type-safe User Authentication in SvelteKit with Lucia, Planetscale, and Upstash Redis by Chris Jayden
Document Svelte Projects with HTML and JSDoc Comments by Ross Robino
Libraries, Tools & Components
Carta is a lightweight, fast and extensible Svelte Markdown editor and viewer, based on Marked
Threlte, the 3D framework built from Svelte and Three.js has released version 6
vite-plugin-web-extension works great with Svelte to make building browser extensions easier
Salvia-kit Svelte Dashboards contains 10 free dashboard templates for SvelteKit
drab is an Unstyled Svelte component library
svelte-img-previewer is a tool for displaying images from input file types in Svelte
sveltekit-search-params describes itself as the fastest way to read AND write from query search params in SvelteKit
That's it for this month! Feel free to let us know if we missed anything on Reddit or Discord.
Until next time 👋
What's new in Svelte: March 2023
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           What's new in Svelte: March 2023 SvelteHack, post-1.0 SvelteKit improvements and a huge showcase  Dani Sandoval Mar 1 2023 On this page   On this page  March is coming in hot with a number of essential features having been added to SvelteKit following its 1.0 launch. Check out last week's blog post for more details.
Svelte Society also launched SvelteHack last month with over $12,000 in prizes - calling all Svelte developers, new and old, to make something awesome before the April 17th deadline!
And, if you haven't heard already, there's going to be another Svelte Summit! Head over to SvelteSummit.com and sign up for the newsletter to get updates about the next event 📬
Now let's jump into this month's changes...
What's new in SvelteKitpermalink
$app/paths can now be used without an app - making things like component testing with Vitest, using Storybook, etc. easier (1.4.0, #8838)
Adapters can now be configured at the route level (1.5.0, Docs, #8740)
The new snapshot mechanism preserves ephemeral DOM state even after navigation and page reloads (1.5.0,Docs, #8710)
OPTIONS are now available within the server method (1.6.0, Docs, #8731)
Richer error messages have been added for invalid exports (1.7.0, #9055)
Streaming promises are now available for server load functions (1.8.0, Docs, #8901)
A new configuration option, preloadStrategy, helps tune preloading to avoid import 'waterfalls' on certain browsers (1.8.4, Docs, #9179)
The new paths.relative option can control interpretation of paths.assets and paths.base (1.9.0, Docs, #9220)
What's new in Svelte and Language Toolspermalink
The REPL on svelte.dev now supports the exports field in package.json (#445)
The new Call Hierarchy feature lets you see where a function or a class is called and follow the call stack up (extensions-107.1.0, #1889)
declarationMap support has been added to the Svelte extension. Now "go to definition" on .svelte files will navigate to the source code when a library has declaration maps (extensions-107.1.0, #1878)
TypeScript Inlay Hints support is now available via the Svelte Extension. Enable them with javascript.inlayHints.* or typescript.inlayHints.* (extensions-107.1.0, #1855)
*for all the changes to the Svelte compiler, including unreleased changes, check out the CHANGELOG.
Community ShowcasepermalinkApps & Sites built with Svelte
win32.run is a version of Windows XP in the browser - with a File System, programs, XP-style File Picker and Saver dialogs, 3rd-party programs, and more
Svelte Radial Menu is a radial menu experiment - based on Rauno's radial menu
apod color search lets you search for astronomy picture of the day (APO) photos by color
SvHighlight is a code highlighter for SvelteKit and TailwindCSS with blur and focus blocks
Limey lets you create beautiful one-page websites in minutes
a/links is an extension for short, composable bookmarks
Sprint Cards is a design challenge generator
Plought is a tool to reduce noise in decision making
ArcOS-Frontend is a rewrite of the Arc operating system's frontend in Svelte
Poxi is powering the user-made web with a drag-and-drop, drawable website editor that's easy to collaborate in
demo-threlte-scroller-rocinante is a "scrolly telling" proof-of-concept that combines svelte-sequence with Threlte
Phonics + Stuff is a set of resources for learning & teaching phonics
Learning Resources
Featuring Svelte Contributors and Ambassadors
Streaming, snapshots, and other new features since SvelteKit 1.0 by Geoff Rich (on the Svelte Blog)
View Transition Experiments with Svelte and Native Page Transitions in SvelteKit (updated for 2023) by Geoff Rich
Ron Au's story and how to be whimsical! by Svelte Radio
SvelteKit 1.0 with Rich Harris by PodRocket
Svelte Society Africa has formally launched!
SvelteKit overview with Simon and Dominik by Frontend RheinMain
To Watch or Hear
Delightful Web Development with SvelteKit is a workshop from This Dot Labs - taking place on April 13th.
Have More Control Over Layouts With Group Layouts In SvelteKit and Learn SvelteKit Hooks Through 6 Examples by Joy of Code
Svelte Kit Creating Popup Modals with Tailwind CSS and SvelteKit: Creating Dynamic Tables with Tailwind CSS by Abdul Rehman 2050
To Read
Svelte Language Server Example by VolarJS
How I Made My App 2.4x Faster Switching to Svelte by Erik Verduin
Smooth Page Transitions with SvelteKit and How to Build a Static SvelteKit Site by Phil Kruft
Blazing fast PWAs with SEO power using SvelteKit and Ionic by Tommertom
Svelte Stores Tutorial: Share Data Between Multiple Components by Vincent Widerberg
A Business Case for SvelteKit by Chris Ellis
How to set up a new Svelte project with SvelteKit by Igor Nowosad
How to type Events, Slots, and Props in Svelte by Raqueebuddin Aziz
Use TypeScript with SvelteKit and Supabase by Ross Robino
Invoking Svelte components from your Ember apps by Rajasegar Chandran
Add a sitemap to your server side rendered SvelteKit website and State in URL: the SvelteKit approach by Justin Ahinon
Display crypto data real-time in a chart using Sveltekit, Chart.js & coincap.io by Hessel
Libraries, Tools & Components
UI Kits and Components
Pink is a framework agnostic design system from Appwrite
quick-pick is a simple search tool where you control the search catalog
Grail UI offers a set of component primitives, actions and utilities that help you build accessible and high quality Svelte applications faster, while providing a great developer experience
svelte-image-comparison is a Svelte component to compare image or canvas elements
simple-font-select is a simple font select component that exposes all local fonts as CSS font families
svelte-datatables-net is a Svelte component that turns data into an interactive HTML table
svelte-flextable is a toolkit for creating server-side processing datatable components with Svelte
svelte-algolia-instantsearch is a community-developed wrapper around instantsearch.js for Svelte
svelte-deep-zoom is a Svelte component to render interactive Deep Zoom images (tiled image pyramids)
SVoast is a simple toast component for Svelte
svelte-otp is a simple lightweight OTP input component for svelte
trace-svelte is a line by line highlighter for Svelte
Svelte Auth UI is a set of authentication components for Svelte
KitDocs is a documentation integration for SvelteKit - a VitePress alternative for Svelte
svelte-signature-pad is a Svelte action to capture smoothed signatures as SVG paths using the excellent perfect-freehand library
Helpers, Stores and Actions
SvelteKit-Document is a tiny utility for SvelteKit that lets you change the <html>, <head>, and <body> tags from any page or layout - with full SSR support
SvelteKit Form Data is an automatic SvelteKit form data parser middleware
sveltekit-superforms supercharges your SvelteKit forms with a bunch of quality of life features. Purports to be a "powerhouse of a library"
Houdini - the "disappearing" GraphQL client for the SvelteKit - is now 1.0
sveltekit-modal-langchain is an example SvelteKit project using sveltekit-modal, showing how easy it is to write Python endpoints in SvelteKit
mdsvex-excerpt allows you to show only a portion of document in certain layouts
Svelte Action Balancer is a simple Svelte action that makes titles more readable
svelte-object helps create and maintain objects using components. Values are stores and can therefore be intuitively subscribed to and updated
svelte-relative-time is a tiny Svelte action and component to render relative times
svelte-disable-preload is a simple action to apply no-op event listeners to an element that prevent the document-level SvelteKit event handlers being invoked
SvelteKit Static Sitemap generates a sitemap.xml for your page during build
svelte-intersection-observer-action is a Svelte action for element position notifications using IntersectionObserver
svelte-sequence provides custom stores to compose tweened motion sequences over multiple steps
@svelte-put/inline-svg is a Svelte action for inlining dynamic SVGs (fetched from network)
Other cool tools
sveltekit-modal lets you write Python endpoints in SvelteKit using Modal
svelte-kit-bot-block is a server hook to handle spam requests with SvelteKit
Svelte Email lets you write and design email templates with Svelte and render them to HTML or plain text
Inertia.js lets you quickly build modern single-page React, Vue and Svelte apps using classic server-side routing and controllers
svelte-adapter-bun is an adapter for SvelteKit apps that generates a standalone Bun server
React in Svelte is a library that enables you to use React components in Svelte
SvelteKit Redis Session Manager is a Redis integration in SvelteKit for Session Management
Thanks for reading! Don't forget to try your hand at the Svelte Hackathon!
Feel free to let us know if we missed anything on Reddit or Discord
Adding parameters • Svelte Examples
Skip to main content  svelte.dev svelte  ｜ Examples     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Examples  Introduction  Hello world  Dynamic attributes  Styling  Nested components  HTML tags   Reactivity  Reactive assignments  Reactive declarations  Reactive statements   Props  Declaring props  Default values  Spread props   Logic  If blocks  Else blocks  Else-if blocks  Each blocks  Keyed each blocks  Await blocks   Events  DOM events  Inline handlers  Event modifiers  Component events  Event forwarding  DOM event forwarding   Bindings  Text inputs  Numeric inputs  Checkbox inputs  Group inputs  Textarea inputs  File inputs  Select bindings  Select multiple  Each block bindings  Media elements  Dimensions  bind:this={canvas}  Component bindings   Lifecycle  onMount  onDestroy  beforeUpdate and afterUpdate  tick   Stores  Writable stores  Auto-subscriptions  Readable stores  Derived stores  Custom stores   Motion  Tweened  Spring   Transitions  The transition directive  Adding parameters  In and out  Custom CSS transitions  Custom JS transitions  Transition events  Deferred transitions   Animations  The animate directive   Easing  Ease Visualiser   SVG  Clock  Bar chart  Area chart  Scatterplot  SVG transitions   Actions  The use directive  Adding parameters REPL  A more complex action   Classes  The class directive  Shorthand class directive   Component composition  Slots  Slot fallbacks  Named slots  Slot props  Conditional Slots  Modal   Context API  setContext and getContext   Special elements  <svelte:self>  <svelte:component>  <svelte:element>  <svelte:window>  <svelte:window> bindings  <svelte:document>  <svelte:body>  <svelte:head>   Module context  Named exports   Debugging  The @debug tag   7GUIs  Counter  Temperature Converter  Flight booker  Timer  CRUD  Circle Drawer   Miscellaneous  Hacker News  Immutable data        loading editor...     Result JS output CSS output   Console
Clear    loading Svelte compiler...    loading editor...   Compiler options   result = svelte.compile(source, {
generate:  "dom"  "ssr", dev:  false, css:  "injected"  "external"  "none", hydratable:  false, customElement:  false, immutable:  false, legacy:  false
});
loading editor...
Select bindings • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Special elements / <svelte:fragment> • Svelte Tutorial
Skip to main content  svelte.dev svelte  ｜ Tutorial     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme               Special elements / <svelte:fragment> a. Basicsb. Adding datac. Dynamic attributesd. Stylinge. Nested componentsf. Making an appa. Assignmentsb. Declarationsc. Statementsd. Updating arrays and objectsa. Declaring propsb. Default valuesc. Spread propsa. If blocksb. Else blocksc. Else-if blocksd. Each blockse. Keyed each blocksf. Await blocksa. DOM eventsb. Inline handlersc. Event modifiersd. Component eventse. Event forwardingf. DOM event forwardinga. Text inputsb. Numeric inputsc. Checkbox inputsd. Group inputse. Textarea inputsf. Select bindingsg. Select multipleh. Contenteditable bindingsi. Each block bindingsj. Media elementsk. Dimensionsl. Thism. Component bindingsn. Binding to component instancesa. onMountb. onDestroyc. beforeUpdate and afterUpdated. ticka. Writable storesb. Auto-subscriptionsc. Readable storesd. Derived storese. Custom storesf. Store bindingsa. Tweenedb. Springa. The transition directiveb. Adding parametersc. In and outd. Custom CSS transitionse. Custom JS transitionsf. Transition eventsg. Global transitionsh. Deferred transitionsi. Key blocksa. The animate directivea. The use directiveb. Adding parametersa. The class directiveb. Shorthand class directivec. Inline stylesd. The style directivea. Slotsb. Slot fallbacksc. Named slotsd. Checking for slot contente. Slot propsa. setContext and getContexta. <svelte:self>b. <svelte:component>c. <svelte:element>d. <svelte:window>e. <svelte:window> bindingsf. <svelte:document>g. <svelte:body>h. <svelte:head>i. <svelte:options>j. <svelte:fragment>a. Sharing codeb. Exportsa. The @debug tagb. HTML tagsa. Congratulations!    The <svelte:fragment> element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact.
In the example notice how we applied a flex layout with a gap of 1em to the box.
<!-- Box.svelte -->
<div class="box">
<slot name="header">No header was provided</slot>
<p>Some content between header and footer</p>
<slot name="footer" />
</div>
<style>
.box {
display: flex;
flex-direction: column;
gap: 1em;
}
</style>However, the content in the footer is not spaced out according to this rhythm because wrapping it in a div created a new flow layout.
We can solve this by changing <div slot="footer"> in the App component. Replace the <div> with <svelte:fragment>:
<svelte:fragment slot="footer">
<p>All rights reserved.</p>
<p>Copyright (c) 2019 Svelte Industries</p>
</svelte:fragment>  Show me  Edit this chapter
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
svelte:component --style-props issue • REPL • Svelte
Skip to main content  svelte.dev svelte  ｜ REPL     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme                         Log in to save
Using CSS-in-JS with Svelte
Skip to main content  svelte.dev svelte  ｜ Blog     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           Using CSS-in-JS with Svelte You don't need to, but you can  Rich Harris Dec 26 2018 On this page   On this page  CSS is a core part of any web app. By extension, a UI framework that doesn't have a built-in way to add styles to your components is unfinished.
That's why Svelte allows you to add CSS in a component's <style> tag. Co-locating your CSS with your markup means we can solve the biggest problems developers face when writing CSS without introducing new ones, all while providing a rather nice development experience.
But Svelte's style handling does have some limitations. It's too difficult to share styles between components, or apply app-level optimisations. These are areas we plan to address in future versions, but in the meantime if you need those things you can use any framework-agnostic CSS-in-JS library.
For examplepermalinkHere, we're using Emotion to generate scoped class names that can be used across multiple components:
It's important to note that most CSS-in-JS libraries have a runtime library, and many don't support statically extracting styles out into a separate .css file at build time (which is essential for the best performance). You should therefore only use CSS-in-JS if it's necessary for your application!
Note that you can mix-and-match — you can still use Svelte's built-in CSS handling alongside a CSS-in-JS library.
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
Skip to main content  svelte.dev svelte  ｜ Docs     Docs Examples REPL Blog   Tutorial SvelteKit  Discord   GitHub   Theme           JavaScript  TypeScript
